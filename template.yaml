AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  my-blog-api-sam
  
  Sample SAM Template for my-blog-api-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Environment:
      Variables:
        TZ: Asia/Tokyo
        DYNAMODB_ENDPOINT: ""
        POSTS_TABLE_NAME: Posts
        RECOMMENDED_BOOKS_TABLE_NAME: RecommendedBooks
        ID_COUNTER_TABLE_NAME: IdCounter
        S3_ENDPOINT: ""
        S3_BUCKET: bookrecorder-image
  Api:
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,DELETE'"
      AllowHeaders: "'content-type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  MyBlogApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handler/
      Handler: handler
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        HealthApi:
          Type: Api
          Properties:
            Path: /health
            Method: GET
        RecommendedBooksApi:
          Type: Api
          Properties:
            Path: /recommended_books
            Method: GET
        RecommendedBooksCreateApi:
          Type: Api
          Properties:
            Path: /recommended_books
            Method: POST
        PostsIndexApi:
          Type: Api
          Properties:
            Path: /posts
            Method: GET
        PostsShowApi:
          Type: Api
          Properties:
            Path: /posts/{id}
            Method: GET
        PostsCreateApi:
          Type: Api
          Properties:
            Path: /posts
            Method: POST
        UsersCreateApi:
          Type: Api
          Properties:
            Path: /users
            Method: POST
        UsersLoginApi:
          Type: Api
          Properties:
            Path: /login
            Method: POST
        UsersLogoutApi:
          Type: Api
          Properties:
            Path: /logout
            Method: DELETE
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          TZ: Asia/Tokyo
          DYNAMODB_ENDPOINT: ""
          RECOMMENDED_BOOKS_TABLE_NAME: !Ref RecommendedBooksDynamoDBTable
          POSTS_TABLE_NAME: !Ref PostsDynamoDBTable
          ID_COUNTER_TABLE_NAME: !Ref IdCounterDynamoDBTable
          USERS_TABLE_NAME: !Ref UsersDynamoDBTable
          S3_ENDPOINT: ""
          S3_BUCKET: bookrecorder-image
      Role: "arn:aws:iam::873781314098:role/my-blog-api-sam-MyBlogApiFunctionRole-1HTYS5Y6FSF5R"
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Role: "arn:aws:iam::873781314098:role/ApiGatewayPushLogsToCloudWatchLogs"
      AccessLogSetting:
        DestinationArn: "arn:aws:logs:ap-northeast-1:873781314098:log-group:/aws/apigateway/accesslog"
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
  RecommendedBooksDynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    TableName: "RecommendedBooks"
    Properties:
      PrimaryKey:
        Name: Id
        Type: Number
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  PostsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Posts"
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "N"
        - AttributeName: "Category"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: "CategorySearchIndex"
          KeySchema:
            - AttributeName: "Category"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
  IdCounterDynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    TableName: "IdCounter"
    Properties:
      PrimaryKey:
        Name: Identifier
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  UsersDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Users20191010"
      AttributeDefinitions:
        -
          AttributeName: "AuthenticationToken"
          AttributeType: "S"
        -
          AttributeName: "Email"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "Email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        -
          IndexName: "AuthenticationTokenIndex"
          KeySchema:
            -
              AttributeName: "AuthenticationToken"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "Id"
              - "EncryptedPassword"
              - "AuthenticationTokenExpiredAt"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  MyBlogApiAPI:
    Description: "API Gateway endpoint URL for Prod environment for First Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  MyBlogApiFunction:
    Description: "First Lambda Function ARN"
    Value: !GetAtt MyBlogApiFunction.Arn
