-- MySQL dump 10.13  Distrib 5.7.25, for Linux (x86_64)
--
-- Host: localhost    Database: book_recorder_development
-- ------------------------------------------------------
-- Server version	5.7.25-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

DROP DATABASE IF EXISTS book_recorder_test;
CREATE DATABASE book_recorder_test;
USE book_recorder_test;

--
-- Table structure for table `post_categories`
--

DROP TABLE IF EXISTS `post_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post_categories` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `color` varchar(8) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post_categories`
--

LOCK TABLES `post_categories` WRITE;
/*!40000 ALTER TABLE `post_categories` DISABLE KEYS */;
INSERT INTO `post_categories` VALUES (0,'その他','#6D4C41','2018-09-05 23:02:27','2018-09-05 23:02:30'),(1,'Vue / Nuxt','#4fc08d','2018-09-05 22:35:51','2019-01-20 22:46:56'),(2,'Ruby/Rails','#CC342D','2018-09-05 22:36:46','2018-09-05 22:36:48'),(3,'AWS','#ff9d00','2018-09-05 22:37:34','2018-09-05 22:37:35'),(4,'PHP','#8892BF','2018-09-05 22:46:22','2018-09-05 22:46:24'),(5,'Kotlin','#039BE5','2018-09-05 22:49:02','2018-09-05 22:49:04'),(6,'Android','#78c257','2018-09-16 09:45:30','2018-09-16 09:45:30'),(7,'Web 一般','#FF8000','2018-10-16 22:53:37','2019-01-20 23:47:25'),(8,'Go','#40e0d0','2019-01-30 20:44:57','2019-01-30 21:17:07');
/*!40000 ALTER TABLE `post_categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `posts` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `post_category_id` int(11) NOT NULL DEFAULT '0',
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `image_file_name` varchar(255) NOT NULL DEFAULT '',
  `active` tinyint(4) NOT NULL DEFAULT '0',
  `published_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_posts_on_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,1,0,'ブログを作成しました','今まではQiitaや別ブログの方で記載をしていたのですが、勉強のために作成しました。  \r\nこのブログは、バックエンドにRails、フロントエンドにVue.jsを使用しています。  \r\n運用していくうちに気づいたことや日常の徒然を書きたいと思いますので、よろしくお願いします！','',1,'2018-06-20 00:00:00','2018-06-21 08:02:57','2018-06-21 08:02:57'),(2,1,1,'TwitterのツイートボタンをVueコンポーネントにしてみた','このブログのタイトル下あたりにあるTwitterのボタンをVueコンポーネントにしてみたので、そのメモです。  \r\n\r\n## コンポーネントファイルを作る\r\n新しくTwitterボタン用のコンポーネントを作ります。  \r\n\r\n```js\r\n<template>\r\n  <div class=\"btn-container\" @click=\"tweet\">\r\n    <button class=\"btn-twitter\">Tweet</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    props: {\r\n      text: {\r\n        type: String,\r\n        default: \'test\'\r\n      },\r\n      path: {\r\n        type: String,\r\n        default: \'\'\r\n      }\r\n    },\r\n    methods: {\r\n      tweet: function() {\r\n        var text = this.text;\r\n        var url = \"https://hogehoge.com\" + this.path;\r\n        var redirect_url = \"https://twitter.com/share\";\r\n        location.href = redirect_url + \'?text=\' + text + \'&url=\' + url;\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n  // ....\r\n</style>\r\n```\r\n[props](https://jp.vuejs.org/v2/guide/components-props.html)を使うことで、親コンポーネントから渡された値を参照することができます。  \r\nとりあえずは、ツイート用の文言とそのページのパスを渡す想定でいます。  \r\n受け取ったパラメータを使って、リダイレクトURLを作り、ボタンがクリックされたタイミングで遷移させます。  \r\n\r\n## 画像の参照\r\n実は今までやって来なかったのですが、Vueコンポーネント内から画像を参照するにはどうしたら良いんだろうと思いましたが、相対パスでいけました。  \r\nTwitterのロゴの部分です。  \r\nこれはbefore属性に `background-image` で指定しています。\r\n\r\n```css\r\n.btn-twitter:before {\r\n  // ...\r\n  background-image: url(\"../../images/logo_twitter.png\");\r\n}\r\n```\r\n## 親コンポーネントで指定\r\n使用する親コンポーネントで宣言します。  \r\n\r\n```js\r\nimport tweetButton from \'./tweet_button\';\r\n\r\nexport default {\r\n  // ....\r\n  components: {\r\n    \'v-tweet-button\': tweetButton\r\n  }\r\n}\r\n```\r\nこれで使用できるようになったので、配置したい所におきます。  \r\nこのとき、 `props` で指定したプロパティも忘れないように指定します。\r\n\r\n```html\r\n<v-tweet-button text=\"ツイートされるテキストだよ\" path=\"/path/to\"></v-tweet-button>\r\n```\r\nこれでツイートボタンが表示されるようになります。\r\n\r\n## スロットを使う\r\n[スロット](https://jp.vuejs.org/v2/guide/components-slots.html)を使うと、ボタンの文字を変えられたりします。\r\nツイートコンポーネントを下記のように変更し、\r\n\r\n```js\r\n<template>\r\n  <div class=\"btn-container\" @click=\"tweet\">\r\n    <button class=\"btn-twitter\"><slot></slot></button>\r\n  </div>\r\n</template>\r\n```\r\n宣言のタグ内に文言を埋めれば、その文字になります。\r\n\r\n```html\r\n<v-tweet-button text=\"ツイートされるテキストだよ\" path=\"/path/to\">\r\n  ツイートするよ\r\n</v-tweet-button>\r\n```\r\n他にも便利に使えそうです。\r\n\r\n## 終わりに\r\nパーツをコンポーネント化できるようになると、かなり捗る気がします。  \r\nRails みたいに、 `form` をコンポーネント化したいと思っているので、ちょっとチャレンジしてみます。','',1,'2018-06-25 00:00:00','2018-06-24 01:05:39','2018-06-24 01:05:40'),(3,1,0,'モブプログラミングをやってみた','先日、仲間内の勉強会にてモブプログラミングをやってみました。  \r\nただ、誰もやったことがなかったため、他の方のブログを参考にやりました。  \r\n結果としては、そこまでうまくいかなかったのですが、今後のためにやったことをまとめておこうと思います。\r\n## 実施概要\r\n- 参加人数: 8名（全員がWeb系のエンジニアではない）\r\n- PCは代表1名のものを使い、交代しながら実施。\r\n- 時間: 1.5時間\r\n  \r\n### 題材と目的の決定\r\n以前、私が趣味で作成した、ポーカーの役判定ライブラリがあったので、これを使ってポーカーのWebアプリを作成しようということになりました。  \r\n[https://github.com/naoki85/php_poker](https://github.com/naoki85/php_poker)  \r\n\r\n### 完成品\r\n上記GithubリポジトリのREADMEの画像のような画面を作成するところまでできました。\r\n\r\n## 良かったこと\r\n例えば、私は主にPHPで書く部分は得意なのですが、HTMLやCSSを綺麗に書くことは苦手です。  \r\nそういった時に、専門にしている人のコードを見ながら、その場で質問できるのは良かったです。  \r\n  \r\nまた、ポーカーをこうしたら面白そうといったアイディア的な話もできました。\r\n\r\n## 今後考えるべきこと\r\n### 1. 人数が多かった\r\n8名で1つの作品だと、人数的に多かったと考えています。  \r\n他の記事などを見ていると、3〜5名くらいのグループにするのがちょうど良いのでしょうか。\r\n\r\n### 2. テーマの選定\r\nテーマはその場で決めたのですが、ゴール地点のビジョンが人それぞれ違ったことが問題でした。  \r\n先に共有しておくか、もう少し具体的で狭いテーマにした方が良いかなと感じています。\r\n\r\n### 3. 全員が意見、質問を言えるようなルール\r\nどうしても「分からない」「遠慮」などで発言が少ない人がいました。  \r\nせっかくなので、全員がそれぞれ、何かしらの気づきを持って終わりたいと思うので、ある程度の強制力のあるルールがあっても良いのかな、と考えています。\r\n\r\n## さいごに\r\n最近よく聞くモブプログラミングをやってみました。  \r\nあまり成功したとは言えませんでしたが、また改善して次回企画してみたいと思います。  \r\n余談ですが、そう言えばといって取り出したポーカーの役判定クラスですが、せっかくなのでモジュールにしたいと思います。','',1,'2018-07-02 00:00:00','2018-07-01 20:16:47','2018-07-01 20:16:48'),(4,1,0,'新幹線通勤していて質問されること','私は新幹線通勤をしていますが、珍しいのかよく質問されることがあります。  \r\nこの記事ではそのことを書きたいと思います。  \r\n（なお、新幹線通勤しているのは個人的な事情なので、リモートワークについては一旦置いておきます。）\r\n\r\n## 通勤時間はどれくらい？\r\n新幹線だけで1時間かからないくらいです。  \r\n45分くらいかな。  \r\n朝は10分に1本くらい出るので、時間調整しやすいです。  \r\n  \r\n逆に夜は30分に1本が基本なので、難しいですw\r\n\r\n## 定期代はどれくらい？\r\n[JR東海: 新幹線定期券](http://railway.jr-central.co.jp/tickets/shinkansen/flex/)  \r\n  \r\nだいたい1ヶ月で8万〜9万円です。  \r\n東京の駅近に一人暮らしするのと同じくらいです。  \r\n正直なかなか高いです。  \r\n  \r\n### 会社はどれくらい補助してくれるの？\r\n会社の規定によるのではないでしょうか？  \r\n私の親族も東京通勤していますが、「乗車券は出すけど特急券は自腹」というのが相場のようです。（だいたい3万円くらい）  \r\n  \r\nとある会社で伺った時は、「新幹線代は全額出すけど、給料は下げる」というところがありました。  \r\n  \r\n## 終電は早いんじゃないの？\r\n東京発の最終は22時30分過ぎくらいです。  \r\n普通に仕事していれば、終電を逃すことはないです。  \r\n逆に勉強会であったり、飲み会に参加した時は厳しいですw\r\n\r\n## 新幹線の中で何やってるの？\r\n新幹線はだいたい座れるので、PC開いて勉強することもできます。  \r\nだいたいは寝てます。  \r\n  \r\n契約しておけば、新幹線のWifiが使用できるのでネットで調べ物もできます。  \r\n  \r\n[JR東海: 公衆無線LANサービスのご案内](http://railway.jr-central.co.jp/wireless/exp.html)  \r\n  \r\nただ貧弱なので（当たり前ですが）、注意が必要です。\r\n\r\n## ぶっちゃけきつい？\r\n思っているほどきつくはないです。  \r\nただ、楽ではないです。  \r\n  \r\n一番きついのは、帰りの新幹線で座れなかった時ですね。  \r\n帰りの新幹線は車両選びを間違えると、通路に人が溢れています。  \r\n（本当に全ての席が埋まってる）  \r\n  \r\nあとは、現場と家の物理的な距離が大きいのは、少なからず精神的なプレッシャーになっているかもです。\r\n\r\n## まとめると\r\n現場と家が近いに越したことはないと思います。  \r\n働き方改革が叫ばれている昨今、こういうことをしている人もいるよ、ということで記事を書いてみました。  \r\n','',1,'2018-07-05 00:00:00','2018-07-04 23:26:26','2018-07-04 23:26:26'),(5,1,2,'Railsみたいに新規作成、編集パーツを共通化する','このブログはVue.jsとRuby on Railsで作成しています。  \r\nブログの作成画面、編集画面にはそれぞれコンポーネントを使用していたのですが、パーツはだいたい同じなので共通化したいと思ってました。  \r\n我流ですが、こんな感じかな、と作成したのでまとめたいと思います。\r\n\r\n## リファクタ前\r\nリファクタ前は、本当に新規作成と編集画面のコンポーネントをそれぞれ用意して使っていました。\r\n\r\n```\r\ncomponents ┐\r\n                       ├ new.vue\r\n                       └ edit.vue\r\n```\r\nなお、前提として、データの取得、作成、更新はAPIを介してバックエンドのRails側で実施しています。  \r\n\r\n## 共通パーツの作成\r\nとりあえずコンポーネントを作成します。  \r\nファイル名は `form.vue` とします。\r\n\r\n```js\r\n<template>\r\n    <div>\r\n        <label>タイトル</label>\r\n        <input type=\"text\" v-model=\"title\">\r\n        <label>タイトル</label>\r\n        <input type=\"text\" v-model=\"content\">\r\n        \r\n        <button @click=\"onClickPost\">保存</button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data: function() {\r\n            return {\r\n                title: \'\',\r\n                content: \'\'\r\n            }\r\n        },\r\n        methods: {\r\n            onClickPost: function() {\r\n                // ....\r\n            },\r\n        }\r\n    }\r\n</script>\r\n```\r\n## フラグを渡して新規作成か編集か切替\r\n### 親コンポーネント\r\nVue.jsには親コンポーネントから子コンポーネントにデータを渡すこともできるので、 `editFlag` なるものを渡して、切り替えたいと思います。  \r\nファイル構成はこんな感じになる予定です。\r\n\r\n```\r\ncomponents ┐\r\n                       ├ new.vue\r\n                       ├ edit.vue\r\n                       └ form.vue\r\n```\r\n`new.vue` と `edit.vue` は下記のようにします。  \r\nなお、 `editFlag` は `edit` の場合は `true` 、 `new` の場合は `false` にします。  \r\n\r\n```js\r\n<template>\r\n    <div>\r\n      <h1>新規作成</h1>\r\n\r\n      <v-post-form v-bind:editFlag=false></v-post-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import PostForm from \'./form\';\r\n\r\n    export default {\r\n        components: {\r\n            \'v-post-form\': PostForm,\r\n        }\r\n    }\r\n</script>\r\n```\r\nなお、 `<v-post-form>` でBoolean型を渡すとき、[v-bind](https://jp.vuejs.org/v2/api/#v-bind)を使用しないとString型で渡ってしまうようです。  \r\n[Vue.jsのpropsでBooleanを渡そうとしたときの型エラー](https://qiita.com/smasato/items/8cf8edfbad3797c3b345)  \r\n### form.vueにて受け取る\r\n[props](https://jp.vuejs.org/v2/guide/components-props.html)で渡します。\r\n\r\n```js\r\n// ...\r\n<script>\r\n    export default {\r\n        props: {\r\n            editFlag: Boolean\r\n        },\r\n        data: function() {\r\n            // ...\r\n    }\r\n</script>\r\n```\r\nこの `editFlag` によって、出し分けていきます。  \r\n例えば、編集の場合は、元々のデータが必要なので、\r\n\r\n```js\r\n// ...\r\n<script>\r\n    export default {\r\n        // ...\r\n        mounted: function() {\r\n            if (editFlag) {\r\n                this.fetchPost();\r\n            }\r\n        },\r\n        methods: {\r\n            fetchPost: function() {\r\n                // データを取得するメソッド\r\n            }\r\n        }\r\n    }\r\n</script>\r\n```\r\nその他の文言なんかも、 `editFlag` によって出し分けました。  \r\n最後の `onClick` に付いては、クリック時のメソッドとボタンの文言を両方変えるので、ボタンごと出し分けました。\r\n\r\n```html\r\n<button v-if=\"editFlag\" @click=\"onUpdate\">編集</button>\r\n<button v-else @click=\"onCreate\">作成</button>\r\n```\r\n## さいごに\r\n作成してみましたが、結構強引だったかな、と思っています。  \r\nただ、元々のファイルが同じような入力パーツを2箇所で書くという、非合理極まりないものだったので、それよりは良くなったかなと思います。','',1,'2018-07-09 00:00:00','2018-07-07 17:35:48','2018-07-09 08:58:29'),(6,1,2,'Railsの低レベルキャッシュを使ってみた','以前、別ブログでRailsの低レベルキャッシュの簡単な記事を書かせていただきました。  \r\n[Railsの低レベルキャッシュを使ってみた | RE:ENGINES](https://re-engines.com/2017/09/04/rails%E3%81%AE%E4%BD%8E%E3%83%AC%E3%83%99%E3%83%AB%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/)  \r\n実際に組み込んでみたので、そのことを記事にしたいと思います。  \r\nなお、 `Rails.cache` の簡単な使い方は上記の記事を見ていただければと思います。\r\n\r\n## selectの結果をキャッシュ\r\nキャッシュに関するコードをどこに書くか悩みました。  \r\nデータ取得に関するロジックなのでコントローラーに書くのもアレだし、そのために別クラス作るのもな。。  \r\nということで、 [find](http://railsdoc.com/references/find)などのメソッドをオーバーライドするようにしました。\r\n\r\n```ruby\r\ndef self.find(id)\r\n    Rails.cache.fetch(\"cache_object\", expired_at: 1.hour) do\r\n        super(id)\r\n    end\r\nend\r\n```\r\n普通はどうやってやってるのかな。。\r\n\r\n## updateの際にキャッシュをクリア\r\nレコードを更新した場合は最新の状態にしたいので、キャッシュをクリアしておきます。  \r\nまたオーバーライドしようと思いましたが、よく考えたらコールバックがあるので、そちらで実行します。  \r\n[Active Record コールバック | Rails ガイド](https://railsguides.jp/active_record_callbacks.html)  \r\n\r\n```ruby\r\nafter_update -> {\r\n    Rails.cache.delete(\"cache_object\")\r\n}\r\n```\r\n\r\n## さいごに\r\nキャッシュはActiveRecordを継承したモデルとは別のクラスでやった方が良いんですかね？（未だに悩み中）  \r\nRailsの低レベルキャッシュを使用する際の参考にしていただければと思います。','',1,'2018-07-11 00:00:00','2018-07-07 21:36:49','2018-07-10 14:10:32'),(7,1,0,'Minikubeを使ってローカルにMySQLを用意した','かねてより興味のあったKubernetesを触ってみました。  \r\n学習用として、[Dockerによるアプリケーション開発環境構築ガイド](https://www.amazon.co.jp/Docker%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%82%AC%E3%82%A4%E3%83%89-%E6%AB%BB%E4%BA%95-%E6%B4%8B%E4%B8%80%E9%83%8E/dp/4839964580)を購入させていただきました。  \r\n試しにローカル環境のMySQLをローカル開発用のMinikubeを使って作成したので、そのメモです。  \r\nまだ理解が追いついていない部分もあるので、リファレンスを載っけているだけの場所もありますが、ご容赦ください。\r\n\r\n## 先に読んでおくと良いもの\r\nMinikubeのチュートリアルを読んでおいた方が良いと思います。  \r\nまた、Developer IO様も記事で紹介してくれているので、並べながらやると良いかと思います。  \r\n\r\n- [Tutorials | kubernetes](https://kubernetes.io/docs/tutorials/)\r\n- [[第1回]Kubernetesの公式チュートリアルをやって基本を抑える -アプリのデプロイ-](https://dev.classmethod.jp/cloud/kubernetes-tutorial-1/)\r\n\r\n上記を踏まえた上で実施します。\r\n## Minikubeの立ち上げ\r\n\r\n```shell\r\n$ minikube start\r\nStarting local Kubernetes v1.10.0 cluster...\r\nStarting VM...\r\nGetting VM IP address...\r\nMoving files into cluster...\r\nSetting up certs...\r\nConnecting to cluster...\r\nSetting up kubeconfig...\r\nStarting cluster components...\r\nKubectl is now configured to use the cluster.\r\nLoading cached images from config file.\r\n\r\n$ kubectl proxy &\r\nStarting to serve on 127.0.0.1:8001\r\n```\r\nこれでkubernetesの管理画面を見ることができます。  \r\n\r\n## MySQLの設定ファイルの作成\r\nまずは作成したファイルの全体を示します。  \r\n[gist](https://gist.github.com/naoki85/f0db0844b207fdf3e5b80363235bc0f6)でも作成しているので、見辛ければ、そちらもご覧ください。\r\n\r\n```yml\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: db-secret\r\n  namespace: default\r\ndata:\r\n  mysql-password: c2FtcGxlUGFzcw==\r\n  mysql-root-password: cm9vdFBhc3M=\r\n---\r\napiVersion: extensions/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  labels:\r\n    role: db\r\n  name: todo-db\r\n  namespace: default\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      role: db-instance\r\n  strategy:\r\n    rollingUpdate:\r\n      maxSurge: 1\r\n      maxUnavailable: 0\r\n    type: RollingUpdate\r\n  template:\r\n    metadata:\r\n      labels:\r\n        role: db-instance\r\n    spec:\r\n      containers:\r\n      - name: mysql-db\r\n        image: mysql:5.7\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 3306\r\n        env:\r\n        - name: MYSQL_USER\r\n          value: sampleUser\r\n        - name: MYSQL_PASSWORD\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: db-secret\r\n              key: mysql-password\r\n        - name: MYSQL_DATABASE\r\n          value: sampleDb\r\n        - name: MYSQL_ROOT_PASSWORD\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: db-secret\r\n              key: mysql-root-password\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: todo-db-service\r\n  labels:\r\n    role: db-service\r\n  namespace: default\r\nspec:\r\n  ports:\r\n  - port: 3306\r\n    targetPort: 3306\r\n    protocol: TCP\r\n  selector:\r\n    role: db-instance\r\n  type: NodePort\r\n```\r\n### Secret\r\n[https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)  \r\n秘密情報を管理します。  \r\nこの時、値は `base64` でエンコードして設定した方が良いようです。\r\n\r\n### Deployment\r\n[https://kubernetes.io/docs/concepts/workloads/controllers/deployment/](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)  \r\nDeploymentはアプリケーションを設置する際の条件を記述する感じでしょうか。  \r\nコード量が多いので、ブロックに分けます。  \r\n（コードは [gist](https://gist.github.com/naoki85/f0db0844b207fdf3e5b80363235bc0f6) のリンクを貼っておきます。）\r\n### 1. metadata\r\nラベルや名前などを定義します。  \r\n[https://gist.github.com/naoki85/f0db0844b207fdf3e5b80363235bc0f6#file-mysql-yml-L12](https://gist.github.com/naoki85/f0db0844b207fdf3e5b80363235bc0f6#file-mysql-yml-L12)\r\n### 2. spec\r\n[https://gist.github.com/naoki85/f0db0844b207fdf3e5b80363235bc0f6#file-mysql-yml-L17](https://gist.github.com/naoki85/f0db0844b207fdf3e5b80363235bc0f6#file-mysql-yml-L17)  \r\nここで諸々の仕様を決めます。  \r\nDockerで言うところの `Dockerfile` でしょうか。  \r\n色々設定値があるようです。\r\n\r\n### Service\r\n[https://kubernetes.io/docs/concepts/services-networking/service/](https://kubernetes.io/docs/concepts/services-networking/service/)\r\n\r\n## 反映させる\r\n\r\n```shell\r\n$ kubectl apply -f dn.yml \r\nsecret/db-secret created\r\ndeployment.extensions/todo-db created\r\nservice/todo-db-service created\r\n```\r\nサービスの外部接続URLを取得します。\r\n\r\n```shell\r\n$ minikube service todo-db-service --url\r\nhttp://192.168.99.100:30018\r\n```\r\nこれを使ってマシンのMySQLから接続してみます。\r\n\r\n```shell\r\n$ mysql -usampleUser -p -h 192.168.99.100 --port 30018\r\n```\r\n## 終了\r\n終了する場合は、 `ctr + C` で `minikube proxy` を終了した後、\r\n\r\n```shell\r\n$ minikube stop\r\n```\r\n## さいごに\r\nなんか `volumes` を設定するとうまくいかなかった。  \r\n購入した本の方には記載されていたんですが。。。  \r\n虫食いな状態でやったのでもしかすると設定が抜けていたかもしれません。  \r\n改めて確認しよう。','',1,'2018-07-13 00:00:00','2018-07-08 18:35:06','2018-07-12 07:56:49'),(8,1,1,'Vue.js（Vuetify）とFirebaseで簡単なブログを公開してみる その１〜開発環境を作る〜','## はじめに\r\nVue.js と Firebase で簡単なブログを作成してみたので、手順をまとめておきたいと思います。  \r\n全3回を予定しています。  \r\n- Vue.js のプロジェクトを Firebase にデプロイ\r\n- [コンポーネントを使って見た目を作る](https://blog.bookrecorder.net/posts/9)\r\n- （次回予定）コンポーネントのテストコードを書いてみる\r\n\r\nサンプルはこちらになります。  \r\n[https://my-blogs-158b8.firebaseapp.com/](https://my-blogs-158b8.firebaseapp.com/)  \r\nなお、実行環境は下記の通りです。  \r\n- Node.js 10.6.0\r\n- npm 6.1.0\r\n\r\nNode.js のインストールは下記の記事が参考になりました。  \r\n[Node.js と npm インストールとアップデート](https://qiita.com/jaxx2104/items/2277cec77850f2d83c7a)\r\n\r\n## Vuetify\r\n[Vuetify](https://vuetifyjs.com/ja/)はVue.jsのマテリアルデザイン用フレームワークです。  \r\nデザインで楽をしたいので、今回導入しました。  \r\nなお、最新の1.1.4では、`vue-cli` の3系が必要なようです。\r\n## プロジェクトの作成\r\n[Vuetify の QuickStart](https://vuetifyjs.com/ja/getting-started/quick-start)を見ながら進めます。\r\n### Vue CLI-3 のインストール\r\n```sh\r\n$ npm install @vue/cli -g\r\n```\r\n### Vueプロジェクトの作成\r\n```sh\r\n$ vue create my-app\r\n# 初期設定。よく分からなかったのでdefaultで\r\n? Please pick a preset: default (babel, eslint)\r\n# package manager npm or yarn\r\n? Pick the package manager to use when installing dependencies: Yarn\r\n```\r\nパッケージマネージャーは以後、 `npm` ではなく `yarn` を使用していきます。\r\n### Vuetifyの導入\r\n```sh\r\n$ vue add vuetify\r\n# 全部Enterで良さそう\r\n? Use a pre-made template? (will replace App.vue and HelloWorld.vue) Yes\r\n? Use custom theme? No\r\n? Use a-la-carte components? No\r\n? Use babel/polyfill? Yes\r\n```\r\n### 起動させてみる\r\nここまで行けば、とりあえずで確認してみます。\r\n```\r\n$ yarn serve\r\nhttp://localhost:8080\r\n```\r\n`http://localhost:8080` で下記のように画面が表示されるかと思います。  \r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/sample_1.png\" width=\"50%\" alt=\"sample_1\">\r\n\r\n## Firebaseプロジェクトの作成\r\nFirebaseに関しては、ドットインストールさんの動画が分かりやすいと思うので、もし見ていない方がいらっしゃれば先に見ておくと良いかと思います。  \r\n[Firebaseでウェブサイトを公開してみよう | ドットインストール](https://dotinstall.com/lessons/hosting_firebase)  \r\n[Firebase](https://firebase.google.com/)にいき、ログインします。  \r\nFirebaseは色々できるのですが、今回はHostingサービスを使用します。  \r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/sample_3.png\" width=\"50%\" alt=\"sample_3\">\r\n\r\n新しいプロジェクトを作成します。  \r\nプロジェクト名は `my-blogs` 、言語は日本語にします。  \r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/sample_2.png\" width=\"50%\" alt=\"sample_2\">\r\n\r\n作成が完了すると、ローカルに `firebase-tools` を入れるよう案内されるので、ローカル環境を作成します。\r\n## プロジェクトにFirebaseの設定を追加\r\nこちらの記事を参考にさせていただきました。  \r\n[Vue.js によるアプリを Firebase で Hosting する最短の道](https://qiita.com/Satachito/items/4a00b402970d657a88f3)\r\n```sh\r\n$ npm install -g firebase-tools\r\n```\r\nfirebaseコマンドが使用できると思うので、ログインします。\r\n```sh\r\n$ firebase login\r\n```\r\nFirebaseのロゴが出たら成功です。  \r\nプロジェクトディレクトリ内でFirebaseの設定を初期化します。\r\n```sh\r\n$ firebase init hosting\r\n```\r\n- どのプロジェクトの設定か聞かれるので、上記のFirebaseコンソールで作成下プロジェクト名を選択します。（ `my-blogs` ）\r\n- `What do you want to use as your public directory?` という質問には `dist` で回答すると良いようです。\r\n- 他の質問はデフォルトで良さそうです。\r\nこれでプロジェクトディレクトリに `firebase.json` ができていればOKです。\r\n\r\n## デプロイしてみる\r\nVue.jsを公開ようにするには、まずビルドする必要があります。\r\n```sh\r\n$ yarn build\r\n```\r\nそしてFirebaseにデプロイします。\r\n```sh\r\n$ firebase deploy\r\n```\r\nこれで、FirebaseのURLにアクセスすればローカルで構築したような画面になっているかと思います。\r\n## さいごに\r\n今回はデプロイ環境を作成するところまで記事にしてみました。  \r\nもし記事に過不足あれば、フッターリンクのTwitterアカウントにご意見いただければ嬉しいです。  （このブログにコメント機能が実装できていない。。）  \r\n次回は2日後に公開予定です。','',1,'2018-07-16 00:00:00','2018-07-15 16:34:43','2018-07-19 22:48:42'),(9,1,1,'Vue.js（Vuetify）とFirebaseで簡単なブログを公開してみる その２〜コンポーネントを使って見た目を作る〜','## はじめに\r\nVue.js と Firebase で簡単なブログを作成してみたので、手順をまとめておきたいと思います。  \r\n全3回を予定しており、今回は2回目です。\r\n- [Vue.js のプロジェクトを Firebase にデプロイ](https://bookrecorder.net/posts/8)\r\n- コンポーネントを使って見た目を作る\r\n- （次回予定）コンポーネントのテストコードを書いてみる\r\n\r\nサンプルはこちらになります。  \r\n[https://my-blogs-158b8.firebaseapp.com/](https://my-blogs-158b8.firebaseapp.com/)  \r\nなお、実行環境は下記の通りです。  \r\n- Node.js 10.6.0\r\n- npm 6.1.0\r\n\r\nNode.js のインストールは下記の記事が参考になりました。  \r\n[Node.js と npm インストールとアップデート](https://qiita.com/jaxx2104/items/2277cec77850f2d83c7a)\r\n## 必要なコンポーネントを作成、編集\r\n前回作成した画面では、 `src/App.vue` に記載されています。  \r\nヘッダーやフッターを修正する場合は、その画面を編集します。  \r\nヘッダー、フッターのVuetifyコンポーネントは下記です。  \r\n- [Toolbars](https://vuetifyjs.com/ja/components/toolbars)\r\n- [Footer](https://vuetifyjs.com/ja/components/footer)\r\n\r\nこのあたりはお好みですが、サンプルを作成した際の差分は下記です。  \r\n[https://github.com/naoki85/my-blogs/commit/1bf479bca2d205811645a5c49f553d641c3cd7d8](https://github.com/naoki85/my-blogs/commit/1bf479bca2d205811645a5c49f553d641c3cd7d8)\r\n### 記事一覧画面用のコンポーネント\r\n後々使用するので、 `src/components` ディレクトリを作成して、 `Index.vue` を作成します。  \r\n[Card](https://vuetifyjs.com/ja/components/cards)コンポーネントを使用して作成します。  \r\n記事のサムネイルとタイトルが表示されるようにしますが、ちょっと困ったのは、 `img` の `src` にバインドしようとするとうまくいきませんでした。  \r\n下記の記事の方法を参考にさせていただきました。  \r\n[Vue.jsでimgタグのsrcをバインドさせる際の注意点](http://tk2000ex.blogspot.com/2017/11/vue.html)\r\n```js\r\n<template>\r\n  <div>\r\n    <v-card>\r\n      <v-container\r\n        fluid\r\n        grid-list-lg\r\n      >\r\n        <v-layout row wrap>\r\n          <v-flex xs12>\r\n            <v-card color=\"grey lighten-5\">\r\n              <v-container fluid grid-list-lg>\r\n                <v-layout row>\r\n                  <v-flex xs7>\r\n                    <div>\r\n                      <div class=\"headline\">About Vuetify</div>\r\n                      <div>2018-07-10</div>\r\n                    </div>\r\n                  </v-flex>\r\n                  <v-flex xs5>\r\n                    <v-card-media\r\n                      :src=\"image_src\"\r\n                      height=\"125px\"\r\n                      contain\r\n                    ></v-card-media>\r\n                  </v-flex>\r\n                </v-layout>\r\n              </v-container>\r\n            </v-card>\r\n          </v-flex>\r\n        </v-layout>\r\n      </v-container>\r\n    </v-card>\r\n  </div>\r\n</template>\r\n<script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        image_src: require(\"@/assets/logo.png\")\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n### 記事詳細のコンポーネントを作る\r\n今回は静的なブログなので、記事ごとにコンポーネントを用意することを想定しています。  \r\nVuetifyの記事を書いている想定で、 `src/components/PostVuetify.js` というファイルを作成します。  \r\nぶっちゃけ `template` の中身はなんでも良いです。  \r\n```js\r\n<template>\r\n  <div>\r\n    This blog written about Vuetify!!\r\n  </div>\r\n</template>\r\n```\r\n## VueRouterの追加\r\n[https://router.vuejs.org/ja/](https://router.vuejs.org/ja/)  \r\nSPAのためのルータを提供してくれます。  \r\n```sh\r\n$ yarn add vue-router\r\n```\r\n`plugins` ディレクトリに `router.js` を作成します。  \r\nここに、先ほど作成した `Index.vue` と `PostVuetify` を登録することで、対応したパスの時にそのコンポーネントが呼ばれるようになります。\r\n\r\n```js\r\nimport Vue from \'vue\'\r\nimport VueRouter from \'vue-router\'\r\nimport Index from \'../components/Index\'\r\nimport PostVuetify from \'../components/PostVuetify\'\r\nVue.use(VueRouter)\r\nexport default new VueRouter({\r\n  mode: \'history\',\r\n  routes: [\r\n    { path: \'/\', component: Index },\r\n    { path: \'/vuetify\', component: PostVuetify },\r\n  ],\r\n})\r\n```\r\nこの `router.js` を `main.js` に登録します。  \r\n```diff\r\nimport \'@babel/polyfill\'\r\nimport Vue from \'vue\'\r\nimport \'./plugins/vuetify\'\r\nimport Router from \'./plugins/router\'\r\nimport App from \'./App.vue\'\r\nVue.config.productionTip = false\r\nnew Vue({\r\n  router: Router,\r\n  render: h => h(App)\r\n}).$mount(\'#app\')\r\n```\r\n## VueRouter用のリンクに差し替え\r\n### App.vue\r\n`App.vue` をベースにコンポーネントを出し入れするようにします。  \r\nそのために、 [router-view](https://router.vuejs.org/ja/guide/essentials/named-views.html) を使用します。  \r\nこの部分がよしなに差し変わります。\r\n```diff\r\n<v-content>\r\n-  <HelloWorld/>\r\n+  <router-view></router-view>\r\n</v-content>\r\n```\r\nここまで書いて、 `yarn serve` を実行したあと、 `http://localhost:8080` 、 `http://localhost:8080/vuetify` にアクセスすると、画面が変わるかと思います。  \r\nさて、ただまだ画面のボタンから遷移はできないので、設定していきます。  \r\n### Index.vueにrouter-linkを設定する\r\n記事のカードが押されたら、記事詳細に差し代わるようにします。  \r\nその時は [router-link](https://router.vuejs.org/ja/api/#router-link-props)を使用するのですが、Vuetify製のコンポーネントの多くは、 `to` という属性をつけると、 `router-link` として解釈してくれます。  \r\n  \r\nそのため、 `Index.vue` の `v-card` タグに以下のように設定します。\r\n```js\r\n<v-card color=\"grey lighten-5\" to=\"/vuetify\">\r\n```\r\nこれで、カードをクリックすると、記事詳細ページに画面が切り替わると思います。  \r\nついでに、ヘッダーメニューの「Home」も、押されたら一覧に戻るようにします。  \r\nこれもVuetifyのコンポーネントなので `to` が使えます。\r\n下記の差分のように変更するのが良いかと思います。  \r\n[https://github.com/naoki85/my-blogs/commit/51b0156b9e33caf54d66cad79148da42cbda2a73](https://github.com/naoki85/my-blogs/commit/51b0156b9e33caf54d66cad79148da42cbda2a73)\r\n  \r\nここまでで、とりあえず形はできました。  \r\n記事を追加する場合は、\r\n- 新しく `PostVuetify.vue` のようなファイルを作成する。\r\n- `router.js` に登録する。\r\n- `Index.vue` に同じようなカードコンポーネントを登録する。\r\n\r\nただ、 `Index.vue` にあのカードコンポーネントをツラツラ追記していくのは長ったらしいので、少しまとめてみます。\r\n\r\n## Cardコンポーネントを独自コンポーネントに\r\n新しく、Vue.jsに関する記事を書いたとして、 `PostVue.vue` というコンポーネントを作成します。（内容は適当で。）  \r\n`router.js` に登録し、一覧に表示させるようにしますが、Cardコンポーネントはそのままだとかなり長くなってしまうので、新しくラッパーコンポーネントを作成します。  \r\n（ループ文を使えば良いと思いますが、練習ということで。）  \r\n  \r\n新しく、 `src/components/PostCard.vue` を作成します。  \r\nここには、Cardコンポーネントをそのまま移植しますが、親コンポーネントから [props](https://jp.vuejs.org/v2/guide/components-props.html)を使って値を受け取ります。  \r\n（よくあるコンポーネントもこんな感じで作成されていると思います。）  \r\n  \r\n親コンポーネントから指示されたい項目としては、タイトル、公開日、リンクのパス、画像のパスかと思うので、それぞれ `props` に登録します。  \r\n```js \r\n<template>\r\n  <v-flex xs12>\r\n    <v-card color=\"grey lighten-5\" :to=\"to\">\r\n      <v-container fluid grid-list-lg>\r\n        <v-layout row>\r\n          <v-flex xs7>\r\n            <div>\r\n              <div class=\"headline\">{{ title  }}</div>\r\n              <div>{{ date  }}</div>\r\n            </div>\r\n          </v-flex>\r\n          <v-flex xs5>\r\n            <v-card-media\r\n              :src=\"src\"\r\n              height=\"125px\"\r\n              contain\r\n            ></v-card-media>\r\n          </v-flex>\r\n        </v-layout>\r\n      </v-container>\r\n    </v-card>\r\n  </v-flex>\r\n</template>\r\n<script>\r\n  export default {\r\n    props: {\r\n      title: String,\r\n      date: String,\r\n      to: String,\r\n      src: String,\r\n    }\r\n  }\r\n</script>\r\n```\r\nこのコンポーネントを `Index.vue` に取り込みます。  \r\n```js\r\n<script>\r\n  import PostCard from \'./PostCard\'\r\n  export default {\r\n    components: {\r\n      \'v-post-card\': PostCard,\r\n    },\r\n    // ...\r\n  }\r\n</script>\r\n```\r\n`v-post-card` というタグに登録しました。  \r\n`v-card` だった部分を置き換えます。  \r\nその際、 `title` などをタグ内で指定するようにします。  \r\n差分表示だとGithubのリンクの方が見やすいかもしれません。  \r\n[https://github.com/naoki85/my-blogs/commit/f3c531c43c36f1f7882a05229741c58f5191aedd#diff-be1bbdeb1231c484c6590c15778f98c6](https://github.com/naoki85/my-blogs/commit/f3c531c43c36f1f7882a05229741c58f5191aedd#diff-be1bbdeb1231c484c6590c15778f98c6)  \r\nあとは、記事を追加するたびにこのコンポーネントを増やして行けば、通常よりかは短くなるのではないでしょうか。  \r\n  \r\nただ、渡しているデータ以外は同じなので、ループ文も使用します。  \r\n最終的には `Index.vue` は下記のようになっています。\r\n```js\r\n<template>\r\n  <div>\r\n    <v-card>\r\n      <v-container\r\n        fluid\r\n        grid-list-lg\r\n      >\r\n        <v-layout row wrap>\r\n          <v-post-card v-for=\"post in posts\"\r\n            :title=\"post.title\"\r\n            :date=\"post.date\"\r\n            :to=\"post.to\"\r\n            :src=\"post.src\"\r\n          />\r\n        </v-layout>\r\n      </v-container>\r\n    </v-card>\r\n  </div>\r\n</template>\r\n<script>\r\n  import PostCard from \'./PostCard\'\r\n  export default {\r\n    components: {\r\n      \'v-post-card\': PostCard,\r\n    },\r\n    data() {\r\n      return {\r\n        posts: [\r\n          {\r\n            title: \"About Vuetify\",\r\n            date: \"2018-07-10\",\r\n            to: \"/vuetify\",\r\n            src: require(\"@/assets/logo.png\")\r\n          },\r\n          {\r\n            title: \"About Vue.js\",\r\n            date: \"2018-07-12\",\r\n            to: \"/vuejs\",\r\n            src: require(\"@/assets/logo_vue.png\")\r\n          }, \r\n        ]\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n`posts` に各記事の情報を持たせ、それを `post in posts` で取り出しています。  \r\n少しは追加しやすくなったのではないでしょうか。\r\n## さいごに\r\n説明を端折った部分も多いため、分かりづらい部分もあるかと思います。  \r\n今回のコードはこちらにありますので、参考にしていただければと思います。  \r\n[https://github.com/naoki85/my-blogs](https://github.com/naoki85/my-blogs)\r\n今回でとりあえずの形まではできました。  \r\n次回はテストコードを書いて見たいと思います。\r\nもし記事に過不足あれば、フッターリンクのTwitterアカウントにご意見いただければ嬉しいです。  （このブログにコメント機能が実装できていない。。） ','',1,'2018-07-18 00:00:00','2018-07-16 08:16:49','2018-07-17 21:42:50'),(10,1,1,'Vue.js（Vuetify）とFirebaseで簡単なブログを公開してみる その３〜テストコードを書いてみる〜','## はじめに\r\nVue.js と Firebase で簡単なブログを作成してみたので、手順をまとめておきたいと思います。  \r\n全3回を予定しています。  \r\n- [Vue.js のプロジェクトを Firebase にデプロイ](https://bookrecorder.net/posts/8)\r\n- [コンポーネントを使って見た目を作る](https://bookrecorder.net/posts/9)\r\n- コンポーネントのテストコードを書いてみる\r\n\r\nサンプルはこちらになります。  \r\n[https://my-blogs-158b8.firebaseapp.com/](https://my-blogs-158b8.firebaseapp.com/)  \r\nなお、サンプルコードはこちらになります。  \r\n[https://github.com/naoki85/my-blogs](https://github.com/naoki85/my-blogs)\r\n## テストツールのインストール\r\n普段はRSpecやPHPUnitを使ってAPIのテストなんかを書いていますが、恥ずかしながら、JS関連のテストは書いたことはありませんでした。  \r\n事前に調べていたところ、[vue-test-utils](https://vue-test-utils.vuejs.org/ja/) と [Jest](https://jestjs.io/docs/en/getting-started) というテストフレームワークを使おうと決めていましたが、  \r\nなかなか導入がうまくいきませんでした。  \r\n  \r\nどうもVue CLI 3系だと何かしら変わっているのではないかと推測しました。（未確認の情報です。）  \r\n幸いなことに、Vue CLIのドキュメントを眺めていたところ、ユニットテストに関するモジュールの案内があったので、そちらを使用します。  \r\n[Unit Testing | Vue CLI](https://cli.vuejs.org/config/#unit-testing)  \r\n[https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-unit-jest](https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-unit-jest)  \r\n  \r\nテストツールは前置き通り、[vue-test-utils](https://vue-test-utils.vuejs.org/ja/) と [Jest](https://jestjs.io/docs/en/getting-started) です。\r\n```sh\r\n$ vue add @vue/unit-jest\r\n```\r\nこのコマンドを実行後、 いくつかのファイルが書き換わります。\r\n## 初めてのテストを実行してみる\r\n重要な設定は、 `package.json` や新しくできた `jest.config.js` に記載されていますが、詳細は割愛します。  \r\n`jest.config.js` を編集することでテストカバレッジの設定もできるようなので、試してみてください。  \r\n[Configuring Jest](https://jestjs.io/docs/en/configuration)  \r\n  \r\nとにもかくにもテストが実行できるかどうかを確認できた方が良いと思います。  \r\nデフォルトで、 `tests/HelloWorld.spec.js` というファイルができているかと思います。  \r\nこれは `src/components/HelloWorld.vue` 用のテストファイルです。  \r\n  \r\nテストの実行には以下のコマンドを使用します。  \r\n```\r\n$ yarn test:unit\r\n# 実際は vue-cli-service test:unit というコマンドが実行されている\r\n```\r\nコマンドを実行すると、失敗したような感じになるでしょうか？  \r\nVuetify をインストールしている場合、デフォルトのテストはコケるかと思います。  \r\nこれは、Vuetify のインストール時に `src/components/HelloWorld.vue` を書き換えているので、テストと齟齬が生じています。\r\n```\r\nTest Suites: 1 failed, 1 total\r\nTests:       1 failed, 1 total\r\nSnapshots:   0 total\r\nTime:        6.016s\r\n```\r\nこのテストを通るように修正していきます。  \r\n### HelloWorld.spec.js の修正\r\n修正後のファイルは下記のようになります。  \r\nやることとしては、Vuetifyを使用する宣言をします。  \r\nこの方法は下記のドキュメントを参考にしました。  \r\n[localVue | Vue Test Utils](https://vue-test-utils.vuejs.org/ja/api/options.html#localvue)\r\n```js\r\n// mount の他に createLocalVue もインポートする\r\nimport { mount, createLocalVue } from \'@vue/test-utils\'\r\n// Vuetify をインポートする\r\nimport Vuetify from \'vuetify\'\r\nimport HelloWorld from \'@/components/HelloWorld.vue\'\r\ndescribe(\'HelloWorld.vue\', () => {\r\n  it(\'renders props.msg when passed\', () => {\r\n    // Vueインスタンスを別で作成する\r\n    const localVue = createLocalVue()\r\n    // そのVueインスタンスにVuetifyを取り込む\r\n    localVue.use(Vuetify)\r\n    const msg = \'new message\'\r\n    const wrapper = mount(HelloWorld, {\r\n      // マウントするVueインスタンスを指定\r\n      localVue,\r\n      propsData: { msg }\r\n    })\r\n    expect(wrapper.text()).toMatch(msg)\r\n  })\r\n})\r\n```\r\nこれでテストを実行しても、まだ失敗すると思います。  \r\nここで無駄に悩んでしまったのですが、上記のテストは `props.msg` で渡した文字列がちゃんと描画されているのかを確認していますが、  \r\nそもそも `src/components/HelloWorld.vue` では `msg` を表示していませんでした。\r\n### src/components/HelloWorld.vue の修正\r\n`<h1>{{ msg }}</h1>` というタグを適当な場所に追加してください。  \r\n```html\r\n<template>\r\n  <v-container fluid>\r\n    <h1>{{ msg }}</h1>\r\n    <!-- ... -->\r\n```\r\nこれでテストを実行すると、うまく行くはずです。\r\n```\r\nTest Suites: 1 passed, 1 total\r\nTests:       1 passed, 1 total\r\nSnapshots:   0 total\r\nTime:        6.269s\r\n```\r\nここまでの差分は下記になりますので、分かりづらければ参考にしてください。  \r\n[https://github.com/naoki85/my-blogs/commit/f969910ac0c097615b0e0b7224cce4c8b72ff613](https://github.com/naoki85/my-blogs/commit/f969910ac0c097615b0e0b7224cce4c8b72ff613)  \r\n## 記事詳細のテストを作る\r\n記事詳細はほぼHTMLのみのコンポーネントなので、サンプル同様、タイトルだけチェックするくらいで終わりにします。  \r\n`PostVuetify.vue` と `PostVue.vue` は同じような感じなのでテストファイルは一つにまとめて、 `Post.spec.js` とします。  \r\n```js\r\nimport { mount, createLocalVue } from \'@vue/test-utils\'\r\nimport Vuetify from \'vuetify\'\r\nimport PostVuetify from \'@/components/PostVuetify.vue\'\r\nimport PostVue from \'@/components/PostVue.vue\'\r\ndescribe(\'PostVuetify.vue\', () => {\r\n  it(\'renders title\', () => {\r\n    const localVue = createLocalVue()\r\n    localVue.use(Vuetify)\r\n    const wrapper = mount(PostVuetify, {\r\n      localVue\r\n    })\r\n    expect(wrapper.text()).toMatch(\'About Vuetify\')\r\n  })\r\n})\r\ndescribe(\'PostVue.vue\', () => {\r\n  it(\'renders title\', () => {\r\n    const localVue = createLocalVue()\r\n    localVue.use(Vuetify)\r\n    const wrapper = mount(PostVue, {\r\n      localVue\r\n    })\r\n    expect(wrapper.text()).toMatch(\'About Vue.js\')\r\n  })\r\n})\r\n```\r\n## カードコンポーネントのテストを書く\r\n一覧画面のカードコンポーネントのラッパー用に作成した `PostCard.vue` のテストを書きます。  \r\n`props` で渡した値が描画されているかのチェックかと思うので、ちょっとサボってタイトルだけチェックします。  \r\n（本当はDOMを取得して確認した方が良いのかな？）  \r\n  \r\nなお、 `PostCard.vue` は `VueRouter` を使用しています。  \r\n`VueRouter` を使用する場合は注意点があるようなので、下記の通りに実施します。  \r\n[Vue Router と一緒に使用する | Vue Test Utils](https://vue-test-utils.vuejs.org/ja/guides/using-with-vue-router.html)\r\n```js\r\nimport { mount, createLocalVue } from \'@vue/test-utils\'\r\nimport Vuetify from \'vuetify\'\r\nimport VueRouter from \'vue-router\'\r\nimport PostCard from \'@/components/PostCard.vue\'\r\nconst localVue = createLocalVue()\r\nlocalVue.use(Vuetify)\r\nlocalVue.use(VueRouter)\r\nconst router = new VueRouter()\r\ndescribe(\'PostCard.vue\', () => {\r\n  it(\'renders props when passed\', () => {\r\n    const wrapper = mount(PostCard, {\r\n      localVue,\r\n      router,\r\n      propsData: { title: \'About Ruby\', date: \'2018-07-14\', to: \'/ruby\', src: \'/img/logo.png\' }\r\n    })\r\n    expect(wrapper.text()).toMatch(\'About Ruby\')\r\n  })\r\n})\r\n```\r\n## 一覧画面のテストを書く\r\n一覧画面のテストですが、 `PostCard.vue` は別でテストしているので、ここはスタブを返すようにします。  \r\n[スタブを使用する | Vue Test Utils](https://vue-test-utils.vuejs.org/ja/guides/#%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%8B%95%E4%BD%9C%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88)  \r\n  \r\nただ、上記をスタブにすると、描画関係で確認することがないような気がするので、Vueインスタンスが持つプロパティの確認をします。\r\n```js\r\nimport { mount, createLocalVue } from \'@vue/test-utils\'\r\nimport Vuetify from \'vuetify\'\r\nimport VueRouter from \'vue-router\'\r\nimport Index from \'@/components/Index.vue\'\r\nconst localVue = createLocalVue()\r\nlocalVue.use(Vuetify)\r\nlocalVue.use(VueRouter)\r\nconst router = new VueRouter()\r\nconst wrapper = mount(Index, {\r\n  localVue,\r\n  router,\r\n  stubs: [\'v-post-card\']\r\n})\r\ndescribe(\'Index.vue\', () => {\r\n  it(\'count data.posts\', () => {\r\n    expect(wrapper.vm.$data.posts.length).toBe(2)\r\n  })\r\n})\r\n```\r\nとりあえずこのくらい書いて、全部テストが通ることを確認します。  \r\nちなみに、それぞれのファイルだけテストを実行したい場合は、引数でファイル名を与えます。\r\n```sh\r\n$ yarn test:unit tests/unit/Index.spec.js\r\n```\r\n## さいごに\r\n簡単ではありますが、テストコードを書いてみました。  \r\n説明を端折った部分も多いため、分かりづらい部分もあるかと思います。  \r\n今回のコードはこちらにありますので、参考にしていただければと思います。  \r\n[https://github.com/naoki85/my-blogs](https://github.com/naoki85/my-blogs)  \r\n  \r\nもし記事に過不足あれば、フッターリンクのTwitterアカウントにご意見いただければ嬉しいです。  （このブログにコメント機能が実装できていない。。）','',1,'2018-07-20 00:00:00','2018-07-16 19:16:09','2018-07-16 19:17:16'),(11,1,1,'テストコードで「Cannot read property \'$options\' of undefined」が出た','## はじめに\r\n以前、[Vue.jsでテストコードを書いてみた記事](https://blog.bookrecorder.net/posts/10)を書いてから、少しずつテストコードを書き始めてます。  \r\n  \r\n今回はとあるエラーが出た紹介ですが、結論から言うと、イシューを読んで解決しました。  \r\n[Calling setData raises \'Cannot read property \'$options\' of undefined\'](https://github.com/vuejs/vue-test-utils/issues/653) \r\n\r\n## 発生したテストコード\r\nコンポーネントが持つ `data` のプロパティを確認するテストコードです。  \r\n下記のような感じです。  \r\n\r\n```js\r\nexpect(wrapper.vm.dataProperty).toBe(\'hogehoge\')\r\n```\r\nこのテストを実行したところ、下記のようなエラーが出ました。\r\n\r\n```js\r\nCannot read property \'$options\' of undefined\r\n```\r\nVueインスタンスにうまくアクセスできていないことはなんとなく分かりましたが、  \r\nそのあとのアクションが推測できませんでした。\r\n\r\n## イシューを読んで\r\n[Calling setData raises \'Cannot read property \'$options\' of undefined\'](https://github.com/vuejs/vue-test-utils/issues/653)  \r\n  \r\nVueインスタンスの更新がうまく言っていないようなので、テスト用のVueインスタンス作成時に下記のようにすれば良いようです。\r\n\r\n```js\r\nconst wrapper = mount(Component, {\r\n    sync: false\r\n})\r\n```\r\n\r\n## さいごに\r\nJSのテストって何を書くのが一般的なんですかね？  \r\nとりあえずはできるところから進めて行こうと思います。\r\n','',1,'2018-07-23 00:00:00','2018-07-21 22:57:10','2018-07-21 22:57:10'),(12,1,0,'Vue.js を Nginx で公開する','とはいっても、難しくはありません。  \r\nVue.jsをビルドした後、おそらく `dist/index.html` が作成されるので、これを指定します。\r\n\r\n```sh\r\nserver {\r\n    server_name  sample.net;\r\n    index  index.html;\r\n    root  /path/to/dist;\r\n}\r\n```\r\n## Nginx でリダイレクトさせる\r\nメモになりますが、ドメインの変更などにより、新URLへリダイレクトさせたい場合です。  \r\n[Converting rewrite rules](http://nginx.org/en/docs/http/converting_rewrite_rules.html)  \r\n  \r\nこちらの記事が参考になりました。  \r\n[nginxのrewriteを使ったリダイレクト](https://www.skyarch.net/blog/?p=7088)\r\n\r\n```sh\r\n# 特定のドメインへリダイレクト\r\nrewrite ^(.*)$ https://new_domain.net$1 permanent;\r\n# 特定のディレクトリ以下の場合\r\nrewrite ^/path(.*)$ https://new_domain.net/path$1 permanent;\r\n```\r\n`rewrite` ではリダイレクトの方法を指定できます。  \r\n上記の `permanent` の場合は、HTTPステータス301でリダイレクトさせます。  \r\n`redirect` の場合は、HTTPステータス302になります。一時的な移動の時に使用できそうです。\r\n','',1,'2018-07-25 00:00:00','2018-07-22 22:26:19','2018-07-22 22:26:19'),(13,1,3,'AWS CodeBuild を使ってみた','## はじめに\r\n以前から気になっていた、AWS の 開発者向けサービスである [CodeBuild](https://aws.amazon.com/jp/codebuild/) を使用してみました。  \r\nCodeBuild は、例えば Vue.js であれば、本番用にビルドして S3 などに配置してくれるサービスです。  \r\n簡単に使ってみたことをまとめたいと思います。  \r\nなお、サンプルには Vue.js を使用しています。\r\n\r\n## 料金は？\r\n[AWS CodeBuild 料金](https://aws.amazon.com/jp/codebuild/pricing/)  \r\n100ビルドまでは無料なようです。  \r\n個人で使う分には問題なさそうです。\r\n\r\n## プロジェクトを作成する\r\nAWS コンソールから CodeBuild を選択し、プロジェクトを作成します。  \r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/sample_4.png\" width=\"300px\">\r\n\r\n### プロジェクト名\r\n任意のプロジェクト名をつけます。\r\n\r\n### ソースビルド\r\nGithub や CodeCommit なども選択できます。  \r\n例えば Github を選択し、 AWS との連携を許可すると、対象のリポジトリを選ぶことができます。  \r\nそれでもとのコードをフェッチしてくれるので楽です。\r\n\r\n### ビルド方法\r\nビルド方法はテンプレートイメージの他に、Dockerイメージの指定もできます。  \r\n今回はテンプレートイメージの Node を選択します。  \r\n他にも Java などがありました。  \r\nその他はそのままで良いかと思います。  \r\n  \r\nなお、この後作成する `buildspec.yml` でビルドの方法を定義します。\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/sample_5.png\" width=\"300px\">\r\n\r\n### アーティファクト\r\nビルド後の結果を配置する場所を指定します。  \r\n今回は S3 を選択しました。  \r\nS3 のバケットを作成して、そこを指定しておきます。\r\n\r\n### サービスロール\r\nIAMロールの設定ができますが、今回は初めてなので、「アカウントでロールを設定」し、適当な名前をつけました。\r\n\r\n他にも色々設定もできますが、今回はこれで設定します。\r\n\r\n## buildspec.yml を作成する\r\nプロジェクトのトップ階層に、 `buildspec.yml` を配置します。  \r\n下記のように作成しました。  \r\n`node` や `yarn` は Node イメージを使用すればデフォルトで使用できます。  \r\n[ビルドスペックの構文](https://docs.aws.amazon.com/ja_jp/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-syntax)\r\n\r\n```yml\r\nversion: 0.2\r\n\r\nphases:\r\n  install:\r\n    commands:\r\n      - node -v && npm -v\r\n      - npm install -g yarn && yarn --version\r\n  pre_build:\r\n    commands:\r\n      - yarn install\r\n  build:\r\n    commands:\r\n      - yarn test\r\n      - yarn build\r\nartifacts:\r\n  files:\r\n    - dist/**/*\r\n```\r\n\r\n### phases\r\n各フェーズでのコマンドを定義します。\r\n\r\n- install: ビルド環境のパッケージのインストール\r\n- pre_build: ビルド前に実行するコマンド\r\n- build: ビルド\r\n\r\n### artifacts\r\n出力結果のパスを指定します。  \r\nVue.js の場合は `dist` ディレクトリ以下に生成されるので、その配下を全て指定します。\r\n\r\n## ビルドしてみる\r\nコンソールから実行してみます。  \r\n`aws` コマンドを使用して実行することも可能です。  \r\n実行後、 S3 に生成物が配置されていれば成功かと思います。\r\n\r\n## さいごに\r\nこれだけではビルドして終了なので使えませんが、他のAWSの開発者向けサービスと組み合わせることで自動化できそうです。  \r\n次は Code Deploy を試してみたいと思います。\r\n','',1,'2018-07-27 00:00:00','2018-07-26 07:59:31','2018-07-26 07:59:32'),(14,1,2,'Capistrano を使って Vue.js をデプロイしてみた','## はじめに\r\nVue.js を EC2 インスタンスにデプロイするために Capistrano を使用したのでそのメモです。  \r\n最近は Node モジュールを yarn で管理しているので、 yarn を使用します。\r\n\r\n## 環境\r\n\r\n### ローカル環境\r\n\r\n- Ruby 2.5.1\r\n- Bundler 1.16.3\r\n\r\n### EC2 インスタンス\r\n\r\n- Ruby 2.5.1\r\n- Bundler 1.16.3\r\n- Node.js 10.7.0\r\n- npm 6.1.0\r\n- yarn 1.9.2\r\n\r\n## Gemfileの作成\r\nローカル環境に Capistrano をインストールするためにプロジェクトのルートディレクトリに `Gemfile` を作成します。  \r\n`bundle init` すればテンプレを作成してくれます。  \r\n`gem \"capistrano\", require: false` を追記します。\r\n\r\n```rb\r\n# frozen_string_literal: true\r\n\r\nsource \"https://rubygems.org\"\r\n\r\ngit_source(:github) {|repo_name| \"https://github.com/#{repo_name}\" }\r\n\r\ngem \"capistrano\", require: false\r\n```\r\n`bundle install` でインストールします。\r\n\r\n```sh\r\n$ bundle install\r\n```\r\n\r\n## 初期ファイルの作成\r\n\r\n```sh\r\n$ bundle exec cap install\r\nmkdir -p config/deploy\r\ncreate config/deploy.rb\r\ncreate config/deploy/staging.rb\r\ncreate config/deploy/production.rb\r\nmkdir -p lib/capistrano/tasks\r\ncreate Capfile\r\nCapified\r\n```\r\n\r\n## deploy.rb の設定\r\n[Capistrano ドキュメント](https://capistranorb.com/)  \r\nデプロイに関する設定を記載します。  \r\n最低限、下記を記載しておけば大丈夫そうです。\r\n\r\n```\r\n# アプリケーション名\r\nset :application, \"vue_bookrecorder\"\r\n# リポジトリURL\r\nset :repo_url, \"git@example.com:me/my_repo.git\"\r\n# デプロイ先サーバーのディレクトリ\r\nset :deploy_to, \"/var/www/my_app_name\"\r\n```\r\n\r\n## config/production.rb の設定\r\n環境ごとの設定値を記載します。  \r\nインスタンスにSSHする際にパスワードや暗号鍵が必要であればここで指定します。\r\n\r\n## 配置してみる\r\n下記コマンドで実行します。  \r\nファイルがインスタンスに配置されていれば成功です。\r\n\r\n```sh\r\n$ bundle exec cap production deploy\r\n```\r\n\r\n## yarn を使ってみる\r\n`yarn` を使う場合は、下記の Capistrano 用の Gem をインストールします。  \r\n[https://github.com/j-arnaiz/capistrano-yarn](https://github.com/j-arnaiz/capistrano-yarn)  \r\n  \r\n`Gemfile` に下記を記載して `bundle install` します。  \r\n\r\n```rb\r\ngem \'capistrano-yarn\'\r\n```\r\nこれでデプロイ時に `yarn install` を実行してくれるようになります。  \r\nあまり良くないですが、サーバーに配置した後、ビルドまで実行しようと思うので、下記のように `yarn install` の後に `yarn build` を実行するよう設定します。  \r\n`deploy.rb` に追記します。\r\n\r\n```rb\r\nnamespace :yarn do\r\n  task :build do\r\n    on roles(:app) do\r\n      within fetch(:yarn_target_path, release_path) do\r\n        execute :yarn, \"build\"\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nafter \"yarn:install\", \"yarn:build\"\r\n```\r\nこれで実行して、ビルドまで実行されていれば成功です。','',1,'2018-07-30 00:00:00','2018-07-28 20:11:06','2018-07-28 20:11:06'),(15,1,4,'PHP7 の型指定を試してみた','## はじめに\r\nPHPの関数で、引数と戻り値の型指定を試してみました。  \r\n\r\n## ドキュメント\r\n- [PHP: 関数の引数](http://php.net/manual/ja/functions.arguments.php)  \r\n- [PHP: 返り値](http://php.net/manual/ja/functions.returning-values.php)\r\n\r\n## 引数を試す\r\n\r\n```php\r\nfunction myNumber(int $number) {\r\n    echo $number;\r\n    return $number;\r\n}\r\n```\r\n\r\n```sh\r\nphp > echo myNumber(1);\r\n11\r\nphp > echo myNumber(\'hogehoge\');\r\nPHP Warning:  Uncaught TypeError: Argument 1 passed to myNumber() must be of the type integer, string given, called in php shell code on line 1 and defined in php shell code:1\r\nStack trace:\r\n#0 php shell code(1): myNumber1(\'hogehoge\')\r\n#1 {main}\r\n  thrown in php shell code on line 1\r\n```\r\nエラーが出ましたね。\r\n\r\n## 返却値を試す\r\n\r\n```php\r\nfunction myNumber(int $number): Int {\r\n    var_dump($number);\r\n    // 1 だったら String を返す\r\n    return ($number === 1) ? \'return\' : $number;\r\n}\r\n```\r\n\r\n```sh\r\nphp > echo myNumber(100);\r\nint(100)\r\n100\r\nphp > echo myNumber(1);\r\nint(1)\r\nPHP Warning:  Uncaught TypeError: Return value of myNumber() must be of the type integer, string returned in php shell code:5\r\nStack trace:\r\n#0 php shell code(1): myNumber3(1)\r\n#1 {main}\r\n  thrown in php shell code on line 5\r\n```\r\nこちらも `String` を返そうとするとエラーになりますね。  \r\nただ、 `return` のタイミングで評価されているので `var_dump` は実行されています。\r\n\r\n## さいごに\r\nこの機能は積極的に使っていこうかなと思います。  \r\nただ既存のアプリケーションをリファクタするにはかなり勇気がいりますね（笑）\r\n','',1,'2018-08-01 00:00:00','2018-08-01 07:31:23','2018-08-01 07:31:23'),(16,1,2,'Node のバージョンを10にしたら Webpack でビルドできなくなった（@rails/webpacker）','## 事象\r\n- Rails に Webpacker を使って Vue.js を導入していた（本サイトのこと）。\r\n- 先日、とある理由でサーバーの Node.js のバージョンを 10 にした。\r\n- 久しぶりにコードを修正したので、 Capistrano でデプロイしようとした。\r\n- webpack でビルドする際に失敗した。\r\n- エラーメッセージは `error upath@1.0.4: The engine \"node\" is incompatible with this module. Expected version \">=4 <=9\".` だった。\r\n- Rails の webpacker のバージョンは 3.4 だった。\r\n\r\n## 対応\r\nとりあえずググったら、記事にまとめてくれた方がいらっしゃっいました。  \r\n[[解決方法] upath@1.0.4: The engine \"node\" is incompatible with this module. Expected version \">=4 <=9\".](https://qiita.com/DQNEO/items/372f20b17af8af8c4d11)  \r\nどうやら Webpack が Node.js 4〜9 のバージョンを想定しているよう。  \r\n  \r\n普通に webpack を使用している場合は、 yarn でインストールする際に `--ignore-engines` オプションをつければ良いようです。  \r\n  \r\nただ、今回は Rails の webpacker を使用しており、そちらをアップデートすれば良さそうです。  \r\n[Incomplete webpacker installation with Node 10.0.0](https://github.com/rails/webpacker/issues/1456)  \r\n  \r\n### Gemfile\r\n\r\n```sh\r\n$ bundle update webpacker\r\n# 3.5 以上にする\r\n```\r\n\r\n### package.json\r\n\r\n```sh\r\n$ yarn update @rails/webpacker\r\n# 3.5 以上にする\r\n```\r\n\r\n## さいごに\r\n正直、安易に Node.js のバージョンを上げてしまったなと反省しました。  \r\nNode.js のバージョンをあげる場合は参考にしてください。','',1,'2018-08-03 00:00:00','2018-08-03 23:10:12','2018-08-03 23:10:12'),(17,1,2,'RSSフィードを作成する','## はじめに\r\n本ブログですが、そういえばRSSフィードを作成していませんでした。  \r\n調べてみると、下記記事のように簡単に実装できそうだったので、作成してみました。  \r\n[Build a RSS feed in Ruby on Rails](https://www.lugolabs.com/articles/build-a-rss-feed-in-ruby-on-rails)\r\n\r\n## routes.rb\r\n\r\n```rb\r\nRails.application.routes.draw do\r\n    # ...\r\n    get :feed, to: \'rss#index\', defaults: { format: :rss }\r\nend\r\n```\r\nフォーマットは `rss` 指定にしておきます。  \r\nこれで `/feed` でアクセスできるようにしておきます。\r\n\r\n## rss_controller.rb\r\n\r\n```rb\r\nclass RssController < ApplicationController\r\n    layout false\r\n\r\n    def index\r\n        @posts = Post.order(\'id DESC\').limit(10)\r\n    end\r\nend\r\n```\r\nフォーマット指定してるし、ビューファイル指定は大丈夫かな。。？\r\n\r\n## index.rss.builder\r\n`builder` でも作成できるんですね。  \r\n下記のような感じでどうでしょう？  \r\n\r\n```rb\r\nxml.instruct! :xml, :version => \"1.0\"\r\nxml.rss :version => \"2.0\" do\r\n    xml.channel do\r\n        xml.title \"Your Site Title\"\r\n        xml.description \"Your Site Description\"\r\n        xml.link root_url\r\n        xml.pubDate Time.zone.now.rfc822\r\n        xml.language \"ja-ja\"\r\n        xml.ttl \"40\"\r\n\r\n        @posts.each do |post|\r\n            xml.item do\r\n            xml.title post.title\r\n            xml.description post.description\r\n            xml.pubDate post.updated_at.to_s(:rfc822)\r\n            xml.guid post_url(post.id)\r\n            xml.link post_url(post.id)\r\n        end\r\n      end\r\n    end\r\nend\r\n```\r\n\r\n## layouts/default.html.erb\r\n[auto_discovery_link_tag](http://railsdoc.com/references/auto_discovery_link_tag) なるものがあったんですね。。  \r\nこれを追記しておけば、 rss の link タグを生成してくれます。\r\n\r\n```rb\r\n<%= auto_discovery_link_tag :rss, feed_url(:format => :rss) %>\r\n```\r\n\r\n## さいごに\r\nまだ画像だったりがうまく表示で聞いていないようですが、とりあえずはRSSリーダーで表示できるようになったかと思います。  \r\nもしよろしければ追加をお願いします！','',1,'2018-08-06 00:00:00','2018-08-04 20:02:55','2018-08-04 20:02:56'),(18,1,2,'各ユーザーの最新の記事10件を1本のSQLで取得する','## はじめに\r\n例えば各ユーザーの投稿記事のそれぞれ10件ずつを取得するケースを想像します。  \r\n複数回SQLを発行すれば簡単ですが、1回で取得できないものかと考えてみました。\r\n\r\n## 別々に取得\r\n`User` と `Post` があるとして、\r\n\r\n```rb\r\nusers = User.all\r\nposts = []\r\nusers.eacch do |user|\r\n  posts_by_user = Post.where(user_id: user.id).order(\'created_at DESC\').limit(10)\r\n  posts = posts.concat(posts_by_user)\r\nend\r\n```\r\n\r\n## UNION SELECT を使う\r\n[UNION 構文 | MySQL](https://dev.mysql.com/doc/refman/5.6/ja/union.html)  \r\nUNION SELECT を使って SQL を結合させてみました。  \r\n最後は [find_by_sql](http://railsdoc.com/references/find_by_sql) を使って発行します。\r\n\r\n```rb\r\nusers = User.all\r\narr_sql = []\r\nusers.each do |user|\r\n  tmp_sql = Post.where(user_id: user.id).order(\'created_at DESC\').limit(10).to_sql\r\n  arr_sql = arr_sql.concat(tmp_sql)\r\nend\r\nsql = arr_sql.join(\') UNION ALL (\').insert(0, \'(\').insert(-1, \')\')\r\nself.find_by_sql(sql)\r\n```\r\n\r\n発行されるSQLは下記のようなイメージです。  \r\n\r\n```sql\r\nSELECT * FROM posts WHERE user_id = 1 ORDER BY created_at DESC limit 10\r\nUNION SELECT * FROM posts WHERE user_id = 2 ORDER BY created_at DESC limit 10\r\nUNION SELECT * FROM posts WHERE user_id = 3 ORDER BY created_at DESC limit 10\r\n...\r\n```\r\nこれで同等の結果が得られると思います。\r\n\r\n## さいごに\r\n他にも良い方法はあるんですかね？  \r\nもしよろしければ教えていただけますと嬉しいです。','',1,'2018-08-08 00:00:00','2018-08-08 08:14:16','2018-08-08 08:14:17'),(19,1,2,'オブジェクト指向設計実践ガイドを読みました','[オブジェクト指向設計実践ガイド](http://amzn.asia/a1D9agY)を読みました。  \r\n1年前に購入して1度読んではいるのですが、再度読んでも得られるものは多いです。  \r\nハンズオンな本ではないので、忘れないように自分が印象に残ったことをメモしておきます。  \r\n評価の高い本ですので、Rubyを勉強している方はぜひ一読することをお勧めします。  \r\n\r\n- オブジェクトのクラスではなく、メッセージを気にする\r\n- シーケンス図を書くと分かりやすくなる\r\n- 継承だけでなく、コンポジションも選択肢に入れる\r\n- テストは極力パブリックメッセージのみにする\r\n- 他のオブジェクトに依存するなら、そのメッセージのテストを書く\r\n\r\n他にも多々参考になる点がありました。  \r\n今後も折を見て読む本になりそうです。','',1,'2018-08-10 00:00:00','2018-08-10 23:34:11','2018-08-10 23:34:11'),(20,1,2,'dev.to をローカルで動かす','dev.to がオープンソースになったみたいですね。  \r\n[dev.to is now open source](https://dev.to/ben/devto-is-now-open-source-5n1)  \r\nせっかくなのでローカルで動かしてみました。  \r\n基本的にはドキュメント通りに進めればできます。  \r\n[https://github.com/thepracticaldev/dev.to](https://github.com/thepracticaldev/dev.to)\r\n\r\n## 環境構築\r\nMac環境で実施しています。\r\n\r\n### Ruby のバージョンを 2.5.1 にする\r\n私は `rbenv` を使用しているので、下記の記事が参考になりました。  \r\n[rbenv を利用した Ruby 環境の構築](https://dev.classmethod.jp/server-side/language/build-ruby-environment-by-rbenv/)\r\n\r\n### 各種 Gem のインストール\r\n\r\n```sh\r\n$ gem install bundler\r\n$ gem install foreman\r\n```\r\n\r\n### yarn のインストール\r\nnode のパッケージマネージャーは `yarn` を使用しているようです。  \r\nMac であれば、 `brew` でインストールするのが良いかと思います。\r\n\r\n```sh\r\n$ brew install yarn\r\n```\r\n\r\n### PostgreSQL のインストール、起動\r\nデフォルトのDBは PostgreSQL なので、インストール、起動させます。  \r\n[MacにPostgreSQLをインストール](https://qiita.com/_daisuke/items/13996621cf51f835494b)\r\n\r\n## dev.to 関連のインストール\r\n### クローンする\r\n\r\n```sh\r\n$ git clone git@github.com:thepracticaldev/dev.to.git\r\n```\r\n\r\n### 必要な Gem のインストール\r\n\r\n```sh\r\n$ bundle install\r\n```\r\n\r\n### node パッケーシのインストール\r\n\r\n```sh\r\n$ bin/yarn\r\n```\r\n\r\n### 環境変数の設定\r\n- `Envfile` に各変数の求められているオブジェクトやデフォルト値が記載されている。\r\n- `sample.application.yml` をコピーして `application.yml` を作成する。\r\n- Github や Twitter などの APIキーを登録して使用できるが、適当な値でも良い。\r\n- ただし、 Algolia だけは必須パラメータなのでデベロッパー登録しておく。\r\n- このドキュメントを見れば登録はできる。[https://docs.dev.to/get-api-keys-dev-env/](https://docs.dev.to/get-api-keys-dev-env/)\r\n- 登録に15分くらいかかるっぽい？\r\n\r\nAlgolia は使ったことがありませんでしたが、サイト内検索を良い感じにしてくれるやつっぽいですね。  \r\n[Algoliaを利用してサイト内検索機能を実装する](https://blog.leko.jp/post/implement-site-search-with-algolia/)  \r\n\r\n### database.yml の修正\r\n\r\n`development` 環境の `username` と `host` がコメントアウトされているので、こちらを修正します。  \r\nMac で PostgreSQL を動かしていれば、デフォルトで `$USER` の値が登録されているはずです。\r\n\r\n```yml\r\n  username: YOUR_USERNAME\r\n  host: localhost\r\n```\r\n\r\n### セットアップする\r\n下記コマンドでセットアップします。  \r\n設定が不十分だとエラーメッセージが出るので、逐次確認します。\r\n\r\n```sh\r\n$ bin/setup\r\n```\r\n\r\n## 起動する\r\n下記のコマンドで起動します。  \r\nバックグラウンドジョブも一緒に起動されます。\r\n\r\n```sh\r\n$ bin/startup\r\n```\r\n`http://localhost:3000` にアクセスして表示されていれば完了です。  \r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/dev_to_sample.png\" width=\"300px\">\r\n','',1,'2018-08-13 00:00:00','2018-08-11 22:02:56','2018-08-11 22:02:56'),(21,1,1,'【動画紹介】Vue.jsで計算機をつくる','## 動画紹介\r\nたまたま YouTube を見ていたら見つけました。  \r\nVue.js で Mac の計算機のようなものを作成するチュートリアルです。  \r\n英語なことと、各シンタックスに関する詳細な説明は出てこないので、ある程度基本ができた方はやって見ても良いのではないでしょうか？  \r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/m1_ih43p24s\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\r\n\r\n以下、個人的に気になったメモです。  \r\n\r\n## CSS の Grid Layout が便利そう\r\n対応ブラウザに懸念がありますが、 Grid Layout は便利そうだと感じました。  \r\n動画内で使用されていましたが、私はよく分かってなかったため、下記の記事を参考にさせていただきながら確認しました。  \r\n[CSS Grid Layout を極める！（基礎編）](https://qiita.com/kura07/items/e633b35e33e43240d363)\r\n\r\n## バッククォートで囲うと String で解釈される\r\nECMA Script 6 から使えるようです。  \r\n計算した結果の値を String で使用したい場合に使えそう。  \r\n[JavaScript の テンプレートリテラル を極める！](https://qiita.com/kura07/items/c9fa858870ad56dfec12)\r\n\r\n```js\r\nvar hoge = 6;\r\nconsole.log(hoge); // 6\r\nconsole.log(`${hoge}`); // \"6\"\r\n```','',1,'2018-08-23 00:00:00','2018-08-15 21:58:50','2018-09-05 07:52:55'),(22,1,1,'Vue.js に関して LT してきた','仲間内の勉強会にて、 Vue.js に関する発表をしてきました。  \r\n個人的に思うところを書いただけなので、かなりふわっとしていますが、見ていただけると嬉しいです。  \r\n資料は SpeakerDeck にアップしています。\r\n\r\n[https://speakerdeck.com/naoki85/vue-dot-js-falseda-inaruli](https://speakerdeck.com/naoki85/vue-dot-js-falseda-inaruli)  \r\nSpeakerDeck の埋め込みコードがうまく活きないな。。  \r\nここら辺はこのサイトを修正しないとダメですね。。','',1,'2018-08-20 00:00:00','2018-08-19 22:04:51','2018-08-22 07:38:33'),(23,1,2,'yield の復習をする','## はじめに\r\n昔書いたコードを見ていたら、下記のようなコードがありました。  \r\nちょっと例がよく分からないかもしれませんが、\r\n\r\n- 果物ごとの数を取得\r\n- なんかごちょごちょやる\r\n- 果物の数が 3 未満の場合は発注リストに加える\r\n- なんかごちょごちょやる\r\n- 果物の数が 4 以上であれば安売りリストに加える\r\n\r\n```rb\r\ndef get_count_group_by_fruits(params)\r\n  # params を加工して Hash を返している\r\n  { \'apple\' => 3, \'banana\' => 2, ... }\r\nend\r\n\r\ncount_group_by_fruits = get_count_group_by_fruits(params)\r\n\r\ncount_group_by_fruits.each do |fruit, count|\r\n  # ... なんかごちょごちょやる\r\n  #\r\n\r\n  # count が3未満だったら注文リストに加える\r\n  if count < 3\r\n    @order_list[fruit] += 1\r\n  end\r\nend\r\n\r\n# ...\r\ncount_group_by_fruits.each do |fruit, count|\r\n  # ... なんかごちょごちょやる\r\n  #\r\n\r\n  # count が4以上だったら安売りリストに加える\r\n  if count > 3\r\n    @discount_list[fruit] += 1\r\n  end\r\nend\r\n```\r\n「なんかごちょごちょやってる」部分は同じような処理でした。  \r\nそのため、メソッドにまとめてブロックで渡せば良いかなと考えました。  \r\nそういえば `yield` はちゃんとまとめたことがなかったので、この機会に復習しようと思います。\r\n\r\n## 試してみる\r\nドキュメントはこちら。  \r\n[https://docs.ruby-lang.org/ja/latest/doc/spec=2fcall.html#yield](https://docs.ruby-lang.org/ja/latest/doc/spec=2fcall.html#yield)  \r\n\r\n### 基本\r\nこのようなメソッドを定義していたとして、\r\n\r\n```rb\r\ndef hello\r\n  yield\r\nend\r\n```\r\n\r\nこのメソッドを呼ぶときに、ブロックを渡すとその処理が実行されます。\r\n\r\n```rb\r\nhello do\r\n  puts \'hello\'\r\nend\r\n=> hello\r\n```\r\n### ブロック引数を持たせる\r\n\r\n```rb\r\nhello do |word|\r\n  puts word\r\nend\r\n```\r\n先ほどの `hello` メソッド側で、引数を持たせます。\r\n\r\n```rb\r\ndef hello\r\n  yield \'hello\'\r\nend\r\n```\r\n\r\n### ブロックが渡されているかどうか\r\n[block_given?](https://docs.ruby-lang.org/ja/latest/method/Kernel/m/block_given=3f.html) を使用することで、メソッドにブロックが渡されているか判断できるので、  \r\nこれを使用してデフォルトの挙動なんかを定義できます。\r\n\r\n```rb\r\ndef hello\r\n  if block_given?\r\n    yield \'hello\'\r\n  else\r\n    puts \'default\'\r\n  end\r\nend\r\n```\r\n\r\n## 例を書き換えてみる\r\n他にも様々な使い方ができると思いますが、ここまでの内容で、下記のように修正して見ました。\r\n\r\n```rb\r\ndef get_count_group_by_fruits(params)\r\n  # params を加工して Hash を返している\r\n  params = { \'apple\' => 3, \'banana\' => 2, ... }\r\n\r\n  # ... なんかごちょごちょやる\r\n  #\r\n  if block_given?\r\n    params.each do |fruit, count|\r\n      yield fruit, count\r\n    end\r\n  end\r\n  params\r\nend\r\n\r\n# ...\r\ncount_group_by_fruits(params) do |fruit, count|\r\n  # count が3未満だったら注文リストに加える\r\n  if count < 3\r\n    @order_list[fruit] += 1\r\n  end\r\nend\r\n\r\n# ...\r\ncount_group_by_fruits.each do |fruit, count|\r\n  # count が4以上だったら安売りリストに加える\r\n  if count > 3\r\n    @discount_list[fruit] += 1\r\n  end\r\nend\r\n```\r\nなんか行数的にはそんなに変わってない気がしますが、「なんかごちょごちょやる」部分をまとめることができたので、複製はしやすいかもしれません。  \r\nブロックで渡す方法は便利なので、使いこなせると良さそうです。','',1,'2018-08-27 00:00:00','2018-08-27 07:57:20','2018-08-27 07:57:20'),(24,1,5,'Kotlin の forEach、JavaScript の forEach','## はじめに\r\n特に Kotlin と JavaScript を比較するわけではありませんが、  \r\nKotlin の勉強をしていて、 forEach が JavaScript の文法に似ていたので、復習がてらそれぞれをまとめたいと思います。\r\n\r\n## Kotlin\r\n[https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/for-each.html#foreach](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/for-each.html#foreach)  \r\n\r\n```java\r\nval list = listOf(\"Yui\", \"Mio\", \"Ritsu\", \"Tsumugi\", \"Azusa\")\r\nlist.forEach{ name -> \r\n    print(\"${name}\\n\")\r\n}\r\n\r\nYui\r\nMio\r\nRitsu\r\nTsumugi\r\nAzusa\r\n```\r\nList 要素をそれぞれ取り出して、それに対して何かしらの処理を実行します。\r\n\r\n## JavaScript\r\n[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)  \r\n\r\n```js\r\nconst list = [\"Yui\", \"Mio\", \"Ritsu\", \"Tsumugi\", \"Azusa\"];\r\nlist.forEach(function(name) {\r\n    console.log(name);\r\n});\r\n\r\nYui\r\nMio\r\nRitsu\r\nTsumugi\r\nAzusa\r\n```\r\nドキュメントを見ると、ES-5.1 から定義されたんですかね？  \r\n以前だと、 `for` を利用して書いていたところです。  \r\n\r\n```js\r\nconst list = [\"Yui\", \"Mio\", \"Ritsu\", \"Tsumugi\", \"Azusa\"];\r\nfor (let i=0; i<list.length; i++) {\r\n  console.log(list[i]);\r\n}\r\n```\r\n## おわりに\r\nKotlin はこれから少しずつ記事にまとめながら勉強していきたいと思います。  \r\nまた、JSの `forEach` はまだ使う発想が私に定着していないので意識的に使うようにしよう。','',1,'2018-08-30 00:00:00','2018-08-30 07:45:38','2018-08-30 07:45:38'),(25,1,0,'「22年目の告白 ―私が殺人犯です―」を読みました','昨年映画になった作品の小説版です。  \r\n見たいと思っていてすっかり忘れていたのですが、たまたま古本屋で見つけたので購入しました。  \r\nあらすじなどは公式サイトをご覧ください。  \r\n[映画『22年目の告白 ―私が殺人犯です―』](http://wwws.warnerbros.co.jp/22-kokuhaku/)  \r\n[２２年目の告白－私が殺人犯です－ | 講談社BOOK倶楽部](http://bookclub.kodansha.co.jp/product?item=0000212619)  \r\n\r\n予想と違う展開でしたが、とても楽しんで読めました。  \r\nまだ映画は見ていないので、映画も見たいと思わせてくれます。  \r\n  \r\n最近は技術書ばかり読んでいたので、こういった小説を読んで、良い気分転換ができたと思います。  \r\n脳も普段使っていない部分を刺激してあげると良さそうですかね。  \r\n頭がスッキリした感じがします。  \r\n  \r\n久しぶりに私の中に小説ブームが到来しかけているので、次の本を探してみたいと思います。  \r\nまた、本作の映画も見たいと思います。  \r\n  \r\nとてもざっくりした記事ですが、書籍紹介ということで今回はこの辺で。','',1,'2018-09-05 00:00:00','2018-09-05 07:51:54','2018-09-05 07:51:55'),(26,1,0,'3ヶ月ジムに通ったけど体重が増えたから反省する','## 要約\r\n\r\n正直、\r\n\r\n- 足のトレーニングが足りない\r\n- そもそもトレーニング量が足りない\r\n\r\nです。\r\n\r\n## はじめに\r\nプログラミングを含め、パソコン仕事がほとんどだと腰や背中が硬くなる感じがしませんか？\r\n私はしました。\r\nちょっと身の危険を感じたので、3ヶ月くらい前からジムに通い始めました。  \r\n先日、3ヶ月の節目ということで体成分分析（筋肉とか脂肪の量を測定するやつ）を実施しました。  \r\nそこでまさかの体重が増えていたので、反省と次のクールに向けた反省を踏まえたいと思います。\r\n\r\n## 3ヶ月間やってきたこと\r\nざっくり3ヶ月間やった内容を記載します。  \r\nなお、実際には土日しかジムに行っていないので、 **週1〜2回** です。\r\n\r\n### トレーニング\r\n見てもらうと分かるのですが、無酸素運動は腹筋、背筋しかやっていませんでした。\r\n\r\n#### 有酸素\r\n\r\n- サイクルマシン　10分間\r\n- クロスオーバー（ウォーキングマシンみたいな？）  10分間\r\n- ランニングマシン  30分間\r\n\r\n#### 無酸素\r\n\r\n- 腹筋、背筋　20回 * 3セット\r\n- アブドミナルクランチ(22.5kg) 20回 * 3セット\r\n- ローワーバック(20kg) 20回 * 3セット\r\n\r\nアブドミナルクランチとローワバックは私の語彙力が低すぎて説明できないので、参考画像を貼っておきます。\r\n\r\n### アブドミナルクランチ\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/ac_1.jpg\" alt=\"アブドミナルクランチ\" width=\"200px\">\r\n\r\n### ローワーバック\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/lb_1.jpg\" alt=\"ローワーバック\" width=\"200px\">\r\n\r\n## 体成分分析の結果を見たトレーナーから\r\n\r\n### 足の筋肉が落ちてますね\r\n\r\n実際、体幹の筋肉（腹筋と背筋）は微増していたのですが、脚の筋肉は落ちていました。\r\n\r\n### 足の筋肉が増えると、代謝量が増えます\r\n\r\nなるほど。  \r\n実際にこんな記事を見つけました。\r\n\r\n- [【筋トレは質が重要】理想の筋肉を手に入れる最短ルートをご案内！](http://taru33.com/%E4%BB%A3%E8%AC%9D%E3%81%AE%E5%90%91%E4%B8%8A/leg-muscle.html)\r\n- [下半身の筋トレが基礎代謝量のアップには効果的](https://deepmuscle.info/technique/10738/)\r\n\r\n### 有酸素運動は筋肉増加にはあまり効果的ではありません\r\n\r\n「ランニングもやっていたのですが、それでも筋肉落ちちゃうんですかね？」と質問した回答でした。  \r\nランニングなどの有酸素運動は、脂肪燃焼には効果的ですが、筋肉をつけるのには適していないようです。\r\n\r\n### そもそもトレーニング量が少ないです\r\n\r\n私が通っているジムは、基本自由なので勝手にメニューを作成してました。\r\n通い始めの頃は運動をしていなかったので、慣れるために無理ない範囲で作成したのですが、 **特に見直さずにそのまま続けてしまいました。**\r\n\r\n### 筋肉を増やすなら一気に負荷をかける方が良いです\r\n\r\nトレーナーの方曰く、10回で限界くらいの重り、負荷でやると効果的だそうです。\r\n（本当に筋肉マンになりたければ8回くらい）\r\n\r\n## 修正トレーニング\r\n\r\n今までのトレーニングに追加して、足の筋トレを追加しました。\r\n\r\n### スクワット\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/s_1.png\" alt=\"スクワット\" width=\"200px\">\r\n\r\n### 外腿、内腿\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/a_1.jpg\" alt=\"スクワット\" width=\"200px\">\r\n\r\n### レッグプレス\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/lp_1.jpg\" alt=\"レッグプレス\" width=\"200px\">\r\n\r\n### レッグエクステンション\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/le_1.jpg\" alt=\"レッグエクステンション\" width=\"200px\">\r\n\r\n## さいごに\r\n\r\nなんか振り返っていると、仕事、それこそアプリ開発なんかで必要なPDCA的なところができていなかったなと反省しています。  \r\n今回のことを糧に、次のクールは頑張って行きたいと思います。  \r\nまた3ヶ月後に気が向いたら報告したいと思います。','',1,'2018-09-10 00:00:00','2018-09-09 22:28:47','2018-09-10 21:29:39'),(27,1,6,'Android アプリ開発入門をやってみました','## はじめに\r\n\r\n以前からアプリの知識をもう少しつけたいと思っていたこと、ちょくちょく Kotlin を触る機会があったので、Android アプリを勉強してみることにしました。  \r\n私自身は Android はおろか、 Java の知識も不足しているので、本来であれば Java の何たるかから入るべきだとは思いました。  \r\nただ、せっかくなら Kotlin でチュートリアルをやりたいという思いもあり、本屋で眺めた末にこの本に決めました。  \r\n[基本からしっかり身につくAndroidアプリ開発入門 Android Studio 3.x対応](https://www.sbcr.jp/products/4797395808.html)\r\n\r\n## 本の構成\r\n文法やお作法についてはあまり触れず、ひたすらアプリを作るスタイルです。  \r\n目次を読めば分かりますが、\r\n\r\n- 時計アプリ\r\n- RSSリーダー\r\n- メモ帳\r\n- 地図アプリ\r\n\r\nなんかを作成します。  \r\n\r\n## ざっくり感想\r\n本当の初心者向けではないと思います。  \r\n後半にいくに従い、説明がざっくりしてくるのでふわふわした感じで進みます。  \r\n（説明しだすと収まり切らない事情などだとは思いますが）  \r\n  \r\n私はどちらかというと手を動かして覚えるタイプなので良かったですが、1つずつ丁寧に確認していくタイプの人にはあまりオススメできないかもしれません。\r\n\r\n## さいごに\r\nとはいえ、いくつかの代表的なパターンを知ることができました。  \r\nそれぞれの意味については、自分でアプリを作ってみたり、ドキュメント読んでみたりで頑張ってみたいと思います。  \r\n次はタスク管理アプリでも作って見ようと思います。','',1,'2018-09-13 00:00:00','2018-09-12 23:43:34','2018-09-12 23:43:34'),(28,1,7,'Let\'s Encrypt が更新できなくなった','## はじめに\r\n個人的に作成したサイト、 [https://bookrecorder.net](https://bookrecorder.net) は Let\'s Encrypt で HTTPS 化していました。  \r\nたまたま今月の更新で下記のエラーが出ていることを見つけました。\r\n\r\n```\r\nAttempting to renew cert (bookrecorder.net) from\r\n/etc/letsencrypt/renewal/bookrecorder.net.conf produced an unexpected error:\r\nFailed authorization procedure. bookrecorder.net (http-01):\r\nurn:ietf:params:acme:error:unauthorized ::\r\nThe client lacks sufficient authorization ::\r\nInvalid response from http://bookrecorder.net/.well-known/acme-challenge/jUpxs-9csgM2vPF7akEQyft8jH_Cp1m2UBcujw7MXwI: \r\n\"<html>\r\n<head><title>404 Not Found</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>404 Not Found</h1></center>\r\n<hr><center>\". Skipping.\r\n```\r\n## 心あたりの合ったこと\r\n\r\nこのドメインはつい1、2ヶ月前にルートディレクトリを変更しました。  \r\nその時は特に何もしませんでした。\r\n\r\n## 似たような問題のイシュー\r\n\r\nググったら、下記のリンクを見つけました。  \r\n[The client lacks sufficient authorization - 404](https://community.letsencrypt.org/t/the-client-lacks-sufficient-authorization-404/5309)\r\n\r\n404 なのでルーティングで弾かれているのかなとも思い、Nginx で無理やり設定もしてみましたがダメでした。\r\n\r\n```\r\nlocation ~ /.well-known/acme-challenge/(.*) {\r\n  alias /path/to/webroot/.well-known/acme-challenge/$1;\r\n  break;\r\n}\r\n\r\n```\r\n\r\n## 最終的に\r\n\r\nLet\'s Encrypt では、更新時の情報を持ったファイルが `/etc/letsencrypt/renewal` 以下にありました。  \r\nその中を確認したところ、バッチリ古いルートディレクトリが指定されていました。  \r\nそこを書き換えたところ、更新することができました。\r\n\r\n## さいごに\r\nよく分からず悩んでいたのですが、割とあっさりだし、ルートディレクトリを変更したタイミングで疑問に思うべきでした。  \r\n同じようなエラーが出た方は参考にしていただけると幸いです。','',1,'2018-09-17 00:00:00','2018-09-12 23:51:01','2019-01-20 23:49:41'),(29,1,6,'Android のタスク管理アプリを作ってみる〜その１　アクティビティの切替〜','## はじめに\r\n以前、 [Android アプリ開発入門をやってみました](https://blog.bookrecorder.net/posts/27) 。  \r\n復習も兼ねて、簡単なタスク管理アプリを作成したいと思います。  \r\n目標としては、以前書いた記事の [Vue.jsとRailsでTODOアプリのチュートリアルみたいなものを作ってみた](https://qiita.com/naoki85/items/51a8b0f2cbf949d08b11) のようなイメージでいきたいと思います。  \r\n※ やっているうちに変わっていくかもしれません。  \r\n  \r\n独学用のメモなので、コメントなどいただけると嬉しいです。\r\n\r\n## プロジェクトのセットアップ\r\n\r\n- Kotlin を使用する\r\n- 対象の API は 26 （Android 8.0）\r\n- 初期アクティビティとして、BasicActivityを選択\r\n\r\nそれ以外はそのままで作成しました。\r\n\r\n## 今回の目標\r\n\r\nとりあえず、画面は3つ作成します。  \r\nプリセットされたヘッダーナビゲーションから各画面に遷移できるようにすることが目標です。\r\n\r\n## 初期画面\r\n\r\n初めの段階で、ヘッダーとボタン付きの画面が生成されていました。  \r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/android_1.png\">  \r\n  \r\n`activity_main.xml` を見ていると、\r\n\r\n```xml\r\n<include layout=\"@layout/content_main\" />\r\n```\r\nというコードを見つけました。  \r\n複数のレイアウトを include できるのですね。  \r\n[Re-using layouts with <include/> | Android Developers](https://developer.android.com/training/improving-layouts/reusing-layouts)  \r\n\r\n## 必要なアクティビティを作成\r\n\r\n下記のファイルをAbout、Settingsという名前で作成します。\r\n\r\n- Activity（ `MainActivity.kt` ）\r\n- 大枠のXMLファイル（ `activity_main.xml` ）\r\n- メインコンテンツのXMLファイル（ `content_main.xml` ）\r\n\r\nメインコンテンツの文言は適当に `TextView` で配置します。  \r\nこんな簡単な画面でアクティビティを再生成するのは、Webで言う所の毎回全ロードしているようなものだと思います。  \r\nフラグメントなどをうまく使えば良さそうですが、それは今後のリファクタリングで修正したいと思います。  \r\n\r\n## アクティビティを追加したらマニフェストにも記述する\r\n\r\n`AndroidManifest.xml` に、追加したアクティビティを記述して教えてあげます。  \r\n`MainActivity` の記述をコピペして追加しました。\r\n\r\n```xml\r\n<activity\r\n    android:name=\".AboutActivity\"\r\n    android:label=\"@string/app_name\"\r\n    android:theme=\"@style/AppTheme.NoActionBar\">\r\n</activity>\r\n<activity\r\n    android:name=\".SettingsActivity\"\r\n    android:label=\"@string/app_name\"\r\n    android:theme=\"@style/AppTheme.NoActionBar\">\r\n</activity>\r\n```\r\n\r\n## ヘッダーメニューを追加\r\n\r\nヘッダーにはデフォルトで生成されたツールバーを使用します。  \r\n[アプリバーのセットアップ  |  Android Developers](https://developer.android.com/training/appbar/setting-up?hl=ja)  \r\n\r\n`menu_main.xml` でメニューの項目を追加します。  \r\n（ `menu_main.xml` はデフォルトで作成されていました。）  \r\nここに、デフォルトであった `item` を真似してメニューを追加します。  \r\n\r\n```xml\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    tools:context=\"com.example.android.sample.todoapplication.MainActivity\">\r\n    <item\r\n        android:id=\"@+id/action_home\"\r\n        android:orderInCategory=\"100\"\r\n        android:title=\"@string/action_home\"\r\n        app:showAsAction=\"never\" />\r\n    <item\r\n        android:id=\"@+id/action_about\"\r\n        android:orderInCategory=\"100\"\r\n        android:title=\"@string/action_about\"\r\n        app:showAsAction=\"never\" />\r\n    <item\r\n        android:id=\"@+id/action_settings\"\r\n        android:orderInCategory=\"100\"\r\n        android:title=\"@string/action_settings\"\r\n        app:showAsAction=\"never\" />\r\n</menu>\r\n```\r\n`android:id` はクリックした場合の挙動を定義するのに使用するので必要です。  \r\n`android:orderInCategory` は順番の重み付けのようです。  \r\n  \r\n## メニューをクリックした時の遷移\r\n\r\n各アクティビティのクラスに、 `onOptionsItemSelected` というメソッドがあるので、こちらに記載していきます。  \r\n例として `MainActivity.kt` の部分を記載します。  \r\n[別の Activity を開始する  |  Android Developers](https://developer.android.com/training/basics/firstapp/starting-activity?hl=ja)\r\n\r\n```java\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n        // About のアクティビティへ\r\n        R.id.action_about -> {\r\n            val intent = Intent(this, AboutActivity::class.java)\r\n            startActivity(intent)\r\n            true\r\n        }\r\n        // Settings のアクティビティへ\r\n        R.id.action_settings -> {\r\n            val intent = Intent(this, SettingsActivity::class.java)\r\n            startActivity(intent)\r\n            true\r\n        }\r\n        else -> {\r\n            // その他の場合は何もしない\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n}\r\n```\r\nこんな感じで `AboutActivity.kt` 、 `SettingsActivity.kt` も追記すれば遷移できるようになるかと思います。  \r\n\r\n## 色を変える\r\n\r\n`colors.xml` に主要な色があらかじめ定義されているのでここを変更すれば全体的に変わります。\r\n\r\n## さいごに\r\n\r\nとりあえずアクティビティを切り替えるところまで作成しました。  \r\nここまでの差分は下記のリンクになります。  \r\n[Network Graph · naoki85/android_todo_application · GitHub](https://github.com/naoki85/android_todo_application/network)  \r\n  \r\nデバッグするとこんな感じです。　　\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/android_2.gif\">  \r\n\r\n次回はリストビューを使ってみたいと思います。','',1,'2018-09-19 00:00:00','2018-09-16 09:38:11','2018-09-16 09:38:11'),(30,1,0,'人魚の眠る家を読みました','本屋でとりあえず手にとりました。  \r\n東野圭吾さんの本は、学生のときにけっこう読みましたが、もっぱらガリレオシリーズが多かったので、ミステリーなイメージでした。  \r\n\r\n## ざっくり感想\r\n\r\n内容に関してあまり前情報無しで読みましたが、全体的には切ない感じでした。  \r\n  \r\nなかなか難しいテーマだと思ったので、どこに落とし所を持ってくるのか気になりました。  \r\n中盤くらいで、なんとなく終わりの想像ができそうな雰囲気がありましたが、さすがは東野圭吾さんで、終盤に山場がちゃんとありました。\r\n  \r\n## 主な論点\r\n多分、 **脳死** と **臓器移植** を踏まえた、「 **何を持って人の死とするか** 」が焦点ではないかと思います。  \r\n  \r\n試しにググってみたら、小説内に記載あったようなことがありました。  \r\n[脳死判定 | 日本臓器移植ネットワーク](http://www.jotnw.or.jp/studying/4-3.html)  \r\n  \r\n便利な世の中にはなりますが、倫理的な問題が付きまとうという意味で、私も考えねばならないなと思います。\r\n\r\n## 映画がやるそうです\r\n今年の11月に映画もやるそうです。  \r\n[映画『人魚の眠る家』公式サイト](http://ningyo-movie.jp/index.html)  \r\n  \r\n名俳優、女優さんたちの熱演で、原作の雰囲気に近くなりそうだと期待していますが、逆に映像で見せられるとより辛くなりそうです。。  ','',1,'2018-09-21 00:00:00','2018-09-17 11:25:48','2018-09-17 11:25:48'),(31,1,6,'Android のタスク管理アプリを作ってみる〜その２ ListView を使ってみる〜','## はじめに\r\n前回、[Android のタスク管理アプリを作ってみる〜その１　アクティビティの切替〜](https://blog.bookrecorder.net/posts/29) の続きです。  \r\n今回は ListView を使用してリスト表示をしてみます。  \r\n[リストビュー  |  Android Developers](https://developer.android.com/guide/topics/ui/layout/listview?hl=ja)\r\n\r\n## レイアウトに ListView を追加する\r\n\r\n`content_main.xml` の TextView を削除し、 ListView を追加します。  \r\nデザインエディタのパレットから Legacy → ListView を選択し、導入します。  \r\n`id` は `taskList` にします。  \r\n（マージンなんかは適当に）\r\n\r\n## リストの各項目のレイアウトを作成する\r\n\r\nリストの1列に相当するレイアウトを作成します。  \r\n今回はテストなので、文字列だけを表示するだけにします。  \r\n`list_task_row.xml` を作成して TextView を配置します。  \r\n\r\n- `id` は `taskRow`\r\n- `layout_width` を `match_constraint` \r\n- `layout_height` を `wrap_content`\r\n\r\n`match_constraint` は目一杯まで広げ、 `wrap_content` はそのオブジェクトに合わせて決定するようです。  \r\nこの辺りは下記に記載されてました。  \r\n[ConstraintLayout  |  Android Developers](https://developer.android.com/reference/android/support/constraint/ConstraintLayout)\r\n\r\n\r\n## アダプタを作成する\r\n\r\nのちのち、 `content_main.xml` 内から ListView を探すために、 `content_main` に id を割り振ります。  \r\n\r\n\r\n```xml\r\n<!-- activity_main.xml -->\r\n<include\r\n    android:id=\"@+id/content_main\"\r\n    layout=\"@layout/content_main\" />\r\n```\r\n### レイアウトから ListView を見つける\r\n今回はダミーのタスク配列を作成しておきます。  \r\nKotlin だと `arrayOf` で簡単に文字列配列を作成できました。  \r\n[arrayOf - Kotlin Programming Language](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/array-of.html)  \r\n\r\n### アダプターを作成する\r\n[Adapter  |  Android Developers](https://developer.android.com/reference/android/widget/Adapter?hl=ja)  \r\n\r\n- 第一引数は `this` （Context）\r\n- 第二引数は列のレイアウト\r\n- 第三引数は文字列をセットするTextView の `id` \r\n- 第四引数はセットする配列\r\n\r\n最後に ListView にそのアダプターをセットすれば完了です。\r\n\r\n```java\r\nclass MainActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        // ...\r\n        val tasks = arrayOf(\"study\", \"shopping\", \"running\", \"testing\")\r\n    \r\n        // リストをレイアウトから探す\r\n        val contentMain = findViewById<ConstraintLayout>(R.id.content_main)\r\n        val listView = contentMain.findViewById<ListView>(R.id.taskList)\r\n      \r\n        // アダプターを作成\r\n        val adapter = ArrayAdapter<String>(this,\r\n                                           R.layout.list_task_row,\r\n                                           R.id.taskRow,\r\n                                           tasks)\r\n         // リストにアダプターをセットする\r\n        listView.adapter = adapter\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\n\r\n## さいごに\r\n\r\nデバッグするとこんな感じです。　　\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/android_3.png\" width=\"300px\">  \r\n\r\n今回の差分は下記の通りです。  \r\n[Add ListView · naoki85/android_todo_application@76f28db · GitHub](https://github.com/naoki85/android_todo_application/commit/76f28db4ff80c728c7990932eb51cc5e57325b9f)  \r\n次回はタスクの登録をやりたいと思います。','',1,'2018-09-24 01:00:00','2018-09-22 22:34:07','2018-09-22 22:34:08'),(32,1,3,'AWS Secrets Manager を使ってみた','## はじめに\r\n[AWS Secrets Manager | シークレットをローテーション、管理、取得 | アマゾン ウェブ サービス (AWS)](https://aws.amazon.com/jp/secrets-manager/)  \r\nAPIキーや各種パスワードなどの管理をするためにAWS の Secret Manager を使ってみました。  \r\n  \r\n本ブログでは API 経由でパスワードを取得するところまで。。  \r\n  \r\nちなみに、1シークレットあたり 0.5 ドル。  \r\n10,000 回の API コールあたり 0.05 ドルみたいです。（1ヶ月お試し期間あり）  \r\n[料金 | AWS Secrets Manager | アマゾン ウェブ サービス (AWS)](https://aws.amazon.com/jp/secrets-manager/pricing/)\r\n\r\n## シークレットを作る\r\n\r\nコンソールから新しいシークレットを作成します。 \r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/aws_sm_1.png\" width=\"300px\">  \r\n\r\n- RDS の username やパスワードも管理できるようですが、今回は APIキーにします。\r\n- キーバリューで保存できるので、テスト用に適当な値を入れます。\r\n- 暗号化キーを選べるようですが、今回はデフォルトで。\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/aws_sm_2.png\" width=\"300px\">   \r\n\r\n- シークレットの名前と説明を入力します。\r\n\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bookrecorder-image/posts/aws_sm_3.png\" width=\"300px\">   \r\n\r\n- ローテートもできるようです。\r\n- AWS Lambda で専用関数も作れるらしいです。\r\n\r\nこれで保存すればシークレットが作成できます。\r\n\r\n## Gem を使って値を取得してみる\r\nシークレットを作成したタイミングで、各言語のサンプルコードが表示されるのでそれを使用します。  \r\n### IAM ロールを作る\r\n`SecretsManagerReadWrite` ポリシーを持ったロールを作成します。  \r\nそしてアクセスキー、シークレットを取得します。  \r\nまた、使用する環境の `aws` コマンドにアクセスキーを設定します。\r\n\r\n### サンプルコードをもとにクラスを作る\r\nAWS から Gem も出ているのでそちらを使用します。  \r\n[Module: Aws::SecretsManager — AWS SDK for Ruby V3](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SecretsManager.html)  \r\nバージョンは `1.15` 以上にしてください。\r\n  \r\nRails で使用する場合は [aws-sdk-rails](https://github.com/aws/aws-sdk-rails) もインストールした方が良いかもです。  \r\n\r\n```rb\r\nrequire \'aws-sdk-secretsmanager\'\r\nrequire \'base64\'\r\nrequire \'json\'\r\n\r\nclass AwsSecretManager\r\n\r\n  def self.get_secret(secret_name)\r\n    endpoint_url = \"https://secretsmanager.ap-northeast-1.amazonaws.com\"\r\n    region_name = \"ap-northeast-1\"\r\n\r\n    client = Aws::SecretsManager::Client.new(region: region_name,\r\n                                             endpoint: endpoint_url)\r\n\r\n    begin\r\n      get_secret_value_response = client.get_secret_value(secret_id: secret_name)\r\n    rescue => e\r\n      # 例外処理は省略\r\n      raise\r\n    else\r\n\r\n      secret = if get_secret_value_response.secret_string\r\n                 get_secret_value_response.secret_string\r\n               else\r\n                 Base64.decode64(get_secret_value_response.secret_binary)\r\n               end\r\n      JSON.parse(secret)\r\n    end\r\n  end\r\nend\r\n```\r\n複数のシークレットも取れるように、引数指定させました。  \r\nJSON で返却するので、キーを指定すれば取得できます。\r\n\r\n```rb\r\nsecrets = AwsSecretManager.get_secret(\'prod/test\')\r\nputs secrets[\'hogehoge\']\r\n```\r\n\r\n## さいごに\r\n\r\n例えば Twitter API キーなどを複数のアプリで使い回す時など、一元管理できて良さそうです。  \r\n一応、Capistrano でデプロイ時に取得するようにもしてみましたが、もう少し私の中でノウハウが必要かもしれません。','',1,'2018-09-26 07:00:00','2018-09-25 23:40:55','2018-09-25 23:40:55'),(33,1,6,'Android のタスク管理アプリを作ってみる〜その３ モーダルを使ってタスク作成する〜','## はじめに\r\n前回、[Android のタスク管理アプリを作ってみる〜その２　ListView を使ってみる〜](https://blog.bookrecorder.net/posts/31) の続きです。  \r\n今回は、以下の挙動を実装したいと思います。  \r\n\r\n- 画面下部のボタンを押すとモーダルがでる\r\n- モーダルからタスクの新規登録が出る\r\n\r\nこんな感じです。  \r\n\r\n<img src=\"http://d29xhtkvbwm2ne.cloudfront.net/posts/android_4.gif\">\r\n\r\nドキュメントだと、この辺りの内容かと思います。  \r\n- [ダイアログ &nbsp;|&nbsp; Android Developers](https://developer.android.com/guide/topics/ui/dialogs?hl=ja)\r\n- [Add a Floating Action Button &nbsp;|&nbsp; Android Developers](https://developer.android.com/guide/topics/ui/floating-action-button)\r\n\r\n\r\n## モーダル用のフラグメントを作る\r\n\r\n### カスタムレイアウトの作成\r\n\r\nフラグメントって、私の経験の中だとJSフレームワークのコンポーネントに近いのかなと思っています。（同じMVVMだし）  \r\n[ダイアログ](https://developer.android.com/guide/topics/ui/dialogs?hl=ja)を使用すれば、簡単に実装できるようです。  \r\n  \r\nただ、今回はカスタムレイアウトを使用して見ました。  \r\nまずはフラグメント用のXMLファイルを作成します。  \r\nコードはこちらの[差分](https://github.com/naoki85/android_todo_application/commit/011ace22fb59928da33b24f8b5ad6f940b0b7ad0#diff-e47b510f4646af8c4d80fb22207d0c8c)からご覧ください。  \r\nOK、キャンセルボタンは勝手についてくるので、テキスト入力エリアくらいしか追加していません。\r\n\r\n### フラグメントのクラスを作成\r\n\r\n```java\r\nclass AddTaskFragment : DialogFragment() {\r\n    interface AddTaskListener {\r\n        fun onDialogPositiveClick(dialog: DialogFragment)\r\n        fun onDialogNegativeClick(dialog: DialogFragment)\r\n    }\r\n     private lateinit var mListener : AddTaskListener\r\n     override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder = AlertDialog.Builder(activity)\r\n        val inflater = activity?.layoutInflater\r\n        builder.setView(inflater?.inflate(R.layout.add_task_fragment, null))\r\n                .setPositiveButton(getString(R.string.add_task_dialog_positive_button),\r\n                        DialogInterface.OnClickListener { dialog, _ ->\r\n                            mListener.onDialogPositiveClick(this@AddTaskFragment);\r\n                })\r\n                .setNegativeButton(getString(R.string.add_task_dialog_negative_button),\r\n                        DialogInterface.OnClickListener { dialog, _ ->\r\n                            mListener.onDialogNegativeClick(this@AddTaskFragment);\r\n                })\r\n        // Create the AlertDialog object and return it\r\n        return builder.create()\r\n    }\r\n     override fun onAttach(activity: Activity?) {\r\n        super.onAttach(activity)\r\n        try {\r\n            mListener = activity as AddTaskListener\r\n        } catch (e: ClassCastException) {\r\n            throw ClassCastException(activity!!.toString() + \" must implement NoticeDialogListener\")\r\n        }\r\n     }\r\n} \r\n```\r\n基本的には、 `DialogFragment` を継承して作成しています。  \r\nクラス内で `AddTaskListener` インターフェースがありますが、これはOKボタンやキャンセルボタンを押した際の処理を、Activity 側で実装したいと考えたからです。  \r\n  \r\nダイアログのセット自体は `onCreateDialog` でやっていますが、その際に `AddTaskListener` の処理を差し込んでいます。\r\n\r\n## MainActivity の修正\r\n\r\n[差分](https://github.com/naoki85/android_todo_application/commit/011ace22fb59928da33b24f8b5ad6f940b0b7ad0#diff-e9b4f796dc60f11e0b3a04f24859b7ca)はこちらです。  \r\n新たに、 `AddTaskFragment.AddTaskListener` を継承するようにします。\r\n\r\n### モーダルをだす\r\n\r\n右下のボタンを押した際にモーダルを出したいので、今まで手をつけていなかった `fab` のクリックイベントを修正します。\r\n\r\n```java\r\nfab.setOnClickListener { view ->\r\n  val addTaskFragment = AddTaskFragment()\r\n  addTaskFragment.show(supportFragmentManager, \"addTask\")\r\n}\r\n```\r\n\r\n## AddTaskListener を実装する\r\n\r\nキャンセルボタンを押した場合は何もせずモーダルを閉じれば良いので、そのままです。  \r\n（デフォルトで閉じてくれる）  \r\nOKボタンが押された場合は、モーダルに入力されたテキストを取得し、配列に追加します。  \r\n  \r\nただ、前回ダミーの配列を `arrayOf` で作成しましたが、これはイミュータブルな配列になってしまうので、 `mutableListOf` に変更しました。  \r\n  \r\n```java\r\n    override fun onDialogPositiveClick(dialog: DialogFragment) {\r\n        val dialogView = dialog.dialog\r\n        val taskContent = dialogView.findViewById<EditText>(R.id.addTaskEditText)\r\n        val newTask = taskContent.text.toString()\r\n        tasks.add(newTask)\r\n    }\r\n```\r\nけっこうシンプルですね。\r\n\r\n## さいごに\r\n\r\nあとはスタイルやアイコンを修正すれば、記事トップのような感じになるかと思います。  \r\n全体的な差分はこちらです。  \r\n[Add AddTaskFragment · naoki85/android_todo_application@011ace2 · GitHub](https://github.com/naoki85/android_todo_application/commit/011ace22fb59928da33b24f8b5ad6f940b0b7ad0)\r\n\r\n次回はタスクの完了をやりたいと思います。','',1,'2018-09-28 07:00:00','2018-09-28 00:09:02','2018-09-28 00:09:02'),(34,1,1,'RailsのFormヘルパーにVueコンポーネントを簡単に埋め込む','## やりたいこと\r\n\r\n`v-model` を使用した`textarea` をFromコンポーネントに入れたいと考えました。  \r\nいくつか方法があるかと思いますが、これが一番楽かと思うので紹介しようと思います。\r\n\r\n## コンポーネントを作る\r\n\r\n<img src=\"https://d29xhtkvbwm2ne.cloudfront.net/posts/vue_textarea.png\" width=\"300px\">\r\n\r\nコンポーネント側では `name` を `props` で受け取るようにしておきます。  \r\nまた、 `textarea` の値は `v-model` で利用したいのですが、初期値がある場合もあるので、そちらも受け取れるようにします。\r\n\r\n```js\r\n<template>\r\n  <div>\r\n    <textarea :name=\"name\" v-model=\"content\"></textarea>\r\n  </div>\r\n  <div v-html=\"content\"></div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    props: {\r\n      name: String,\r\n      content: String\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n## Fromヘルパー内に組み込む\r\n\r\n上記のコンポーネントを `my-textarea` として登録します。  \r\nあとは `name` セットしてFromヘルパーの中に組み込むだけです。  \r\n`name` が直指定なので、共通化するにはもう一工夫必要かと思います。  \r\n\r\n```html\r\n<%= f.label :content %>\r\n<my-textarea name=\"post[content]\" content=\"<%= @post.content %>\"></textarea>\r\n```\r\n\r\n## さいごに\r\n\r\n最近、RailsにVue.jsを組み込むなら、Railsの強力なヘルパーは活かしつつ、JSの管理のためにVue.jsを使うくらいがちょうどいいのかなと感じています。  \r\nフロントエンドを分離したいなら、プロジェクトを分割してしまえば良いわけですし。  \r\n簡単ではありますが、本日はこの辺で。。','',1,'2018-10-01 07:00:00','2018-10-01 22:25:20','2018-10-02 09:02:26'),(35,1,6,'Android のタスク管理アプリを作ってみる〜その４ クリックしたらタスクを完了する〜','## はじめに\r\n前回、[Android のタスク管理アプリを作ってみる〜その３　ListView を使ってみる〜](https://blog.bookrecorder.net/posts/33) の続きです。  \r\n今回は、以下の挙動を実装したいと思います。  \r\n\r\n- タスクをクリックしたら完了扱いとしてリストから消す\r\n\r\n## リスナーを設定する\r\n\r\nListView にクリックした場合のリスナーを追加します。  \r\n`setOnItemClickListener` ですね。  \r\nドキュメントはこの辺です。  \r\n[AdapterView  |  Android Developers](https://developer.android.com/reference/android/widget/AdapterView)  \r\n  \r\nその際にクリックされた配列の位置を取得して、削除します。\r\n\r\n```java\r\nlistView.setOnItemClickListener { _, _, position, _ ->\r\n    tasks.removeAt(position)\r\n}\r\n```\r\n\r\n### タスクが消えない\r\n\r\nこの実装で良いのかなと思って、デバッグしているとクラッシュしてしまいました。  \r\nどうやら配列自体からは消えているようですが、アクティビティの表示からは消えていませんでした。  \r\nググっていたら下記の記事を見つけました。  \r\n[android - notifyDataSetChangedでListViewが更新される場合とされない場合がある - スタック・オーバーフロー](https://ja.stackoverflow.com/questions/5151/notifydatasetchanged%E3%81%A7listview%E3%81%8C%E6%9B%B4%E6%96%B0%E3%81%95%E3%82%8C%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%8C%E3%81%82%E3%82%8B)  \r\nなるほど、リロードしないといけないのか、と思い、下記を追記しました。  \r\n\r\n```java\r\nadapter.notifyDataSetChanged()\r\n```\r\nBaseAdapter のメソッドなんですね。  \r\n[BaseAdapter  |  Android Developers](https://developer.android.com/reference/android/widget/BaseAdapter#notifyDataSetChanged())\r\n\r\n## さいごに\r\n\r\n今回の差分はこちらです。  \r\n[Add setOnItemClickListener to ListView · naoki85/android_todo_application@33b0098 · GitHub](https://github.com/naoki85/android_todo_application/commit/33b0098d7da26ed4ef68ae28047135de54bf357d)\r\n\r\nとりあえず基本的な動きはできたので、次回はSQLiteを使ったローカル保存をやりたいと思います。','',1,'2018-10-03 07:00:00','2018-10-02 07:34:37','2018-10-02 07:34:38'),(36,1,1,'【webpack-dev-server】net::ERR_CONNECTION_REFUSED というエラーが出た','Rails の WebPacker を使用していますが、以前からこのようなエラーが頻発していました。  \r\n\r\n<img src=\"https://d29xhtkvbwm2ne.cloudfront.net/posts/1538651059.png\" width=\"300px\">\r\n  \r\nProduction では特になかったので放置していたのですが、気になったので対応したメモです。  \r\n正直、すぐに思いつくことかもしれません。  \r\n\r\n### DevServer はデフォルトで3035番ポートで動く\r\nこれを理解していませんでした。  \r\n\r\n### 3035番ポートが空いていなかった\r\n環境を Docker で構築しているのですが、上記エラーが出たアプリケーションでは3035番ポートが空いていませんでした。  \r\nそのため、通信エラーが起きていたようです。\r\n\r\n### 空いているポートを使って DevServer を動かす\r\n\r\n3035番を開けても良かったのですが、こちらのイシューで設定変更できると知ったので、別のポートで起動させます。  \r\n[sockjs-node ERR_CONNECTION_REFUSED when accessing from network · Issue #416 · webpack/webpack-dev-server · GitHub](https://github.com/webpack/webpack-dev-server/issues/416)  \r\n\r\n環境ごとの設定ファイルがあるかと思います。  \r\n`rails/@webpacker` なら `config/webpack` 配下です。  \r\n対象の環境用の設定ファイルに下記を追記します。\r\n\r\n```js\r\nmodule.exports = environment.config.devServer = {\r\n  host: \'0.0.0.0\', // DevServer を起動するホスト\r\n  port: 8000 // DevServer を起動するポート\r\n}\r\n```\r\nこちらで再起動するとエラーが消えました。  \r\n\r\n## さいごに\r\nWebpack は何となく使ってるのが良くないですね。。。  \r\n同じように困っている人の参考になれば幸いです。','',1,'2018-10-05 07:00:00','2018-10-04 22:08:03','2018-10-04 22:08:04'),(37,1,1,'テキスト編集エリアに画像をドロップしてアップロードする','## はじめに\r\n実は以前までは、ブログ内に画像を表示する際には S3 に直接アップロードして使用していました。  \r\nたださすがに面倒くさくなってきたので、GithubやQiitaのように、画像編集エリアからアップロードできるようにします。  \r\n\r\n## やりたいこと\r\n\r\n- 画像をドラッグしてテキストエリアの上にきたら、枠線に分かりやすく色をつけたい\r\n- 画像をドロップしたら画像をアップロード\r\n- ドラッグした画像を外したら枠線の色を消す  \r\n\r\n今回はアップロード処理自体は割愛します。  \r\n簡単な例をJS Fiddleで作成しているので、そちらをご覧いただければと思います。  \r\n（記事のコードと少し異なります。）\r\n\r\n[markdown_preview - JSFiddle](https://jsfiddle.net/naoki85/3xb78nok/19/)\r\n\r\n## drop イベントを拾う\r\n[HTML ドラッグ＆ドロップ API - Web API インターフェイス | MDN](https://developer.mozilla.org/ja/docs/Web/API/HTML_Drag_and_Drop_API)  \r\nHTML5 で追加されたドラッグ＆ドロップイベントを使用します。  \r\n  \r\n今回目指すものは「ドロップ」された場合の処理なので、以下のイベントを使用します。  \r\n\r\n- dragover ... ドラッグした状態でhoverした場合\r\n- drop ... ドロップされた場合\r\n- dragleave ... ドラッグ状態で離れた場合\r\n\r\nなお、その状態でメソッドを差し込む場合は、 Vue.js では `.prevent` で良いようです。  \r\n[イベントハンドリング — Vue.js](https://jp.vuejs.org/v2/guide/events.html#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E4%BF%AE%E9%A3%BE%E5%AD%90)  \r\n  \r\nメソッドはあとで実装するとして、HTMLの方はそれぞれメソッドを当てておきます。\r\n\r\n```\r\n<div id=\'editor\'>\r\n    <div\r\n        @dragleave.prevent=\"onDragLeave\"\r\n        @dragover.prevent=\"onDragEnter\"\r\n        @drop.prevent=\"uploadImage\">\r\n        <textarea class=\"edit-text\" rows=\"10\" cols=\"50\"\r\n            v-model=\"input\"></textarea>\r\n    </div>\r\n    <div v-html=\'input\'></div>\r\n</div>\r\n```\r\n\r\n## dragover した場合のCSSクラスを作っておく\r\n\r\nまずはドラッグオーバーした場合、枠線をつけるところをやります。  \r\nこれはメソッド内でクラスを当てて対応したいと思います。\r\n\r\n```css\r\n.dropover {\r\n  border-color: #2188ff;\r\n  box-shadow: inset 0 1px 2px rgba(27,31,35,0.075), 0 0 0 0.2em rgba(3,102,214,0.3);\r\n}\r\n```\r\n## JSでCSSクラスを操作する\r\n\r\nそれぞれ、 `onDragLeave` 、 `onDragEnter` メソッドで対応する予定なので、下記のように実装しました。  \r\nメソッド内でやっていることは JavaScript で簡単にやってしまいます。\r\n\r\n```js\r\nmethods: {\r\n  onDragLeave() {\r\n    this.toggleDragOver(\'leave\');\r\n  },\r\n  onDragEnter() {\r\n    this.toggleDragOver(\'enter\');\r\n  },\r\n  toggleDragOver(action) {\r\n    let targetClassList = document\r\n    .getElementsByClassName(\'edit-text\')[0].classList;\r\n    const targetClass = \'dropover\';\r\n    if (action === \'enter\') {\r\n      targetClassList.add(targetClass);\r\n    } else {\r\n      targetClassList.remove(targetClass);\r\n    }\r\n  },\r\n  // ...\r\n}\r\n```\r\n## drop された場合のイベント\r\n\r\n肝心の drop された場合の処理です。  \r\n長くなりそうなので、画像アップロードのAPIは用意されているものとします。  \r\n  \r\nHTTPリクエストには `axios` を使用するのが良いかと思います。  \r\n\r\n```js\r\nimport axios from \'axios\'\r\n\r\nuploadImage(event) {\r\n  // 送信データを作成\r\n  let formData = new FormData();\r\n  formData.append(\'file\', event.dataTransfer.files[0]);\r\n  \r\n  axios.post(\'http://localhost/upload\')\r\n    .then((response) => {\r\n    alert(\'success\');\r\n    this.input += \'<img src=\"IMAGE\">\';\r\n  })\r\n}\r\n```\r\ndrop したファイルは、 `event.dataTransfer` で取得することができます。  \r\n[DataTransfer - Web API インターフェイス | MDN](https://developer.mozilla.org/ja/docs/Web/API/DataTransfer#files)  \r\n今回は配列先頭を直指定していますが、複数アップロードなどは工夫が必要だと思います。  \r\n\r\n## さいごに\r\n簡単ではありますが、まとめさせていただきました。  \r\nユーザーに使用してもらう場合は、バリデーションなども必要かもしれませんが、今回はこの辺りで。。','',1,'2018-10-08 00:00:00','2018-10-08 22:20:33','2018-10-09 09:01:15'),(38,1,6,'Android のタスク管理アプリを作ってみる〜その５ SQLiteを使って保存〜','## はじめに\r\n前回、[Android のタスク管理アプリを作ってみる〜その４ クリックしたらタスクを完了する〜](https://blog.bookrecorder.net/posts/35) の続きです。  \r\n今回は、SQLiteOpenHelper を使用してローカルに保存したいと思います。  \r\nドキュメントはこちらですかね。  \r\n[SQLiteOpenHelper  |  Android Developers](https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper)\r\n\r\n## メソッドのまとめ\r\n以前記事にもさせていただいた、[基本からしっかり身につくAndroidアプリ開発入門](https://amzn.to/2yAQniO)の内容をベースにしているので、気になるかたは購入されても良いかもしれません。  \r\n[Android アプリ開発入門をやってみました](https://blog.bookrecorder.net/posts/27)  \r\n  \r\n今回まとめるのは `SELECT` 、 `INSERT` を発行する際のメソッドの引数を覚え書きします。  \r\n私の作成した `DatabaseHelper` はこちらです。  \r\n[Add DatabaseHelper · naoki85/android_todo_application@efdcc31 · GitHub](https://github.com/naoki85/android_todo_application/commit/efdcc319b2fdc9035aee25151f5d2a176a72cd88#diff-0ef2f562d85cb33af84ecc3fef4a5514)\r\n\r\n### query\r\n[SQLiteDatabase  |  Android Developers](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase#query(boolean,%20java.lang.String,%20java.lang.String[],%20java.lang.String,%20java.lang.String[],%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String))  \r\nいわゆる `SELECT` 文を発行するクエリビルダーですかね。  \r\n引数で各構文をフォローすることができるので直感的にかけそうです。\r\n\r\n- 第1引数 テーブル名\r\n- 第2引数 カラム\r\n- 第3引数 範囲（ section ）\r\n- 第4引数 範囲に入れる値（ sectionArgs ）\r\n- 第5引数 GROUP BY \r\n- 第6引数 HAVING\r\n- 第7引数 ORDER BY \r\n- 第8引数 LIMIT\r\n\r\n範囲というのが分かりにくいですが、 `age > 10 AND age < 20` みたいなやつです。  \r\n実際には、　`section` には　`age > ? AND age < ?` のように入れて、`sectionArgs` に実際の値を入れるようです。  \r\n（ `new String[]{\"10\",\"20\"}` ）  \r\n今回は使いませんでした。\r\n\r\n### insert\r\n[SQLiteDatabase  |  Android Developers](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase#insert(java.lang.String,%20java.lang.String,%20android.content.ContentValues))  \r\n`insert` は分かりやすいですね。  \r\n対象のテーブルと値を指定してレコードを作成します。  \r\n第2引数が `nullColumnHack` というものですが、これは `NOT NULL` なカラムに対して `NULL` 以外を insert する場合に指定するようです。    \r\n手前でバリデーションすれば良さそうなのであまり使う機会はなさそうでしょうか。\r\n\r\n## さいごに\r\n`query` 、 `insert` をみましたが、簡潔にかけて良さそうです。  \r\n今回の差分はこちらです。  \r\n[Add DatabaseHelper · naoki85/android_todo_application@efdcc31 · GitHub](https://github.com/naoki85/android_todo_application/commit/efdcc319b2fdc9035aee25151f5d2a176a72cd88)\r\n\r\n追加したタスクをリロードするためにアクティビティを再起動していますが、  \r\nこれは他に良い方法があるんじゃないかと思っています。  \r\n（今の私では分からなかった。。）  \r\nとりあえずはこの形で一旦実装しました。  \r\n  \r\n次回は WebView を使って規約などを表示できるようにしたいと思います。','',1,'2018-10-12 08:00:00','2018-10-12 07:52:00','2018-10-12 07:52:00'),(39,1,6,'Android のタスク管理アプリを作ってみる〜その６ WebViewで表示させてみる〜','## はじめに\r\n前回、[Android のタスク管理アプリを作ってみる〜その５ SQLiteを使って保存〜](https://blog.bookrecorder.net/posts/38) の続きです。  \r\n今回は、WebView を使用してポリシーページを表示したいと思います。  \r\n\r\n## Chrome Custom Tabs\r\n[Chrome Custom Tabs - Google Chrome](https://developer.chrome.com/multidevice/android/customtabs)   \r\n  \r\nChrome 45 から導入された機能で、自分のアプリ内で Chrome が立ち上がっているように見えます。  \r\nWebView はこれを使うのが良さそうです。  \r\n  \r\n[android.support.customtabs  |  Android Developers](https://developer.android.com/reference/android/support/customtabs/package-summary)\r\n  \r\n## 実装\r\n\r\n`app/build.gradle` に下記を記載します。\r\n\r\n```\r\ndependencies {   \r\n    // ...   \r\n   \'com.android.support:customtabs:27.1.1\'\r\n    // ...\r\n}\r\n```\r\n\r\n開きたい場所で、 `CustomTabsIntent` を作成して、URLを指定します。\r\n\r\n```java\r\nval intent = CustomTabsIntent.Builder().build()\r\nintent.launchUrl(this,\r\n                 Uri.parse(getString(R.string.policy_url)))\r\n```\r\n今回はヘッダーを選択したタイミングで、WebView を表示するようにしました。\r\n\r\n## さいごに\r\n\r\n今回の差分はこちらです。  \r\n[Show policy as webview · naoki85/android_todo_application@5b4bbc4 · GitHub](https://github.com/naoki85/android_todo_application/commit/5b4bbc46e78b980d8e078ee9d4eea4beabfd0429#diff-e9b4f796dc60f11e0b3a04f24859b7ca)\r\n  \r\n次回はタスクの完了の動作をSQLiteに合わせて修正しようと思います。','',1,'2018-10-17 08:00:00','2018-10-13 20:51:20','2018-10-13 20:51:20'),(40,1,0,'ホモ・デウス上巻を読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4309227368/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4309227368&linkCode=as2&tag=naoki850c-22&linkId=09657fa342962fe54e4e67f88821ee22\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4309227368&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4309227368\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\n## はじめに\r\n以前、 [サピエンス全史](https://www.amazon.co.jp/gp/product/B01KLAFEZ4/ref=as_li_tl?ie=UTF8&tag=naoki850c-22&camp=247&creative=1211&linkCode=as2&creativeASIN=B01KLAFEZ4&linkId=3fbb9d967d97b0b720f2d3240952bded) を読みました。  \r\nあまりこの類の本は読んでこなかったのですが、面白く読めました。  \r\n  \r\n新刊の「ホモデウス」が出たということで購入しました。  \r\n哲学であったり、倫理的な内容が多いですが、興味深いです。  \r\n今回は上巻の感想を章ごとに記載したいと思います。\r\n\r\n## 人類が新たに取り組むべきこと\r\n\r\nある種、序章が一番印象的でした。  \r\nちょうど、[人魚の眠る家を読んだ記事](https://blog.bookrecorder.net/posts/30) も書いたのですが、まさにあの本のようなことが現実に起こりそうだな、と感じます。  \r\n  \r\n真面目に、人類が不老不死や神様になることを議論されると少し怖くなりますね。  \r\nただ、今の私でさえ想像できいることが多々あるので現実味がある話かと思います。\r\n\r\n## ホモ・サピエンスが世界を支配する\r\n\r\n```\r\n人間は地球を完全に支配しているが、それは個々の人間が個々のチンパンジーやオオカミよりもはるかに利口だったり手先が器用だったりするからではなく、ホモ・サピエンスが大勢で柔軟に協力できる地球上で唯一の種だからだ。\r\n```\r\nこの一文が印象的でした。  \r\n現在はインターネット、さらにはSNSの力で、より効率良く繋がることができます。  \r\nそういったことも、ここ数年の変化に影響しているのかな、と感じています。\r\n\r\n## ホモ・サピエンスが世界に意味を与える\r\n\r\n下巻にまたがる内容なので、上巻だと半分の内容です。  \r\n私たちには、主観的現実と客観的現実と共有主観的現実があるそう。  \r\n共有主観は、「こうあるべきだ」というやつです。  \r\n  \r\nよくよく考えると、自分自身も共有主観的現実でモノを考えてるなと感じます。（それが悪いわけではないと思いますが）  \r\n  \r\nこの現実で色々都合よく集団に規律を与えているそうです。\r\n\r\n## さいごに\r\n\r\nちょうどこの本を読んでいる最中に、お坊さんの説法を聞く機会がありました。  \r\nお坊さんの説法も思うところがありました。  \r\n  \r\n本の内容からは少し離れますが、お坊さんの説法の中で面白かったのは、\r\n\r\n```\r\n自分は変わっていないつもりでも、体は老いるし、環境も変わる。\r\nだから迷う。\r\nありのままを受け入れ、感じなさい。\r\n```\r\n変化の多い時代では、こういうマインドセットが必要かもしれません。  \r\n  \r\n下巻を読んだらまた記事にしたいと思います。','',1,'2018-10-15 08:00:00','2018-10-13 22:14:00','2018-10-13 22:14:00'),(41,1,1,'Nuxt.js 2.0 をインストールしたメモ','## はじめに\r\n\r\n先日、Nuxt.js の ver.2.0 がリリースされましたね。  \r\n[Nuxt.js 2.0: Webpack 4, ESM Modules, create-nuxt-app and more!](https://medium.com/@nuxt_js/nuxt-js-2-0-webpack-4-esm-modules-create-nuxt-app-and-more-6936ce80d94c)  \r\n  \r\nNuxt.js を触る機会があったので、インストールしたメモです。  \r\n  \r\n## Node.js の環境構築\r\n\r\nNode.js もバージョン管理すると良さそうです。  \r\n私は Ruby の方で rbenv を使用しているので、 ndenv を選択しました。\r\n\r\n- [GitHub - riywo/ndenv: node.js version manager based on rbenv](https://github.com/riywo/ndenv)\r\n- [ndenv を使用して複数のバージョンの Node.js を管理する方法と基本的な使い方](https://qiita.com/noraworld/items/462689e108c10102d51f)\r\n\r\n## Yarn のインストール\r\n\r\n- [Yarn](https://yarnpkg.com/lang/ja/)\r\n- [yarnを使ってみた](https://qiita.com/masterkey1009/items/50f95b1187646a7db385)\r\n\r\n## Vue CLI のインストール\r\n\r\n- [Vue CLI 3](https://cli.vuejs.org/)\r\n- [Vue CLI 3.0 が来ました！ — Vue.js](https://jp.vuejs.org/2018/08/11/vue-cli-3-0-is-here/)\r\n\r\n## Nuxt.js のインストール\r\n\r\n- [インストール - Nuxt.js](https://ja.nuxtjs.org/guide/installation/)\r\n\r\n## コンパイルエラー\r\n\r\nさて、ローカルで立ち上げようと思った時、コンパイルエラーが発生しました。  \r\n\r\n```\r\nModule build failed: TypeError: Cannot read property \'eslint\' of undefined\r\n    at Object.module.exports\r\n```\r\nとりあえずよく分からなかったのでググったら、記事にしてくださった方がいらっしゃいました。  \r\n[Nuxt.jsプロジェクトをv2(nuxt-edge)にアップグレードした際にハマったところ](https://qiita.com/sho_yamane/items/ce0d40450d373152eb18)\r\n\r\n> 冒頭の記事にも記載がありますが、isClientとisDevが廃止になったのが原因です。\r\n\r\nこれで、 `yarn run dev` 、 `npm run dev` を実行すればローカルで確認ができました。','',1,'2018-10-19 08:00:00','2018-10-18 07:54:27','2019-01-20 22:52:47'),(42,1,4,'PHP-FPM の設定値について調べてみる','## はじめに\r\n\r\n[FastCGI Process Manager (FPM)](http://php.net/manual/ja/install.fpm.php)  \r\nPHP-FPM は PHP のアプリケーションサーバーです。  \r\n普段意識せずに使用していますが、改めて調べてみようと思います。  \r\n  \r\nリファレンスはこの辺ですね。  \r\n[設定](http://php.net/manual/ja/install.fpm.configuration.php)  \r\n今回は自分なりにグループ分けしてメモしていきます。\r\n\r\n## 基本設定\r\n\r\n### user\r\n\r\n- string\r\n- FPM プロセスの unix ユーザー。\r\n- このオプションは必須。\r\n\r\n### group\r\n\r\n- string\r\n- FPM プロセスの unix グループ。\r\n- 未設定の場合は、デフォルトのユーザーのグループを使う。\r\n\r\n### chroot\r\n\r\n- string\r\n- このディレクトリに chroot して開始位置とする。\r\n- この値は絶対パスで指定しなければならない。\r\n- この値を省略した場合は、chroot を使わない。\r\n\r\nchdir string\r\nこのディレクトリに chdir して開始位置とします。この値は絶対パスで指定しなければなりません。 デフォルト値: カレントディレクトリ、あるいは chroot した場合は /\r\n\r\n### prefix\r\n\r\n- string\r\n- prefix の指定\r\n\r\n## ログ系\r\n\r\n### error_log\r\n\r\n- string  \r\n- エラーログファイルへのパス。\r\n- デフォルト値: #INSTALL_PREFIX#/log/php-fpm.log \"syslog\"\r\n- デフォルトのままだと、ログをローカルファイルに書き出すのではなく、syslogd に送信します。\r\n\r\n### log_level\r\n\r\n- string\r\n- エラーログのレベル。\r\n- 使用可能な値: alert, error, warning, notice, debug\r\n- デフォルト値: notice\r\n\r\n### access.log\r\n\r\n- string\r\n- アクセスログのファイルを指定。\r\n- デフォルト値: 未設定\r\n\r\n### access.format\r\n\r\n- string\r\n- アクセスログの形式。\r\n- デフォルト値: \"%R - %u %t \\\"%m %r\\\" %s\"\r\n\r\n### syslog.facility\r\n\r\n- string\r\n- メッセージを記録するプログラムの種別。\r\n- デフォルト値: daemon\r\n\r\n### syslog.ident\r\n\r\n- string\r\n- すべてのメッセージの先頭に付加する内容。\r\n- 複数の FPM インスタンスを同一サーバー上で実行する場合には、 デフォルト値を変更すれば区別できるようになる。\r\n- デフォルト値: php-fpm\r\n\r\n## slow request log 系\r\n\r\n### request_terminate_timeout\r\n\r\n- mixed\r\n- 単一のリクエストを処理する際のタイムアウト。\r\n- この時間を過ぎるとワーカープロセスが kill される。\r\nこのオプションは、\'max_execution_time\' オプションが何らかの理由でスクリプトの実行を止められなかった場合に使われる。\r\n- 値 \'0\' は \'Off\' を意味する。\r\n- 使用可能な単位: s(秒)(デフォルト), m(分), h(時間) あるいは d(日)\r\n- デフォルト値: 0\r\n\r\n### request_slowlog_timeout\r\n\r\n- mixed\r\n- 単一のリクエストを処理する際のタイムアウト。\r\n- この時間を過ぎると PHP のバックトレースが \'slowlog\' ファイルに出力されます。\r\n- 値 \'0\' は \'Off\' を意味します。 使用可能な単位: s(秒)(デフォルト), m(分), h(時間) あるいは d(日)\r\n- デフォルト値: 0\r\n\r\n### slowlog\r\n\r\n- string\r\n- 遅いリクエストを記録するログファイル。\r\n- デフォルト値: #INSTALL_PREFIX#/log/php-fpm.log.slow\r\n\r\n## プロセス管理\r\n\r\n### pid\r\n\r\n- string\r\n- PID ファイルへのパス。\r\n- デフォルト値: なし\r\n\r\n### emergency_restart_interval\r\n\r\n- mixed\r\n- emergency_restart_interval が緩やかな再起動をいつ実行するかを決めるときに使う間隔。\r\n- これは、アクセラレータの共有メモリが壊れてしまったときの回避策として有用。\r\n- 使用可能な単位: s(秒), m(分), h(時間) あるいは d(日)\r\n- デフォルトの単位: 秒、デフォルト値: 0 (オフ)\r\n\r\n### emergency_restart_threshold\r\n\r\n- int\r\n- emergency_restart_interval で設定された間隔で この数以上の子プロセスが SIGSEGV あるいは SIGBUS で終了した場合に FPM は再起動する。\r\n- 0 は \'オフ\' を意味します。\r\n- デフォルト値: 0 (オフ)\r\n\r\n### process_control_timeout\r\n\r\n- mixed\r\n- 子プロセスが、マスタからのシグナルの反応を待つ最大時間。\r\n- 使用可能な単位: s(秒), m(分), h(時間) あるいは d(日)\r\n- デフォルトの単位: 秒、デフォルト値: 0\r\n\r\n### process.max\r\n\r\n- int\r\n- FPM がフォークするプロセスの最大数。\r\n- 多数のプール内で動的な PM を使う場合に、全体のプロセス数を制御するために用意されたもの。\r\n- 気をつけて使うようにしましょう。\r\n- デフォルト値: 0\r\n\r\n### process.priority\r\n\r\n- int\r\n- マスタープロセスに適用する nice(2) 値。\r\n- -19 (優先度最高) から 20 (優先度最低) までの値を指定する。\r\n- デフォルト値: 未設定\r\n\r\n### daemonize\r\n\r\n- boolean\r\n- FPM をバックグラウンドに送る。\'no\' にすると デバッグ用に FPM をフォアグラウンドに置き続ける。\r\n- デフォルト値: yes\r\n\r\n### rlimit_files\r\n\r\n- int\r\n- マスタープロセス用の、オープン時のファイル記述子の rlimit。\r\n- デフォルト値: システムで定義されている値\r\n\r\n### rlimit_core\r\n\r\n- int\r\n- マスタープロセス用の、最大コアサイズの rlimit。\r\n- デフォルト値: 0\r\n\r\n### events.mechanism\r\n\r\n- string\r\n- FPM が利用するイベントメカニズム。\r\n- select、pool、epoll、kqueue (BSD)、port (Solaris) が利用可能。\r\n- デフォルト値: 未設定 (自動検出)\r\n\r\n### systemd_interval\r\n\r\n- int\r\n- FPM を systemd 統合込みでビルドした場合に、 ヘルスチェックのレポートを systemd に送る間隔 (秒単位)。\r\n- 0 にすると、無効化されます。\r\n- デフォルト値: 10\r\n\r\n## プロセスプール\r\n\r\n### listen\r\n\r\n- string\r\n- FastCGI リクエストを受け入れるアドレス。\r\n- \'ip.add.re.ss:port\', \'port\', \'/path/to/unix/socket\' 形式の構文が使える。\r\n- このオプションは、各プール単位で必須となる。\r\n\r\n### listen.backlog\r\n\r\n- int\r\n- listen(2) のバックログを設定する。\r\n- \'-1\' は無制限を意味します。\r\n- デフォルト値: -1\r\n\r\n### listen.allowed_clients\r\n\r\n- string\r\n- 接続を許可されている FastCGI クライアントの ipv4 アドレス一覧。\r\n- オリジナル版 PHP FastCGI (5.2.2+) における環境変数 FCGI_WEB_SERVER_ADDRS と同じ。\r\n- tcp でリスンするソケットに対してのみ意味をなす。\r\n- 書くアドレスはカンマ区切りで指定する。\r\n- この値を空にしておくと、任意の ip アドレスからの接続を許可する。\r\n- デフォルト値: 任意の ip アドレスを許可。\r\n- 5.5.20 および 5.6.4 以降は、IPv6 アドレスも指定できるようになった。\r\n\r\n### listen.owner\r\n\r\n- string\r\n- unix ソケットを使う場合に、そのパーミッションを設定する。\r\n- Linux では、読み書きアクセス権限を設定しないとウェブサーバーからの接続を受け付けることができない。\r\n- 多くの BSD 由来のシステムでは、パーミッションにかかわらず接続を受け付けることができる。\r\n- デフォルト値: ユーザーとグループは実行しているユーザーと同じ、モードは 0660\r\n\r\n### listen.group\r\n\r\n- string\r\n- listen.owner を参照。\r\n\r\n### listen.mode\r\n\r\n- string\r\n- listen.owner を参照。\r\n\r\n### listen.acl_users\r\n\r\n- string\r\n- POSIX の Access Control List をサポートしている場合は、このオプションでそれを指定できる。\r\n- これを設定した場合は、listen.owner および listen.group は無視される。\r\n- 値には、ユーザー名をカンマ区切りのリスト形式で指定する。\r\n- PHP 5.6.5 以降で利用可能。\r\n\r\n### listen.acl_groups\r\n\r\n- string\r\n- listen.acl_users を参照。\r\n- グループ名を、カンマ区切りのリスト形式で指定する。\r\n- PHP 5.6.5 以降で利用可能です。\r\n\r\n### rlimit_files\r\n\r\n- int\r\n- このプール内の子プロセス用の、オープン時のファイル記述子の rlimit。\r\n- デフォルト値: システムで定義されている値。\r\n\r\n### rlimit_core\r\n\r\n- int\r\n- このプール内の子プロセス用の、最大コアサイズの rlimit。\r\n- 使用可能な値: \'unlimited\' あるいは 0 以上の整数値。\r\n- デフォルト値: システムで定義されている値\r\n\r\n## 子プロセス管理\r\n\r\n### pm\r\n\r\n- string\r\n- プロセスマネージャが子プロセスの数を制御する方法を選択する。\r\n- 使用可能な値: static, ondemand, dynamic\r\n- このオプションは必須。\r\n\r\n#### static\r\n\r\n- 子プロセスの数は固定 (pm.max_children)。\r\n\r\n#### ondemand\r\n\r\n- プロセスを必要に応じて立ち上げる。\r\n- dynamic とは対照的に、リクエストされると pm.start_servers で指定しただけサービスを開始する。\r\n\r\n#### dynamic\r\n\r\n- 子プロセスの数は、 pm.max_children、pm.start_servers、 pm.min_spare_servers、pm.max_spare_servers の内容に基づいて動的に設定される。\r\n\r\n### pm.max_children\r\n\r\n- int\r\n- pm が static の場合は作成される子プロセスの数、 pm が dynamic の場合は作成される子プロセスの最大数。\r\n- このオプションは必須。\r\n- このオプションは、同時に処理できるリクエストの最大数を設定する。\r\n- mpm_prefork での ApacheMaxClients ディレクティブや、オリジナル版の PHP FastCGI における環境変数 PHP_FCGI_CHILDREN と同じ。\r\n\r\n### pm.start_servers\r\n\r\n- int\r\n- 起動時に作成される子プロセスの数。\r\n- pm が dynamic の場合にのみ使います。\r\n- デフォルト値: min_spare_servers + (max_spare_servers - min_spare_servers) / 2\r\n\r\n### pm.min_spare_servers\r\n\r\n- int\r\n- アイドル状態のサーバープロセス数の最小値。\r\n- pm が dynamic の場合にのみ使う。\r\n- また、この場合には必須。\r\n\r\n### pm.max_spare_servers\r\n\r\n- int\r\n- アイドル状態のサーバープロセス数の最大値。\r\n- pm が dynamic の場合にのみ使います。\r\n- また、この場合には必須となります。\r\n\r\n### pm.process_idle_timeout\r\n\r\n- mixed\r\n- アイドル状態のプロセスが終了される秒数\r\n- pm が ondemand の場合にのみ使う。\r\n- 秒数 after which an idle process will be killed. Used only when pm is set to ondemand.\r\n- 使用可能な単位: s(秒)(デフォルト)、m(分)、h(時間)、または d(日)。\r\n- デフォルト値: 10 秒\r\n\r\n### pm.max_requests\r\n\r\n- int\r\n- 各子プロセスが、再起動するまでに実行するリクエスト数。\r\n- サードパーティのライブラリにおけるメモリリークの回避策として便利。\r\n- 再起動せずにずっとリクエストを処理させる場合は \'0\' を指定します。\r\n- PHP_FCGI_MAX_REQUESTS と同じ。\r\n- デフォルト値: 0\r\n\r\n### catch_workers_output\r\n\r\n- boolean\r\n- ワーカーの標準出力および標準エラー出力を本体のエラーログにリダイレクトする。\r\n- 省略した場合は、FastCGI の仕様にしたがって標準出力および標準エラー出力を /dev/null にリダイレクトする。\r\n- デフォルト値: no\r\n\r\n### clear_env\r\n\r\n- boolean\r\n- FPM ワーカー内の環境をクリアする。\r\n- 任意の環境変数が FPM ワーカープロセスに到達してしまうことを防ぐために、 ワーカー内の環境をいったんクリアしてから、このプールの設定で指定された環境変数を追加する。\r\n- PHP 5.4.27、PHP 5.5.11、PHP 5.6.0 以降で利用可能。\r\n- デフォルト値: Yes\r\n\r\n### security.limit_extensions\r\n\r\n- string\r\n- FPM がパース可能なメインスクリプトを拡張子で制限する。\r\n- サーバー側の設定ミスによる被害を抑えることができる。\r\n- FPM には拡張子 .php だけをパースさせるようにしておけば、悪意のあるユーザーがその他の拡張子で php のコードを実行させようとする試みを防ぐことができる。\r\n- デフォルト値: .php .phar\r\n\r\n### process.priority\r\n\r\n- int\r\n- ワーカープロセスに適用するnice（2）優先度を指定する（設定されている場合のみ）。\r\n- 値は、-19（最高の優先順位）から20（低い優先順位）まで指定できる。\r\n- デフォルト値: 未設定\r\n\r\n## モニタリング系\r\n\r\n### pm.status_path\r\n\r\n- string\r\n- FPM の情報ページを見るための URI。\r\n- この値を省略した場合は、どの URI も情報ページとは見なされない。\r\n- デフォルト値: なし\r\n\r\n### ping.path\r\n\r\n- string\r\n- FPM のモニタリングページをコールするための ping URI。\r\n- この値を省略した場合は、どの URI も ping ページとは見なされない。\r\n- これを使うと、 FPM が生きていて応答するかどうかを外部から確かめることができる。\r\n- この値の最初はスラッシュ (/) で始めなければならないことに注意。\r\n\r\n### ping.response\r\n\r\n- string\r\n- このディレクティブを使うと、ping リクエストに対するレスポンスをカスタマイズすることができる。\r\n- このレスポンスは text/plain 形式となり、レスポンスコード 200 で返される。\r\n- デフォルト値: pong\r\n\r\n## さいごに\r\n\r\n単にコピペしただけな感じになってしまいました。  \r\n検証環境を用意して試してみたいと思います。','',1,'2018-10-23 08:00:00','2018-10-21 15:48:25','2018-10-21 20:53:09'),(43,1,0,'下町ロケットを読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4094065369/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4094065369&linkCode=as2&tag=naoki850c-22&linkId=f91ee3c1bbbdaf66b9e4152e615451d6\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4094065369&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4094065369\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\n## はじめに\r\n\r\n下町ロケット、面白いですよね。  \r\n昔、1巻だけ読んだのですが、先月から始まったドラマを見て続編を読むことにしました。  \r\n[日曜劇場『下町ロケット』｜TBSテレビ](https://www.tbs.co.jp/shitamachi_rocket/)  \r\n（ホモデウスの途中で寄り道したのは内緒です。）  \r\n  \r\n今回読んだのは、2章に当たる「ガウディ計画」です。\r\n\r\n## ざっくり感想\r\n\r\n池井戸潤さんの作品は、良い意味で分かりやすい流れなので、非常に読みやすいです。  \r\nそれこそ仕事の帰りに購入して、寝る前には読み終わってました。  \r\n  \r\n今回の戦場は医療機器業界のようです。  \r\nまぁ嫌な登場人物が多いですね。  \r\n欲望に取り憑かれて、手段と目的が入れ替わってしまったのかなと思います。  \r\n  \r\n昨今は医療業界のニュースが増えているあたり、今本のようなことが起こればすぐ問題になりそうですね。  \r\n物語の逆転劇は痛快です。\r\n\r\n## 池井戸潤さんの作品で\r\n\r\n個人ブログなので好きなことを書くと、私は池井戸潤さんの作品では[ルーズヴェルト・ゲーム](https://amzn.to/2Rc8kvF)も好きです。  \r\nドラマにもなりましたね。  \r\n  \r\nただ、ドラマで一つ言わせていただくなら、終盤に女株主が主人公のピッチャーを見て、「あの子は別格ね」というシーンはもっと強調して欲しかったです！  \r\n今まで日陰で過ごした主人公を認めてくれたシーンなので、とても思い入れがありました。  \r\n  \r\nまぁ、という独り言です。\r\n\r\n## さいごに\r\n\r\nこのまま続く「[ゴースト](https://amzn.to/2EHRXpa)」、「[ヤタガラス](https://amzn.to/2Ri23i7)」を読むか、ドラマを見てからにするかという幸せな悩みを持ち、日々本屋の前を通っています。  \r\nとりあえず一旦置いてしまったホモデウスを読みたいと思います。','',1,'2018-10-26 08:00:00','2018-10-25 23:20:05','2018-10-25 23:20:05'),(44,1,0,'このブログについてLTしてきた','仲間内のLT会でこのブログについて発表してきました。  \r\n発表スライドはこちらです。  \r\n[自作ブログの話 - Speaker Deck](https://speakerdeck.com/naoki85/zi-zuo-burogufalsehua)\r\n  \r\n主にはAWSのインフラ周りだったり、使っているフレームワークの話をしました。  \r\n完全に自己満足な感じでした。（あんまりサーバーサイドの人はいなかった。）\r\n  \r\nこのスライドを作成していてよかったのは、AWSの無料期間終わっていたことに気づき、インスタンスタイプを下げるきっかけをくれたことですねw\r\n  \r\n結構楽しいものなので、何か作るものを探している人、基本的なことの学習が終わった人にはブログを通来るのはお勧めだと思っています。','',1,'2018-10-30 08:00:00','2018-10-29 22:58:53','2018-10-29 22:58:53'),(45,1,0,'ホモ・デウス下巻を読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4309227376/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4309227376&linkCode=as2&tag=naoki850c-22&linkId=d801e11b267caf76121dc311db594779\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4309227376&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4309227376\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\n## はじめに\r\n\r\n前回、 [ホモ・デウス上巻を読みました](https://blog.bookrecorder.net/posts/40) の記事を書きました。  \r\n今回は下巻を読んだのでメモを残そうと思います。\r\n\r\n## 読んでいて気づいたことメモ\r\n\r\n- 貪欲は成長を促す\r\n- 必要な感性なしでは、物事を経験できない。そして、経験を積んでいかない限り、感性を育むことはできない。\r\n- 民主主義での成長は限界がきている。かといって共産主義になるわけではなく、データ主義になっていく。\r\n\r\n読んでいると、特に先進的な技術に近しい人は思うところが多いのではないでしょうか。  \r\n私としては、個性を主張するためのデータが、人を選抜、平均化するように使われていくように感じています。  \r\n  \r\n昨今は、ヨーロッパで策定されたGDPRを始め、データの個人保護に注目が集まっているように思います。  \r\n[EU一般データ保護規則 - Wikipedia](https://ja.wikipedia.org/wiki/EU%E4%B8%80%E8%88%AC%E3%83%87%E3%83%BC%E3%82%BF%E4%BF%9D%E8%AD%B7%E8%A6%8F%E5%89%87)  \r\n遅かれ早かれ、日本にも波がきそうなので、個人情報の扱いにはアンテナを貼っておいた方が良さそうです。\r\n\r\n## さいごに\r\n\r\n結構読み応えがある本でした。  \r\nなんとなく、ニュースなどの見方が変わった気がします。  \r\n  \r\nよく考えたら最近あまり技術書を読めていないので、そちらの本も読んでいきたいと思います。','',1,'2018-11-01 08:00:00','2018-10-31 23:55:10','2018-10-31 23:55:10'),(46,1,1,'Nuxt.js の Vuex で action を使う','## はじめに\r\n\r\nNuxt.js はまだまだ勉強中の私。  \r\nVue.js は、 `.vue` ファイルがモデルとビューモデルを兼任しているようで非常にとっつきやすいのですが、やはりモデルを分離させたいと考えました。  \r\n  \r\n状態管理には Vuex を使用するのが良さそうなので、Vuex を擬似的なモデルにしようと考えました。  \r\n  \r\nNuxt.js のドキュメントを見ると、 `state` と `mutation` のことは記載があったのですが、 `action` がありませんでした。  \r\n[Vuex ストア - Nuxt.js](https://ja.nuxtjs.org/guide/vuex-store/)  \r\n`mutations` でやらせるには大きすぎる処理を `action` に持たせるために調べたメモです。\r\n\r\n## 参考資料\r\n\r\n- [Vuex とは何か？ | Vuex](https://vuex.vuejs.org/ja/)\r\n- [Nuxt.jsでVuexを使ってみる #nuxtjs #vuejs - ジムには乗りたい](http://su-kun1899.hatenablog.com/entry/2018/01/30/230000)\r\n\r\n## 使い方\r\n\r\n上記の記事に記載がございました。  \r\n`store` で、 `actions` を定義しておけば、 `.vue` の中で `dispatch` でよべるようです。\r\n\r\n```js\r\n// store/item.js\r\n\r\n// この store が持つ値\r\nexport const state = () => ({\r\n  name: \'\'\r\n})\r\n\r\n// 実際に state を書き換える処理\r\nexport const mutations = {\r\n  set(state, value) {\r\n    state.name = value\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  setName(context, value) {\r\n    // ... なんか色々名前を決める処理\r\n    \r\n    context.commit(\'set\', value)\r\n  }\r\n}\r\n```\r\n\r\n`.vue` ファイルから呼ぶ場合はこちらです。\r\n\r\n```js\r\nthis.$store.dispatch(\'item/set\', \'hogehoge\')\r\n```\r\n\r\n## ちなみに\r\n\r\nVuex に値を任せるために、 `computed` を使用して値を定義すると良さそうなのかな。\r\n\r\n```js\r\ncomputed: {\r\n  item() { return this.$store.state.item }\r\n},\r\n```\r\n\r\n## さいごに\r\n\r\nそんなにページ数が多くない SPA であっても、 `.vue` ファイルにごちゃごちゃ書くと拡張性が低くなりそうだなと感じています。  \r\nstore を使用して値の書き換えは、 `mutation` の中で、参照する場合は store を見に行くようにすれば、少しは規則性が出るかなと考えています。  \r\n  \r\n実際にその考えで実装を進めて見たのですが、思ったほどうまく実装できなかったので、もう少し自分の中で落とし込む必要がありそうです。  \r\nウチの Nuxt.js のアーキテクチャはこうだよ！とか教えてくれると嬉しい。。','',1,'2018-11-08 08:00:00','2018-11-07 20:52:04','2019-01-20 22:52:35'),(47,1,4,'PHP-FPM でプロセスプールごとにエラーログを出力する','## はじめに\r\n\r\nPHP-FPM の勉強をしていますが、エラーログを出力しようと思ったところ、空のファイルを作成しておかないとダメなようです。  \r\n上記を踏まえて、設定の方法などを記載したいと思います。\r\n\r\n## 共通ファイル\r\nPHP-FPM は共通の設定ファイルと、プロセスごとの設定ファイルがあります。  \r\nプロセスごとというと厄介ですが、PHPアプリケーションごとでしょうか。  \r\n  \r\n私の環境は PHP 7 だったので、 `/etc/php7/php-fpm.conf` になります。  \r\n  \r\n共通ファイルにも、 `error_log` の設定箇所がありますが、今回はプロセスごとにしたいので、デフォルトのままにしておきます。  \r\nデフォルトは特に出力されません。\r\n\r\n```\r\n; Error log file\r\n; If it\'s set to \"syslog\", log is sent to syslogd instead of being written\r\n; into a local file.\r\n; Note: the default prefix is /var\r\n; Default Value: log/php7/error.log\r\n;error_log = log/php7/error.log\r\n```\r\nプロセスごとの設定ファイルは、 `php-fpm.conf` の最後の方に読み込む記載があります。\r\n\r\n```\r\ninclude=/etc/php7/php-fpm.d/*.conf\r\n```\r\n  \r\n## プロセスごとの設定ファイル\r\n\r\n同ディレクトリ内に、 `php-fpm.d` というディレクトリがあると思うので、その中にプロセス用の設定を記載します。  \r\nファイル先頭にプールの名前を付けておけば認識してくれるようです。\r\n\r\n```\r\n[www]\r\n```\r\n名前もこれに合わせて、 `www.conf` とかにします。  \r\n（おそらく、はじめにデフォルトのファイルが作成されているはず）  \r\n  \r\nファイル末の、 `error_log` に関する設定を有効にします。\r\n\r\n```\r\nphp_admin_value[error_log] = /var/log/php7/$pool.error.log\r\nphp_admin_flag[log_errors] = on\r\n```\r\nまた、子プロセスごとの出力を有効にするため、 `catch_worker_output` をオンにしておきます。\r\n\r\n```\r\n; Redirect worker stdout and stderr into main error log. If not set, stdout and\r\n; stderr will be redirected to /dev/null according to FastCGI specs.\r\n; Note: on highloaded environement, this can cause some delay in the page\r\n; process time (several ms).\r\n; Default Value: no\r\ncatch_workers_output = yes\r\n```\r\n\r\n\r\n## 先にファイルを作成しておく\r\n\r\nこれでうまく行くかな、と思ったら、どうもエラーが出力されませんでした。  \r\nちょっと調べてみると、下記の記事を見つけました。  \r\n  \r\n[Ubuntu 上で動く PHP-FPM でエラーログを出力する - Qiita](https://qiita.com/renny1398/items/ee1d03f43157e315298a)  \r\n  \r\nどうやらパーミッションの絡みで、先にファイルを作っておいた方が良さそうです。  \r\nそのため、出力したいログファイルを作成します。  \r\nこれで出力することができました。  \r\n  \r\n## さいごに\r\nプロセスごとに設定ファイルを作成しておけば、その他のログなども分割できるので管理しやすくなります。  \r\nPHP-FPM については引き続き調べたいと思います。','',1,'2018-11-14 08:00:00','2018-11-13 07:37:07','2018-11-13 07:37:07'),(48,1,7,'Apache Bench を使ってみた','自分のWebサイトに複数回のアクセスをしたかったので、Apache に標準で付いている計測ツールの Apache Bench を使用してみました。  \r\n使用していて詰まったところもあるのでまとめておこうと思います。  \r\n[ab - Apache HTTP server benchmarking tool - Apache HTTP Server Version 2.4](https://httpd.apache.org/docs/2.4/programs/ab.html)  \r\n  \r\nなお、 `ab` のバージョンは 2.3 です。\r\n## 基本的な使い方\r\nオプション `-c` で、同時発行するリクエスト数を、 `-n` でトータルのリクエスト数を設定できます。  \r\nこんな感じですね。\r\n```\r\n$ ab -c 100 -n 1000 http://127.0.0.1/\r\n```\r\n他にも Basic 認証やプロキシ用のオプションもあるようです。  \r\nこちらの記事に詳しくまとめられておりました。  \r\n[Apache Benchでサクッと性能テスト - Qiita](https://qiita.com/flexfirm/items/ac5a2f53cfa933a37192)\r\n## リクエストが失敗する\r\n何度か試していると、 `ab` コマンドによるリクエストが失敗するようになりました。\r\n```\r\n$ ab -c 100 -n 1000 http://127.0.0.1/\r\nThis is ApacheBench, Version 2.3 <$Revision: 1826891 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\nBenchmarking 127.0.0.1 (be patient)\r\napr_socket_recv: Connection reset by peer (54)\r\n```\r\nググっていると、Apache Bench をアップデートすれば良さそうなので、下記の記事を参考に実施しました。  \r\n[Macに最新のabコマンドをインストールする | つかびーの技術日記](http://tech-blog.tsukaby.com/archives/1051)  \r\n  \r\n途中の `./configure` でエラーになりましたが、最新の `apr` に置き換えれば良さそうです。  \r\n[Apache 2.4 で configure 実行時に「configure: error: APR not found」と怒られる - ablog](http://d.hatena.ne.jp/yohei-a/20120809/1344489131)\r\n```\r\n$ ./configure\r\nchecking for chosen layout... Apache\r\nchecking for working mkdir -p... yes\r\nchecking for grep that handles long lines and -e... /usr/bin/grep\r\nchecking for egrep... /usr/bin/grep -E\r\nchecking build system type... x86_64-apple-darwin18.2.0\r\nchecking host system type... x86_64-apple-darwin18.2.0\r\nchecking target system type... x86_64-apple-darwin18.2.0\r\nconfigure: \r\nconfigure: Configuring Apache Portable Runtime library...\r\nconfigure: \r\nchecking for APR... no\r\nconfigure: error: APR not found.  Please read the documentation.\r\n```\r\n## 置き換えたと思ったら\r\nさて、バージョンを確認してみると、先ほどと変わっておりませんでした。  \r\nつまり、他に失敗する要因がありそうです。\r\n## 推測\r\n同時接続数のオプション `-c` の数を 100 から 10 に減らしたところ、実行できるようになりました。  \r\n同時接続数を増やすとコケる感じなのでしょうか？  \r\n（何も考えずに 100 を設定した私にも問題がありますが。。）  \r\n  \r\n一旦は同時接続数はあまり増やさずに実行してみたいと思います。','',1,'2018-11-21 08:00:00','2018-11-20 22:46:28','2019-01-20 23:49:13'),(49,1,4,'PHP-FPM のプロセスマネージャーを試してみた','## はじめに\r\n\r\n[PHP: 設定 - Manual](http://php.net/manual/ja/install.fpm.configuration.php)  \r\n  \r\nPHP-FPM のプロセスマネージャーは3種類あります。  \r\nそれぞれを試してみたので、そのメモを残したいと思います。\r\n\r\n## static\r\n\r\n- プロセスの数は固定値になる。\r\n- pm.max_children ディレクティブの値によって決まる。\r\n\r\n### 実際に試してみて\r\n\r\n- active なプロセスと idle (待機) プロセスを合わせて、 max_children 分生成される。\r\n- すでに生成されているプロセスを使用するので、メモリの振れ幅は小さそう。\r\n  \r\n## dynamic\r\n\r\n- プロセスの数は設定に依る。\r\n- 最大値は max_children 。\r\n- start_servers で初期プロセス数を決める。\r\n- min_spare_servers で待機プロセスの最小値。\r\n- max_spare_servers で待機プロセスの最大値。\r\n- start_servers は min_spare_servers 以上、 max_spare_servers 以下にする。\r\n\r\n### 実際に試してみて\r\n\r\n- リクエスト時にプロセスを使用 or 生成する。\r\n- active なプロセスは終了したら、待機プロセスになる。\r\n- 待機プロセスは spare_servers の範囲で管理される。\r\n\r\n## ondemand\r\n\r\n- 新しいリクエストが来た時にプロセスを生成する。\r\n- start_servers で設定した数だけプロセスを生成する。\r\n- 上限値は max_children で設定する。\r\n\r\n### 実際に試してみて\r\n\r\n- 待機プロセスはないので、都度プロセスを生成する。\r\n- スパイクした時は、プロセスの生成から始めるので、そのオーバーヘッドはありそう。\r\n- かつかつなサーバーであれば検討しても良さそう。\r\n  \r\n## さいごに\r\n\r\n今回、[PHP Conference 2018](http://phpcon.php.gr.jp/2018/) で PHP-FPM について発表することもあり、基本的な部分を復習してみました。  \r\n当日はもう少し面白い感じで発表したいものです（希望）。','',1,'2018-11-28 08:00:00','2018-11-26 21:00:43','2018-11-26 21:00:43'),(50,1,7,'Real World HTTP を読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4873118042/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4873118042&linkCode=as2&tag=naoki850c-22&linkId=2f0832d512b94dbffb202cba2ca930e7\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4873118042&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4873118042\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\n## はじめに\r\n\r\n去年購入した本ですが、本棚を整理していたら出てきたので、再読しました。  \r\n深い部分は割愛されてますが、Web系でよく聞く用語などを解説してくれるので、広く知識を得たい方にオススメです。\r\n\r\n## 本の構成\r\n\r\nHTTP のバージョンごとに、実装や経緯の解説をした後、サンプルコードで試してみるという流れです。  \r\nサンプルコードは Go で書かれていますが、コメントもあるので読みやすいと思います。  \r\n  \r\nGo は勉強したことがないのですが、 Go を勉強している方にも良いのではないでしょうか？  \r\n  \r\n私は電車の中で基本読んでたこともあり、サンプルコードまでは試してないですw  \r\n（あー、なるほど、全て理解したわ的な感じで知ったかしてます）  \r\n\r\n<img src=\"http://d29xhtkvbwm2ne.cloudfront.net/posts/1543410082_kk_151112popu04.jpg\" width=\"50%\">\r\n\r\n## ちょろっと感想\r\n\r\n最後の方に REST API の解説がありますが、この本を読むと、HTTP のセマンティクスに寄せた REST がやっぱり分かりやすいなと思います。  \r\n[RPC](https://ja.wikipedia.org/wiki/RPC) や、最近だと [GraphQL](https://www.webprofessional.jp/rest-2-0-graphql/) もよく聞きますが、使い勝手はどうなんでしょう。。  \r\n（使ったことも実装したこともないので単純な興味）  \r\n  \r\n先日少しチャットを作成しようとしたこともあり、少し双方向通信に興味があるので、そういった本も次は読もうかと思います。','',1,'2018-12-03 08:00:00','2018-11-28 22:01:51','2019-01-20 23:48:59'),(51,1,4,'Zabbix で Nginx + PHP を監視するサンプルを作ってみた','# はじめに\r\n\r\nNginx + PHP-FPM で色々試して見たかったのですが、わざわざサーバーを借りるのも何だな、と思いました。  \r\nちょうど　Docker コンテナに Zabbix agent を入れて監視することができるようなので、それを使ってみることにしました。\r\n\r\n## 参考資料\r\n\r\n- [Zabbix - Docker Hub](https://hub.docker.com/u/zabbix/)\r\n- [Zabbix公式コンテナとdocker-compose使って検証環境を簡単に作成削除](https://yomon.hatenablog.com/entry/2018/03/29/Zabbix%E5%85%AC%E5%BC%8F%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A8docker-compose%E4%BD%BF%E3%81%A3%E3%81%A6%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83%E3%82%92%E7%B0%A1%E5%8D%98%E3%81%AB%E4%BD%9C%E6%88%90)\r\n- [https://github.com/tanrakukairo/zabbix_template_php-fpm](https://github.com/tanrakukairo/zabbix_template_php-fpm)\r\n\r\n# 作成したもの\r\n\r\nGithub で公開しています。  \r\n[https://github.com/naoki85/monitor_php_with_zabbix](https://github.com/naoki85/monitor_php_with_zabbix)  \r\n  \r\nAlpine Linux 用のイメージを使用していますが、Docker 起動時に Nginx と PHP-FPM を起動するコマンド時にうまく行かないのが悩みです。  \r\n実行時のスクリプト指定が悪いのかと勘ぐっていますがまだ解決には至っていません。。  \r\nとりあえずは起動時に毎回 restart することで対応しています。\r\n\r\n# さいごに\r\n\r\n今年の PHP Conference で発表する内容用に作成しました。  \r\n実際に試したことは当日発表しようと思うので、よろしくお願いします。','',1,'2018-12-12 08:00:00','2018-12-09 12:01:26','2018-12-09 12:01:27'),(52,1,0,'カンファレンスで登壇して良かったことと反省','先日開催された、 PHP カンファレンス 2018 にて参加、および登壇させていただきました。  \r\n<a href=\"http://phpcon.php.gr.jp/2018/\"><div class=\"siimple-grid-row ogp-card\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4\"><img src=\"http://phpcon.php.gr.jp/2018/dist/img/open_graph_image.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8\"><div class=\"siimple-card-\"><div class=\"siimple-card-title\">PHP Conference 2018 - #phpcon2018</div>2018年のPHPカンファレンスは、12月15日(土)に大田区産業プラザ（PiO)にて開催いたします。</div></div></div></a>  \r\n（あ、地味にこのブログで OGP を表示させる機能を追加しました。  そのことは別の記事にしたいと思います。 ） \r\n  \r\n登壇すること自体は初めてだったので、良かったことと反省点を残し、次回につなげたいと思います。  \r\nなお、発表資料はこちらです。  \r\n<a href=\"https://speakerdeck.com/naoki85/php-fpm-womotutoli-jie-siyou\"><div class=\"siimple-grid-row ogp-card\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4\"><img src=\"https://speakerd.s3.amazonaws.com/presentations/ece2b26a90d247bebf6e778a8a246300/slide_0.jpg?481653\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8\"><div class=\"siimple-card-\"><div class=\"siimple-card-title\">PHP-FPM をもっと理解しよう</div>PHPアプリケーションが動いているサーバーがメモリ不足でアラートがあがる。どうやらphp-fpmがメモリを消費しているようだ。その時は付け焼き刃でphp-fpmの設定値を調整して対応したが、改めてちゃんと理解したいと思った。 そんな私とあなたに向けた内容（注：知識を整理したい方向けの予定です）</div></div></div></a>\r\n\r\n## 良かったこと\r\n\r\n### 副次的に知見が広がった\r\n\r\n発表資料を作成する中で、いつもは調べないところまで調べたりするので、結果的に周辺知識も仕入れることができたと思っています。  \r\nなかなか普段だと、目的のことさえ調べて終わってしまいますし。\r\n\r\n### スピーカーやスタッフの方と話すことができた\r\n\r\n別に登壇した人だけではないのですが、私自身が人見知りでなかなか普段は話しかけることができません。  \r\nただ、スピーカーであることにより、会話のきっかけが作りやすくなったので、今まで参加したカンファレンスなどよりは、話すことができました。  \r\nお話に付き合っていいただいた方々、ありがとうございました。\r\n\r\n## 反省点\r\n\r\n### 発表時間を気にする\r\n\r\n質疑応答込みで 25 分だったのですが、発表だけで 25 分使い切ってしまいました。  \r\n質疑をされることで知見が深まったはずなので、発表練習をもっとするべきでした。  \r\n（緊張して発表中フリーズしたというのもありますが）  \r\n  \r\n他の会場はどうか分かりませんが、PHP カンファレンスではタイムキーパーがいらっしゃったので、適宜その人を確認するのが良いかと思います。\r\n\r\n### テスト前に勉強したくない病にかかる\r\n\r\nこれは完全に私の問題ですw  \r\n正直、カンファレンスでの登壇が決まってから、そのことが気がかりで、なかなか普段の勉強だったりが手につきませんでした。  \r\n（例えば、本ブログの改善など）  \r\n  \r\n一応、専念していたつもりなのですが、カンファレンスの 1 週間前という大事な時期になぜか集中できなくなりました。  \r\n予定が多かったことや、動画配信サイトにはまってしまったこともありますが。。  \r\nそこが割り切れず、最後の追い込みが不十分だったという反省です。\r\n\r\n### 会場に忘れ物をする\r\n\r\nこれは発表が終わった後の話ですが、スクリーンとのコネクタを会場に忘れてしまいました。  \r\n幸いなことになんとかなるものでしたが、発表が終わって浮かれてはダメということが身にしみました。。\r\n\r\n## 最後に\r\n\r\nスタッフ、スポンサー、スピーカーの皆様、ありがとうございました。  \r\nとても貴重な機会をいただくことができました。  \r\n今回の反省を踏まえ、また登壇して、知見を共有できる場を作りたいと思っています。','',1,'2018-12-19 08:00:00','2018-12-20 08:00:27','2018-12-20 08:00:27'),(53,1,2,'自作 Gem を作成してインストールするまで','## はじめに\r\n自作の Gem を作成しました。  \r\n<a href=\"https://github.com/naoki85/ogp_parser\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://avatars2.githubusercontent.com/u/14346370?s=400&v=4\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">naoki85/ogp_parser</div><div class=\"siimple-card-description\">OGP Parser is a Gem which analyzes the OGP of the target URL. After install this Gem, you can easily get ogp property in the target website. - naoki85/ogp_parser</div></div></div><div class=\"siimple-grid-row bottom-description\">OGP Parser is a Gem which analyzes the OGP of the target URL. After install this Gem, you can easily get ogp property in the target website. - naoki85/ogp_parser</div></div></a>  \r\nこの Gem を本ブログに組み込んだのですが、 Gem の作り方を踏まえ、手順を残したいと思います。  \r\n  \r\nなお、手順は下記の記事を参考にさせていただきました。  \r\n<a href=\"http://morizyun.github.io/blog/ruby-gem-easy-publish-library-rails/index.html\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://morizyun.github.io/img/og_image.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">RubyGemはめっちゃ簡単に作れる！　</div><div class=\"siimple-card-description\">RubyライブラリのRubyGemは知らないとハードル高そうに見えますが、実際にはかなり簡単に作れます。これから積極的にRubyGemを作ってOSSの世界に貢献していきたいので簡単な作り方をまとめました。</div></div></div><div class=\"siimple-grid-row bottom-description\">RubyライブラリのRubyGemは知らないとハードル高そうに見えますが、実際にはかなり簡単に作れます。これから積極的にRubyGemを作ってOSSの世界に貢献していきたいので簡単な作り方をまとめました。</div></div></a>\r\n\r\n## Gem を作成\r\nとにもかくにも、まずは Gem を作成します。\r\n\r\n### テンプレートの作成\r\n\r\n`gem` コマンドが存在していれば、テンプレートを作成してくれます。\r\n\r\n```\r\n$ bundle gem ogp_parser -t\r\n```\r\n\r\n- テストライブラリの選択（ `minitest` / `rspec` ）\r\n- ライセンスの選択\r\n- `CODE_OF_CONDUCT.md` の作成\r\n\r\nこのあたりを設定すると、よしなにファイルを作成してくれます。\r\n\r\n### gemspec の編集\r\nここで Gem の情報などを設定します。  \r\n`TODO` とコメントがついた文字列を編集します。  \r\n例えば、 Gem の説明文などです。  \r\n（まだ決まってない場合とかは一旦適当な値でも良さそうです。）  \r\n  \r\n`TODO` が残っていると、 `budle install` などができないようです。  \r\n  \r\nまた、依存 Gem なども設定できます。  \r\n今回、私が作成した Gem は OGP を解析するものなので、 `nokogiri` を使用しました。\r\n\r\n```rb\r\nspec.add_dependency \"nokogiri\", \">= 1.5\"\r\n```\r\nなお、ここで「とりあえず最新バージョン使えば良いでしょ」と思うと、あとで Rails などにインストールする場合にバージョン不一致でコケます。  \r\n特に問題なければ、ある程度自由がきくようにしておいた方が良いです。\r\n\r\n## Github に登録\r\nGithub に public リポジトリを作成して、そこにプッシュします。  \r\nなお、よくあるバージョンタグをつける場合は、下記のコマンドを使用します。  \r\n特にコミットIDを指定しなければ、最新のコミットに対してタグ付けされます。\r\n\r\n```\r\n$ git tag -a v0.1.0 -m \"Release version 0.1.0\"\r\n$ git push origin v0.2.0\r\n```\r\n<a href=\"https://qiita.com/growsic/items/ed67e03fda5ab7ef9d08\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">git tagの使い方まとめ - Qiita</div><div class=\"siimple-card-description\">tagの作成、確認、共有の手順メモ。\r\n[ドキュメント](https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%BF%E3%82%B0)に細かく書いて...</div></div></div><div class=\"siimple-grid-row bottom-description\">tagの作成、確認、共有の手順メモ。\r\n[ドキュメント](https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%BF%E3%82%B0)に細かく書いて...</div></div></a>\r\n\r\n## 他のアプリケーションから確認してみる\r\nこれで Gem の準備ができたので Rails アプリケーションにインストールしてみます。\r\n\r\n```rb\r\n# Gemfile\r\ngem \'ogp_parser\', :git => \'https://github.com/naoki85/ogp_parser\', :branch => \'master\'\r\n```\r\n```\r\n$ bin/rails console\r\n> OgpParser.parse(\'https://blog.bookrecorder.net\')\r\n```\r\n\r\n## さいごに\r\n他のアプリケーションでも使えそうな処理を Gem に切り出しちゃうのは良いな、と思います。  \r\n（ Ruby Gems で公開するには諸々制約があるようですが）  \r\n良い感じの Gem ができたら、ぜひ使用していただけるよう頑張りたいと思います。','',1,'2018-12-25 08:00:00','2018-12-22 13:08:36','2018-12-28 07:18:02'),(54,1,7,'暗号技術入門を読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4797382228/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4797382228&linkCode=as2&tag=naoki850c-22&linkId=91c6e0d453dff73ccb50e49212dd97fd\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4797382228&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4797382228\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />  \r\n\r\n## 感想\r\n会社の方から勧められ、読んでみました。  \r\n先に感想になってしまいますが、暗号で使用されている技術を広く知ることができ、とても勉強になりました。  \r\n様々な技術の紹介をされているため、1つ1つの技術の詳細（計算式など）までは触れられていません。  \r\n書籍の中でも言及されていますが、詳細を知りたい場合は専門書を読んだ方が良いかと思います。  \r\n  \r\n## 印象に残った部分\r\n暗号技術者の道具としては、以下の 6 種類があるようです。\r\n\r\n- 対象暗号\r\n- 公開鍵暗号\r\n- 一方向ハッシュ関数\r\n- メッセージ認証コード\r\n- デジタル署名\r\n- 擬似乱数生成器\r\n\r\n特に、「擬似乱数生成器」ですが、私などが何かしら乱数を作る場合は、 PHP や Ruby のランダム関数を使用します。  \r\nただ、この関数自体の精度を疑ったことはありませんでした。  \r\n  \r\n私の業務上、自作でそこまで厳密な乱数が必要になるケースはないです。  \r\nとはいえ、その部分を疑うという発想が今までなかったので、衝撃というか、自分がいかに考えていなかったのかを痛感しました。\r\n  \r\n## さいごに\r\n広く浅く、暗号の技術について知りたい方におすすめです。  \r\n図も多様してくれているので、そこまで計算式を見慣れていない方でも比較的読みやすいと思います。（私のような。。）  \r\n  \r\nさて、次は積んでしまっている「Webを支える技術」を読もうかな。。','',1,'2018-12-27 08:00:00','2018-12-23 22:36:32','2019-01-20 23:48:46'),(55,1,0,'今年の振り返りと来年の目標','今年も残りわずかです。  \r\n棚卸もかねて、今年やったことを振り返ります。  \r\n\r\n## 今年実施した主なこと\r\n\r\n- 自作ブログの作成（ Vue.js + Rails ）\r\n- 定期的な勉強会へのコミット\r\n- PHP カンファレンスでの登壇\r\n- 自作 Gem の初作成\r\n- Android Kotlin の学習（未完成）\r\n\r\n読んだ本としては、このブログでまとめた [Real World HTTP](https://blog.bookrecorder.net/posts/50) や [暗号技術入門](https://blog.bookrecorder.net/posts/54) など、広く浅くな内容が多かった気がします。\r\n\r\n## 来年の目標\r\n\r\n- 自作ブログの継続\r\n- [ゼロから作るディープラーニング](https://amzn.to/2EVIcTB) を再読して、自作麻雀モデルを作りたい\r\n- AWS 認定資格の取得\r\n- カンファレンスクラスのイベントでの登壇\r\n- 新幹線の中でやっていることを可視化したい\r\n\r\nとりあえず、今思いつくものを書いてみました。  \r\n目標がないと自堕落な生活をしてしまう私なので、目に見える目標を作って、来年も頑張って行きたいと思います。  \r\nそれでは良いお年を。','',1,'2018-12-31 08:00:00','2018-12-24 18:32:50','2018-12-31 10:07:09'),(56,1,2,'capistrano + asset_sync を使用して Cloud Front から配信する','## はじめに\r\n明けましておめでとうございます。  \r\n本ブログで使用している静的ファイルを S3 に配置した上で、 Cloud Front から配信するようにしました。  \r\n詰まったところがいくつかあったので、記事にさせていただきました。  \r\nなお、 asset_sync のドキュメントはこちらです。  \r\n<a href=\"https://github.com/AssetSync/asset_sync\"><div class=\"siimple-grid-row ogp-card\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4\"><img src=\"https://avatars2.githubusercontent.com/u/14931444?s=400&v=4\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8\"><div class=\"siimple-card-\"><div class=\"siimple-card-title\">AssetSync/asset_sync</div>Synchronises Assets between Rails and S3. Contribute to AssetSync/asset_sync development by creating an account on GitHub.</div></div></div></a>\r\n## S3 と Cloud Front の準備\r\nS3 に専用のバケットを作成し、そのバケットを登録した Cloud Front のディストリビューションを作成します。  \r\n<a href=\"https://dev.classmethod.jp/cloud/cm-advent-calendar-2015-aws-re-entering-cloudfront/\"><div class=\"siimple-grid-row ogp-card\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4\"><img src=\"https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2017/01/eyecatch-cloudfront.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8\"><div class=\"siimple-card-\"><div class=\"siimple-card-title\">AWS再入門 Amazon CloudFront編 | DevelopersIO</div></div></div></div></a>  \r\nなお、後々使用するので、S3 へのアクセス権限をもつユーザーを作成して、アクセストークンとシークレットを控えておきます。\r\n### CORS の設定\r\nfont-awesome を使用している場合、 CORS の設定によってはコンテンツを取得できなくなるようです。  \r\nこちらの記事を参考に、 S3 のバケットポリシーと Cloud Front の Whitelist Headers を編集します。\r\n<a href=\"http://sigtech.hatenablog.com/entry/2015/02/27/201520\"><div class=\"siimple-grid-row ogp-card\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4\"><img src=\"https://cdn.image.st-hatena.com/image/scale/60f81b6c5141996a5043461f083ba7f6b844939d/backend=imager;enlarge=0;height=1000;version=1;width=1200/https%3A%2F%2Fcdn.user.blog.st-hatena.com%2Fdefault_entry_og_image%2F99081321%2F1514240947826392\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8\"><div class=\"siimple-card-\"><div class=\"siimple-card-title\">awsのCloudFrontを試してみる - 時雨に舞う</div>awsのCloudFront、要するにCDNですね。 今持っているアカウントが無料期間中なので、せっかくだから試してみました。 今回用意したコンテンツ自体がテキスト数行だった為、その速度向上については触れる事ができません。 CloudFrontの設定で少しハマったのでその点について少しだけ。 まず、CloudFrontの設定を変えて思った通りに動かない時、DistributionのStatusがDeployedになっているかを確認しましょう。何か設定を変えると10分～20分くらいは更新処理で反映されていない点に注意！ せっかちな私は設定を変えて「Save」ボタンを押したらすぐに反映すると思いこ…</div></div></div></a>\r\n## asset_sync をインストールする\r\nRails アプリケーションに asset_sync をインストールします。  \r\n特に必要なければ production だけで良いかと思います。\r\n\r\n```rb\r\n# Gemfile\r\ngem \"asset_sync\"\r\ngem \"fog-aws\"\r\n```\r\n今回は AWS 用の Gem ですが、 他のクラウドサービスもあるようです。  \r\nインストール後、下記のコマンドで設定ファイルを作成します。\r\n\r\n```\r\n$ rails g asset_sync:install --provider=AWS\r\n```\r\nこれで `config/initializers/asset_sync.rb` が作成されます。  \r\n色々設定ができますが、まずはこれらの値を設定しておきます。\r\n\r\n```rb\r\nif defined?(AssetSync)\r\n  AssetSync.configure do |config|\r\n    config.fog_provider = \'AWS\'\r\n    config.aws_access_key_id = \"AWS_ACCESS_KEY_ID\"\r\n    config.aws_secret_access_key = \"AWS_ACCESS_SECRET\"\r\n    config.fog_directory = \"TARGET_BUCKET_NAME\"\r\n    config.fog_region = \"S3_REGION\"\r\n    config.gzip_compression = true\r\n  end\r\nend\r\n```\r\nさて、ここまでで Capistrano でのデプロイ時に S3 に配置してくれます。  \r\nどうやら、 `assets:precompile` の後に実行してくれるようです。  \r\n  \r\n`config/environments` 以下の環境ごとのファイルで、 `config.action_controller.asset_host` を Cloud Front のドメインにすることで配信することができます。\r\n\r\n## Webpacker で生成されたファイルが配置されない\r\nこの問題は、以下の2つの要因があるようです。\r\n\r\n- Webpacker でコンパイルされるファイルは、 `public/packs` 以下に生成されるが、このディレクトリが対象になってないよう。\r\n- `assets:precompile` の後に `webpacker:compile` が実行されるため、 `assets:sync` のタイミングでコンパイル前のファイルが配置されてしまう。\r\n\r\nただ、この問題は [ドキュメント](https://github.com/AssetSync/asset_sync#webpacker--20-support) にしっかり記載されていました。\r\n\r\n## Rake タスクを作成\r\n\r\n`lib/tasks/asset_sync.rake` というファイルを作成し、下記のコードを入力します。  \r\n`webpacker:compile` の後に `assets:sync` を実行するようにします。\r\n\r\n```rb\r\nif defined?(AssetSync)\r\n  Rake::Task[\'webpacker:compile\'].enhance do\r\n    Rake::Task[\"assets:sync\"].invoke\r\n  end\r\nend\r\n```\r\n\r\n## asset_sync.rb を修正\r\n\r\n`config/initializers/asset_sync.rb` に下記を追記します。  \r\n`run_on_precompile` を `false` にすることで、 Capistrano でのデプロイ時に勝手に実行されないようにします。  \r\nそして、 `add_local_file_paths` を使用して、S3 に配置するファイルを追加します。\r\n\r\n```rb\r\nconfig.run_on_precompile = false\r\n\r\nconfig.add_local_file_paths do\r\n  public_root = Rails.root.join(\"public\")\r\n  Dir.chdir(public_root) do\r\n    packs_dir = Webpacker.config.public_output_path.relative_path_from(public_root)\r\n    Dir[File.join(packs_dir, \'/**/**\')]\r\n  end\r\nend\r\n```\r\nこれで、 Capistrano でデプロイするタイミングに、 `public/packs` 以下も S3 に配置してくれます。\r\n\r\n## さいごに\r\nfont-awesome と、Webpacker でコンパイルしている Vue.js のファイルが配信されず、頭を悩ませていましたが、ちゃんとドキュメントに書いてありましたね。。  \r\nまずはドキュメントを読みなさいという教訓を得ました。。','',1,'2019-01-04 08:00:00','2018-12-24 19:08:36','2018-12-31 16:05:50'),(57,1,2,'ActionText を試してみた','## はじめに\r\nRails 6 で予定されている [Action Text](https://github.com/rails/actiontext) を試してみました。  \r\nDHH が Youtube で動画を公開していますね。\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HJZ9TnKrt7Q\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n\r\n実行環境は、\r\n\r\n- Ruby: 2.6.0\r\n- Rails: 6.0.0.alpha\r\n- Node.js: 10.15.0\r\n- npm: 6.4.1\r\n- yarn: 1.12.3\r\n\r\nです。  \r\n環境構築はこちらの記事を参考にさせていただきました。  \r\n<a href=\"https://tech.misoca.jp/entry/2018/11/19/132358\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/e/eitoball/20181116/20181116131329.gif\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">Rails 6.0 での新機能 Action Text を試してみた - Misoca開発者ブログ</div><div class=\"siimple-card-description\">id:eitoball です。秋ですね。読書の秋といいますが、先日、「われはレギオン」のわれらはレギオン 3: 太陽系最終大戦 (ハヤカワ文庫ＳＦ)を読み終えました。物語のテンポがよく、気持ちよく読むことができました。Sci-Fi小説が好きな方には特にお勧めします。（われらはレギオン1 AI探査機集合体 (ハヤカワ文庫SF) とわれらはレギオン２ アザーズとの遭遇 (ハヤカワ文庫SF) もあわせてお勧めします。） 先日、会社で同僚の何人かと一緒にDHHのAction Textを紹介するYouTube動画を見ました。（ Alpha preview: Action Text for Rails 6…</div></div></div><div class=\"siimple-grid-row bottom-description\">id:eitoball です。秋ですね。読書の秋といいますが、先日、「われはレギオン」のわれらはレギオン 3: 太陽系最終大戦 (ハヤカワ文庫ＳＦ)を読み終えました。物語のテンポがよく、気持ちよく読むことができました。Sci-Fi小説が好きな方には特にお勧めします。（われらはレギオン1 AI探査機集合体 (ハヤカワ文庫SF) とわれらはレギオン２ アザーズとの遭遇 (ハヤカワ文庫SF) もあわせてお勧めします。） 先日、会社で同僚の何人かと一緒にDHHのAction Textを紹介するYouTube動画を見ました。（ Alpha preview: Action Text for Rails 6…</div></div></a>\r\n\r\nなお、本記事で使用したコードは [こちら](https://github.com/naoki85/action_text_sample) で公開しております。  \r\nDocker で環境構築しているので、Dockerがインストールされていれば、すぐにお試しいただけるかと思います。\r\n\r\n## サンプル\r\n\r\n<img src=\"http://d29xhtkvbwm2ne.cloudfront.net/posts/1546236447_action_text_sample.gif\" width=\"100%\">\r\n\r\n## 環境構築で詰まったところ\r\nWebPacker の使用前提なので、Ruby 環境を構築しただけだとうまくいきません。  \r\n（この件は上記ブログを参考にして構築しました。）  \r\n  \r\nまた、画像アップロードは Active Strage を使用していますが、詳細画面で表示する際に、ホスト名を localhost:3000 にしておかないと表示されません。  \r\nそのため、 `config/initializers/application_controller_renderer.rb` を下記のように修正します。\r\n\r\n```rb\r\nActiveSupport::Reloader.to_prepare do\r\n  ApplicationController.renderer.defaults.merge!(\r\n    http_host: \'localhost:3000\',\r\n    https: false\r\n  )\r\nend\r\n```\r\n\r\n## 使い方\r\n\r\n`bundle exec rails action_text:install` を実行するとマイグレーションファイルが生成されるので、それを実行します。  \r\n下記の3つのテーブルが新しくできます。  \r\n（内 2 つは Active Storage 用のテーブルです。）\r\n\r\n```rb\r\ncreate_table :active_storage_blobs do |t|\r\n  t.string   :key,        null: false\r\n  t.string   :filename,   null: false\r\n  t.string   :content_type\r\n  t.text     :metadata\r\n  t.bigint   :byte_size,  null: false\r\n  t.string   :checksum,   null: false\r\n  t.datetime :created_at, null: false\r\n\r\n  t.index [ :key ], unique: true\r\nend\r\n\r\ncreate_table :active_storage_attachments do |t|\r\n  t.string     :name,     null: false\r\n  t.references :record,   null: false, polymorphic: true, index: false\r\n  t.references :blob,     null: false\r\n  t.datetime :created_at, null: false\r\n  t.index [ :record_type, :record_id, :name, :blob_id ], name: \"index_active_storage_attachments_uniqueness\", unique: true\r\n  t.foreign_key :active_storage_blobs, column: :blob_id\r\nend\r\n\r\ncreate_table :action_text_rich_texts do |t|\r\n  t.string     :name, null: false\r\n  t.text       :body, limit: 16777215\r\n  t.references :record, null: false, polymorphic: true, index: false\r\n  t.datetime :created_at, null: false\r\n  t.datetime :updated_at, null: false\r\n  t.index [ :record_type, :record_id, :name ], name: \"index_action_text_rich_texts_uniqueness\", unique: true\r\nend\r\n```\r\n適当に scaffold でモデルを作成します。  \r\n例えば記事のテーブルとして `Post` を作成するとすると、 `title` カラムだけ追加すれば良く、実際に Action Text を使用する本文のカラムは必要ないようです。\r\n\r\n```\r\n$ bin/rails g scaffold post title:string\r\n```\r\nこれで `http://localhost:3000/posts/new` なんかにアクセスすると、なんか良い感じのエディタができてます。\r\n\r\n## 実際に試してみて\r\n\r\n- タイトルや斜体、リンク、引用、コードブロックなどを使用でき、基本的な記事執筆には使えそう。\r\n- 保存時は HTML として解釈され、action_text_rich_texts テーブルに保存される。\r\n\r\n例えば、冒頭で貼った gif 画像の場合は、下記のようなレコードが挿入されます。\r\n\r\n```sql\r\nINSERT INTO \"action_text_rich_texts\"\r\n (\"name\", \"body\", \"record_type\", \"record_id\", \"created_at\", \"updated_at\")\r\n  VALUES ($1, $2, $3, $4, $5, $6) RETURNING \"id\"\r\n    [[\"name\", \"content\"],\r\n     [\"body\", \"<div><strong>title<br></strong><em><br>subtitle<br><br></em>description...<br><br><a href=\\\"https://google.com\\\">https://google.com</a><br><br></div><pre>def hello\\r\\n  puts \'hello\'\\r\\nend</pre><div><action-text-attachment sgid=\\\"BAh7CEkiCGdpZAY6BkVUSSIxZ2lkOi8vbXlhcHAvQWN0aXZlU3RvcmFnZTo6QmxvYi8zP2V4cGlyZXNfaW4GOwBUSSIMcHVycG9zZQY7AFRJIg9hdHRhY2hhYmxlBjsAVEkiD2V4cGlyZXNfYXQGOwBUMA==--0a3094be278d90560717a29cb49ed79f84e04275\\\" content-type=\\\"image/jpeg\\\" url=\\\"http://localhost:3000/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--868abdfe17ca0f255bea313d5b74088a4ab22d27/logo_twitter.jpg\\\" filename=\\\"logo_twitter.jpg\\\" filesize=\\\"26370\\\" width=\\\"300\\\" height=\\\"300\\\" presentation=\\\"gallery\\\"></action-text-attachment><br><br></div>\"], \r\n     [\"record_type\", \"Post\"],\r\n     [\"record_id\", 3],\r\n     [\"created_at\", \"2018-12-31 05:36:28.061361\"],\r\n     [\"updated_at\", \"2018-12-31 05:36:28.061361\"]]\r\n```\r\n`record_type` と `record_id` でモデルを特定するようです。  \r\n\r\n- 画像アップロードは Active Storage を使用して行う、\r\n- `action-text-attachment` というカスタムタグを使用しているよう。\r\n\r\n## さいごに\r\nActive Storage にベッタリなのが気になりますが、 Rails 6 から Active Storage も色々改善されるようなので、実際の使用時にはそこまで気にならないのかもしれません。  \r\n実は、本ブログの記事エディタの改善で少し悩んでおり、ちょっと導入検討をしています。  \r\n  \r\nRails 6 のリリースが楽しみになる新機能です。  \r\n今年中のリリースのようなので待ち遠しいですね。','',1,'2019-01-07 08:00:00','2018-12-31 15:09:00','2018-12-31 16:05:12'),(58,1,7,'Web を支える技術 を読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4774142042/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4774142042&linkCode=as2&tag=naoki850c-22&linkId=89ab73f5bea2605dfaa1e6d9a22db95b\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4774142042&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4774142042\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\n以前から読もう、読もうと思って積んでいた本ですが、年末年始の休みに読みました。  \r\nこの本を読んで何かができるようになる、という類ではなく、あくまで総論かと思います。\r\n\r\n## どんな内容か、事前知識など\r\n\r\nHTTP や URI、マークアップの話など、Web アプリケーションを作成する人なら馴染みのある項目を解説してくれます。  \r\n事前知識がないとよく分からない部分があるかと思いますが、逆によく分からなければ次の目標にできるかと思います。  \r\n  \r\n## どんな人にオススメか\r\n\r\n初心者〜中級者の方は読んだ方が良いと思いますが、個人的に効果的だなと思うのは、  \r\n自分で Web アプリケーションを作成、公開した後かなと思います。  \r\n（もしくは業務で一通り触ったあと）  \r\n  \r\n前述しましたが、この本は理解を広げるための内容なので、具体的に思い浮かべられないと理解しにくいのではないかと思います。\r\n\r\n## さいごに\r\n\r\nこの本の初版が 2010 年ですが、現在でも知っておくべき内容になっています。  \r\nとても当たり前のことですが、私が納得してしまったのは、 `PUT と DELETE はべき等である` ということです。  \r\nリクエスト後のリソースの状態は同じということみたいです。  \r\n  \r\n例えば、ポイントを増加させる API があったとして、 `$point += 50` する処理と `$point=150`\r\n の処理では違います。  \r\n前者は、常に `+50` されてしまうので、リクエスト後のリソースの状態が変わってしまいます。  \r\nAPI の多重リクエストを考慮し、変化後の値を指定した方が良いのかな。。と考えています。','',1,'2019-01-10 08:00:00','2019-01-06 00:59:52','2019-01-20 23:48:36'),(59,1,3,'お名前.com でドメインを習得して既存の EC2 インスタンスを Route 53 で紐付ける','## はじめに\r\n実は本ブログのドメインを変更しました。  \r\nドメインの登録はそんなに実施回数がないのでいつも忘れてしまいます。  \r\nそのため、この機に備忘録にしておこうと思います。  \r\n  \r\nなお、下記のブログを参考にさせていただきました。  \r\n<a href=\"https://go-journey.club/archives/8340\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://go-journey.club/wp-content/uploads/2018/01/SnapCrab_NoName_2018-1-11_22-24-44_No-00.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">【AWS】お名前.com で取得した独自ドメインを Amazon Route 53 で名前解決して EC2 インスタンスの Web サーバーにアクセスさせる手順</div><div class=\"siimple-card-description\">タイトルが長いですが、前回の記事の続きです。 前回は AWS EC2 インスタンスで Web サーバーと API サーバーを構築し、インターネットに公開して ELB でロードバランスする設定手順を解説しました。   【AWS】EC</div></div></div><div class=\"siimple-grid-row bottom-description\">タイトルが長いですが、前回の記事の続きです。 前回は AWS EC2 インスタンスで Web サーバーと API サーバーを構築し、インターネットに公開して ELB でロードバランスする設定手順を解説しました。   【AWS】EC</div></div></a>\r\n\r\n## お名前.com にてドメインを購入する\r\n\r\n特に説明の必要はないですね。  \r\nお名前.com のコンソールはいつもどこで何をすれば良いのかよく分からなくなるんですよね。。。\r\n\r\n## EC2 インスタンスに固定 IP を割り振っておく\r\n\r\nここも割愛します。  \r\n公開ウェブサイトであれば取得済みかと思います。\r\n\r\n## Route 53 に Host Zone を作成する\r\n\r\n「Create Host Zone」を押すと、下図のように入力項目が現れます。  \r\n取得したドメインを Domain Name に入力します。  \r\n公開ドメインであれば後はそのままで、 Host Zone を作成します。\r\n\r\n<img src=\"http://d29xhtkvbwm2ne.cloudfront.net/posts/1547297032_route53.png\" width=\"100%\">\r\n\r\n作成すると、4 種類のネームサーバーが表示されます。  \r\nこれを後ほど、お名前.com にて設定します。\r\n\r\n### Record の作成\r\n\r\n作成したドメインと、自分のインスタンスの IP アドレスを紐付けるレコードを作成します。  \r\n今回は IP アドレスとドメイン 1 つずつなので、 A レコードで作成します。  \r\n\r\n\r\n\r\n<a href=\"https://qiita.com/PharaohKJ/items/b6a933b7f79afe8a32e1\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">AレコードとCNAMEレコードの違い - Qiita</div><div class=\"siimple-card-description\">\r\nお恥ずかしながら全部Aレコードにしてました。が、ちょっと調べてみてやっとわかったのでwメモ。\r\n参考URL\r\nhttp://ascii.jp/elem/000/000/458/458858/\r\nhttp://d.hatena.ne...</div></div></div><div class=\"siimple-grid-row bottom-description\">\r\nお恥ずかしながら全部Aレコードにしてました。が、ちょっと調べてみてやっとわかったのでwメモ。\r\n</div></div></a>\r\n\r\n<img src=\"http://d29xhtkvbwm2ne.cloudfront.net/posts/1547297579_スクリーンショット 2019-01-12 10.10.46.png\" width=\"100%\">\r\n\r\nサブドメインを作成するときなどは、 Name の項目を埋めれば、簡単にサブドメインを作成できます。  \r\nとりあえずメインドメインなので空欄のままで。  \r\n  \r\nValue には対象の IP アドレスを埋めておきます。\r\n\r\n## お名前.com の方でネームサーバーを指定する\r\n\r\nお名前.com で「ネームサーバーの設定」から「ネームサーバーの変更」、「他のネームサーバーを使用」を選択します。  \r\n\r\n<img src=\"http://d29xhtkvbwm2ne.cloudfront.net/posts/1547297837_スクリーンショット 2019-01-12 10.11.35.png\" width=\"100%\">\r\n\r\nここに Route 53 で表示されているネームサーバーを 4 つ指定します。\r\nこれで作業は終了です。\r\n\r\n## さいごに\r\n\r\nだいたい 1 日から 3 日くらいかかるようなので気長に待ちましょう。  \r\n（取得は計画的に。）  \r\n  \r\nドメインを変えて心機一転、本ブログもよろしくお願いします。','',1,'2019-01-15 08:00:00','2019-01-12 21:59:58','2019-01-12 21:59:58'),(60,1,7,'Let\'s Encrypt の証明書を失効させる','調べたら 1 コマンドでできたのでメモです。  \r\n`--cert-path` オプションで証明書のパスを指定すれば OK なようです。  \r\nこのとき、最新の cert ファイルを指定する必要があります。  \r\n（一番数が大きいやつ）\r\n\r\n```\r\n$ sudo ./certbot-auto revoke --cert-path=/etc/letsencrypt/archive/domain-name/cert1.pem\r\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\r\n\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nWould you like to delete the cert(s) you just revoked?\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n(Y)es (recommended)/(N)o: Y\r\n\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nDeleted all files relating to certificate domain-name.\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nCongratulations! You have successfully revoked the certificate that was located\r\n```\r\n途中でファイルを諸々削除するか聞かれるので、 Yes にすれば削除してくれます。','',1,'2019-01-24 08:00:00','2019-01-20 15:14:04','2019-01-20 23:48:27'),(61,1,7,'マスタリングTCP/IP 入門編 を読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4274068765/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4274068765&linkCode=as2&tag=naoki850c-22&linkId=cdb7102e73ad350e26a9daca44477ea0\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4274068765&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4274068765\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\n最近、 [Real World HTTP](https://amzn.to/2REBIPX) や [Web を支える技術](https://amzn.to/2Dn628E) を読んでいて、アプリケーションレイヤーより下のレイヤーについても興味が出たので購入しました。  \r\nとてもオススメできます。  \r\n\r\n## 正直理解できた？\r\n読み飛ばした部分は多々ありますが、都度再読はしていきたいと思います。  \r\nなんとなく、TCP/IP がどういう役割分担をしているのか知ることができたと思います。  \r\nまた、 [OSI参照モデル](https://ja.wikipedia.org/wiki/OSI%E5%8F%82%E7%85%A7%E3%83%A2%E3%83%87%E3%83%AB)の各レイヤーがどういう役割を持っていて、 TCP/IP ではどういう風に解釈されているのか分かった気がします。  \r\n  \r\n## どんな方にオススメか\r\n入門編なので、ネットワークレイヤーの難解な用語は出てきません。  \r\nむしろ、本の導入部分はどういう風に通信が実施されているか解説してくれているので、ネットワークエンジニアだけでなく、サーバーサイドの方も読んだ方が良いのではないでしょうか？  \r\n  \r\n何かができるようになるというか、見識を広げるための本だと思います。\r\n','',1,'2019-01-21 08:00:00','2019-01-20 22:42:42','2019-01-20 23:48:20'),(62,1,1,'vue-i18n で多言語対応をする','# はじめに\r\nRails ではよく [i18n](https://railsguides.jp/i18n.html) を利用して他言語対応をしていますが、 Vue.js ではどうやるんだろうと思い、調べみました。\r\n\r\nすでにこういったライブラリや、記事があったのでこれらを使わせていただきました。\r\nvue-i18n は Rails の考え方を利用しているみたいですね。\r\n[https://kazupon.github.io/vue-i18n/](https://kazupon.github.io/vue-i18n/)\r\n\r\n<a href=\"https://qiita.com/nozo_moto/items/6c394406ef658bab0691\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">VueJSで多言語対応した話 - Qiita</div><div class=\"siimple-card-description\">\r\nこの記事は[Treasure Advent Calendar](https://qiita.com/advent-calendar/2018/treasure)の8日目の記事です\r\nVueJSで多言語対応した話\r\n\r\n特にこだわり無...</div></div></div><div class=\"siimple-grid-row bottom-description\">\r\nこの記事は[Treasure Advent Calendar](https://qiita.com/advent-calendar/2018/treasure)の8日目の記事です\r\nVueJSで多言語対応した話\r\n特にこだわり無...</div></div></a>\r\n\r\n## インストール\r\n\r\n```\r\n$ yarn add vue-i18n\r\n```\r\nエントリーポイントにて使用宣言をします。\r\n\r\n\r\n## 翻訳ファイルの作成\r\n`locales` ディレクトリを作成し、そこに `messages.json` を作成します。  \r\nJSON形式で翻訳ファイルを作成していきます。\r\n\r\n```json\r\n{\r\n  \"ja\": {\r\n    \"common\": {\r\n      \"hello\": \"こんにちは\",\r\n    }\r\n  },\r\n  \"en\": {\r\n    \"common\": {\r\n      \"hello\": \"Hello\",\r\n    }\r\n  }\r\n}\r\n```\r\n必要に応じて階層を増やしてください。\r\n\r\n## VueI18n の使用宣言\r\n同じ `locales` ディレクトリに `locales.js` を作成して、 VueI18n のインスタンスを返します。  \r\nこの時に先ほど作成した翻訳ファイルを使用します。\r\n\r\n```js\r\nimport Vue from \'vue/dist/vue.esm\'\r\nimport VueI18n from \'vue-i18n\'\r\n\r\nconst data = require(\'./messages.json\');\r\n\r\nVue.use(VueI18n);\r\n\r\nexport default new VueI18n({\r\n  locale: \'ja\',\r\n  messages: data\r\n});\r\n```\r\nエントリーポイントのファイルで読み込みます。\r\n\r\n```js\r\n// ...\r\nimport i18n from \'../locales/locales\'\r\n\r\nnew Vue({\r\n    el: \'#app\',\r\n    i18n: i18n,\r\n    components: { App }\r\n});\r\n```\r\n## 実際にコンポーネントなどで使用する\r\n\r\n```\r\n<p>{{ $t(\"common.hello\") }}</p>\r\n```\r\nこんな感じで使えます。  \r\n\r\n## 言語設定を変える\r\nこのままだとデフォルトの設定しか反映されないので、ブラウザの言語設定を拾って反映させたいと思います。  \r\nこちらの記事を参考にさせていただきました。  \r\n[https://qiita.com/nozo_moto/items/6c394406ef658bab0691](https://qiita.com/nozo_moto/items/6c394406ef658bab0691)\r\n\r\nコンポーネントをマウントするタイミングで設定値を変えます。  \r\n場合によっては Vuex に持たせてしまっても良いのかもしれません。  \r\n[window.navigator](https://developer.mozilla.org/ja/docs/Web/API/Window/navigator)\r\n\r\n```js\r\n  const default_lang = (\r\n    window.navigator.userLanguage ||\r\n    window.navigator.language ||\r\n    window.navigator.browserLanguage\r\n  ).substr(0, 2) == \"ja\" ? \"ja\" : \"en\";\r\n\r\nexport default {\r\n  // ...\r\n  mounted: {\r\n    this.$i18n.locale = default_lang;\r\n  },\r\n  // ...\r\n}\r\n```\r\n## さいごに\r\n翻訳ファイルに従って変換しているので、自作してしまっても良いかもしれません。  \r\nレンダリングの際に変換するので、パフォーマンスに影響するみたいですね。\r\n[vue-i18n のパフォーマンス最適化](https://medium.com/@kazu_pon/vue-i18n-%E3%81%AE%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%9C%80%E9%81%A9%E5%8C%96-efc4c3b99106)\r\n','',1,'2019-01-28 08:00:00','2019-01-26 19:35:38','2019-01-26 19:35:47'),(63,1,8,'Tour of Go をやってみた','## はじめに\r\n私の周囲で Go 言語の話があがってきたので良い機会と思い、勉強を開始しました。  \r\n本ブログの API 部分を Go に置き換えることを目標にしようと思います。  \r\n  \r\nとりあえず Tour of Go をやると良いという噂を聞いたのでやってみました。  \r\n[https://go-tour-jp.appspot.com/list](https://go-tour-jp.appspot.com/list)\r\n\r\n## 環境構築\r\nTour of Go はブラウザ上で試せますが、せっかくなのでローカルに Go をインストールし、実行しました。  \r\nインストールには [goenv](https://github.com/syndbg/goenv) を使用しました。  \r\nインストールの方法はこちらの記事をご参照ください。\r\n\r\n<a href=\"https://re-engines.com/2018/10/09/go言語の基礎〜go-1-11-パッケージ管理システムと開発環/\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://re-engines.com/wp-content/uploads/2018/10/golang.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">Go言語の基礎〜Go 1.11 開発環境構築とパッケージバージョン管理〜</div><div class=\"siimple-card-description\">さて、今回はGo言語についてです。Go言語をご存知の方は、最近ですと、2018年8月末に1.11がリリースされことや、Go2でのgenericsやエラーハンドリングに関する議論など耳にされている方も多いのではないでしょうか。 改めて話題になってたことで、私たちもGo言語を改めて学びなおそうと、勉強会合宿を開催しました。そこで発表・共有した内容を簡単にまとめ、数回にわたり連載を予定しております。 今回の記事では、改めてGo言語を勉強してみたいという方向けに、Go言語概要と環境構築から、Go 1.11でexperimentalでリリースされた Modulesについて紹介したいと思います。</div></div></div><div class=\"siimple-grid-row bottom-description\">さて、今回はGo言語についてです。Go言語をご存知の方は、最近ですと、2018年8月末に1.11がリリースされことや、Go2でのgenericsやエラーハンドリングに関する議論など耳にされている方も多いのではないでしょうか。 改めて話題になってたことで、私たちもGo言語を改めて学びなおそうと、勉強会合宿を開催しました。そこで発表・共有した内容を簡単にまとめ、数回にわたり連載を予定しております。 今回の記事では、改めてGo言語を勉強してみたいという方向けに、Go言語概要と環境構築から、Go 1.11でexperimentalでリリースされた Modulesについて紹介したいと思います。</div></div></a>\r\n\r\n## パッケージが見つからない\r\nローカルでやっているからだと思いますが、たまにサンプルのパッケージが見つからなかったりします。  \r\n具体的には、 `golang.org/x/tour` のような名前空間？のやつです。  \r\nその場合はインストールしてあげれば参照できるようになります。\r\n\r\n```\r\n$ go get golang.org/x/tour/pic\r\n```\r\n\r\n## 課題が難しい\r\n正直初見だと課題を解くことができませんでした。  \r\nQiita に解答を載せてくれている記事もあるので、それを写経していました。  \r\n\r\n<a href=\"https://qiita.com/rock619/items/f412d1f870a022c142d0\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">A Tour of Goの練習問題をちゃんと解いた解答 - Qiita</div><div class=\"siimple-card-description\"># はじめに\r\n\r\n[A Tour of Go](https://go-tour-jp.appspot.com)はGoの入門にはいい教材だと思いますが、練習問題の中には初見だと難しいと感じたものがありました。調べてもそのまま動く解答がなか...</div></div></div><div class=\"siimple-grid-row bottom-description\"># はじめに\r\n\r\n[A Tour of Go](https://go-tour-jp.appspot.com)はGoの入門にはいい教材だと思いますが、練習問題の中には初見だと難しいと感じたものがありました。調べてもそのまま動く解答がなか...</div></div></a>\r\n\r\n普通解けるものなんですかね。。\r\n\r\n## さいごに\r\n正直、 goroutine であったり、ポインタの部分はほとんどよく分かっていませんが、実際に何か作りながら感覚を掴んでいこうとは思います。  \r\nもし今後 Go に興味があるけど、あまりプログラミングの経験値がないよ、という人は Tour of Go より、もう少し簡単な教科書とか記事を探した方が良い気がします。','',1,'2019-01-31 08:00:00','2019-01-30 21:16:48','2019-01-30 21:16:48'),(64,1,7,'安全なWebアプリケーションの作り方 を読みました','<a target=\"_blank\"  href=\"https://www.amazon.co.jp/gp/product/4797393165/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4797393165&linkCode=as2&tag=naoki850c-22&linkId=e341d6f0a82f05d561ecafa66036f6b1\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4797393165&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL160_&tag=naoki850c-22\" ></a><img src=\"//ir-jp.amazon-adsystem.com/e/ir?t=naoki850c-22&l=am2&o=9&a=4797393165\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\n## はじめに\r\n今さらですが、Web 系で必須と言われる徳丸本を読みました。  \r\n大事な内容を、そこまで難解な表現を使用せずまとめられているので、特に初心者にはオススメです。  \r\n（とはいえ、勉強し始めていきなりこの本、というのもきついですが）  \r\n  \r\n今回は備忘録を兼ね、各章の印象に残ったことをメモしたいと思います。  \r\n参考になれば幸いです。\r\n\r\n### 1, Web アプリケーションの脆弱性とは\r\n\r\n前置きや本の進め方の解説です。  \r\nこの本のサンプルプログラムはほぼ PHP で記載されています。\r\n\r\n### 2. 実習環境のセットアップ\r\n\r\nすでに環境は用意してくださっているようです。  \r\n私は通勤時にこの本を読んでいたため、実際にハンズオンではやっていないのですが、いくつか試したいツールがありました（後述）。\r\n\r\n### 3. Web セキュリティの基礎\r\n\r\nよく話題にあがるセッション、 Cookie の話です。  \r\n分かりやすいのでこの章は特に初心者の方にオススメです。  \r\n私自身、[同一オリジンポリシー](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)や [CORS](https://developer.mozilla.org/ja/docs/Web/HTTP/CORS) なんかは理解不十分でした。\r\n\r\n### 4. Web アプリケーションの機能別に見るセキュリティバグ\r\n\r\nこの章が一番長く、根気がいりますw  \r\n常識的なところから、今ではあまり見かけないものまで様々なバグを紹介しています。  \r\n少なくとも、外部からの入力値を検査せずに使用するのは危険ですね。\r\n\r\n### 5. 代表的なセキュリティ機能\r\n\r\nイケてない認証機能や権限管理、ログ出力はこんなものだよ、という紹介です。  \r\n権限管理なんかは自前でやろうとすると面倒なんですよね。。  \r\n（そして脆弱性として指摘される。）  \r\n  \r\nログもどこまで管理すれば良いのか毎回悩みます。\r\n\r\n### 6. 文字コードとセキュリティ\r\n\r\n文字コードや文字エンコーディングによる懸念事項です。  \r\n正直文字コードはほとんど UTF-8 を使っている人間なので、なかなかこの事例には出会ったことがないです。  \r\nただ、Shift_JIS の話はへ〜、と思いました。\r\n\r\n### 7. 脆弱性診断入門\r\n\r\n脆弱性診断でいくつかのツールの紹介でした。  \r\nこのあたりは個人的にも試してみたいと思います。\r\n\r\n- [OWASP ZAP](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)\r\n- [Nmap](https://nmap.org/man/jp/)\r\n- [OpenVAS](http://openvas.org/)\r\n- [RIPS](https://sourceforge.net/projects/rips-scanner/files/)\r\n\r\n### 8. Web サイトの安全性を高めるために\r\n\r\nサーバーの選定や、どういう風に構築すればバグが起きにくいか、といった紹介です。  \r\n今はクラウドサーバーが主流になっていて、クラウド事業者が管理する部分が大きいので、私たちがやるべき部分は小さくなっているのかもしれません。\r\n\r\n### 9. 安全な Web アプリケーションのための開発マネジメント\r\n\r\n設計やテストなど、ドキュメント周りをこうした方が良いよ、という提案です。  \r\nさらっと書いてあります。\r\n\r\n## さいごに\r\n\r\nRails のようなフレームワークを使用していると、CSRF トークンを生成してくれるし、 クエリビルダーを使えばエスケープまでしてくれます。  \r\nまた、AWS や GCP は、手順書通りにやれば不要なポートを開けることはなかったり、セキュリティグループを設定できます。  \r\n  \r\n以前ほど、セキュリティに意識を向けなくてもよくなったとはいえ、知っておくべき内容かと思います。  \r\n噂通り名著でした。。','',1,'2019-02-04 08:00:00','2019-01-31 21:17:18','2019-01-31 22:24:52'),(65,1,8,'Go で MySQL からレコードを取得してみる','Go の勉強をしています。  \r\n目標としては、本ブログの記事取得 API をリプレースすることです。  \r\nDB への接続にはパッケージを利用すれば良さそうなので、今回はそれを使用してみたいと思います。  \r\n  \r\nなお、本記事の前提として、 MySQL は稼働しているとします。  \r\n\r\n## 準備\r\n\r\nまずは必要なパッケージをインポートします。  \r\n[database/sql](https://golang.org/pkg/database/sql/) が今回主に使用するパッケージです。  \r\n私は普段 PHP を主にやっているので、 PDO のような感じでした。  \r\n  \r\nまた、一緒に MySQL 用のドライバーをインポートします。 \r\n\r\n[https://github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)\r\n \r\nこれは特にプログラム中で使用しないので、パッケージ名の前に `_` をつけています。  \r\nパッケージ名の付け方についてはこちらの記事を参照してください。\r\nMySQL ではなく、 PostgreSQL を使用したい場合は、ここでそのドライバーをインストールする必要があります。\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n  \"database/sql\"\r\n  _ \"github.com/go-sql-driver/mysql\"\r\n)\r\n```\r\n\r\n## 接続\r\n\r\n`sql.Open` の第一引数にドライバーの指定、第二引数でアドレスとDBを指定します。\r\n下記は一例です。\r\n\r\n```\r\nfunc main() {\r\n  db, err := sql.Open(\"mysql\", \"root:@tc  (0.0.0.0:3306)/your_database_name\")\r\n  if err != nil {\r\n    panic(err.Error())\r\n  }\r\n  defer db.Close()\r\n}\r\n```\r\nDB に接続できなかった場合はエラーが出ます。\r\n\r\n```\r\npanic: Error 1045: Access denied for user \'root\'@\'0.0.0.0\' (using password:NO)\r\n```\r\n\r\n## データの取得\r\n\r\n```\r\nfunc main() {\r\n  // ...  \r\n  rows, err := db.Query(\"SELECT id, name FROM users\")\r\n  if err != nil {\r\n  	panic(err.Error())\r\n  }\r\n  defer rows.Close()\r\n}\r\n```\r\nQuery に SQL をセットして実行します。  \r\nプリペアドステートメントも使えるようです。  \r\nクエリでエラーが発生すればここで止まります。  \r\n\r\n```\r\nfunc main() {\r\n  // ...\r\n\r\n  var (\r\n    id int\r\n    username string\r\n  )\r\n\r\n  for rows.Next() {\r\n      err = rows.Scan(&id, &name)\r\n      if err != nil {\r\n        panic(err.Error())\r\n      }\r\n    fmt.Println(id, name)\r\n  }\r\n}\r\n```\r\n`fmt` パッケージをインポートしておいてください。  \r\n`id` と `name` の変数を用意して、そこに取得した値を入れていきます。  \r\n`rows.Next()` である分だけ取得できます。  \r\n  \r\n`SELECT * FROM users` なんかでワイルドカード指定すると、その分の変数が必要なようです。  \r\n  \r\nとりあえず取得自体はこれでできますが、テーブル関わらず、全てのカラムを出力できるようにしたいと思います。  \r\nこちらの記事に記載がありました。\r\n\r\n<a href=\"https://qiita.com/taizo/items/54f5f49c6102f86194b8\"><div class=\"ogp-card\"><div class=\"siimple-grid-row\"><div class=\"siimple-card siimple-grid-col siimple-grid-col--4 left\"><img src=\"https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png\" width=\"100%\"></div><div class=\"siimple-card siimple-grid-col siimple-grid-col--8 right\"><div class=\"siimple-card-title\">GoでMySQLに接続する - Qiita</div><div class=\"siimple-card-description\">Go言語にはデフォルトでSQLやSQLライクなデータベースに接続するための\r\nインターフェースがデフォルトで用意されている。\r\n\r\nhttp://golang.org/pkg/database/sql/\r\n\r\nそれに各DB用のドライバーを追加し...</div></div></div><div class=\"siimple-grid-row bottom-description\">Go言語にはデフォルトでSQLやSQLライクなデータベースに接続するための\r\nインターフェースがデフォルトで用意されている。\r\n\r\nhttp://golang.org/pkg/database/sql/\r\n\r\nそれに各DB用のドライバーを追加し...</div></div></a>\r\n\r\n## カラム名を取得する\r\n\r\n先ほどまでのコードは以下のように修正します。  \r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n  \"database/sql\"\r\n  \"fmt\"\r\n\r\n  _ \"github.com/go-sql-driver/mysql\"\r\n)\r\n\r\nfunc main() {\r\n  db, err := sql.Open(\"mysql\", \"root:@/my_database\")\r\n  if err != nil {\r\n    panic(err.Error())\r\n  }\r\n  defer db.Close()\r\n\r\n  rows, err := db.Query(\"SELECT * FROM users\")\r\n  if err != nil {\r\n    panic(err.Error())\r\n  }\r\n  defer rows.Close()\r\n}\r\n```\r\nカラム一覧から取得するカラムの配列を作成します。\r\n\r\n```\r\nfunc main() {\r\n  columns, err := rows.Columns()\r\n  if err != nil {\r\n    panic(err.Error())\r\n  }\r\n\r\n  values := make([]sql.RawBytes, len(columns))\r\n\r\n  //  rows.Scan は引数に `[]interface{}`が必要.\r\n  scanArgs := make([]interface{}, len(values))\r\n  for i := range values {\r\n    scanArgs[i] = &values[i]\r\n  }\r\n}\r\n```\r\n`scanArgs` の中に取得したいテーブルのカラム名が全て入っているので、これを Scan します。\r\n\r\n## データを取得する\r\n\r\n```\r\nfunc main() {\r\n  for rows.Next() {\r\n    err = rows.Scan(scanArgs...)\r\n    if err != nil {\r\n      panic(err.Error())\r\n    }\r\n\r\n    var value string\r\n    for i, col := range values {\r\n      if col == nil {\r\n        value = \"NULL\"\r\n      } else {\r\n        value = string(col)\r\n      }\r\n      fmt.Println(columns[i], \": \", value)\r\n    }\r\n    fmt.Println(\"-----------------------------------\")\r\n  }\r\n}\r\n```\r\nこれで全出力ができたかと思います。  \r\n\r\n## さいごに\r\n\r\nDB から取得する処理を試してみました。  \r\n早めにテストコードを書くようにしたいので、次はクエリーをモックに置き換えてテストをしてみた記事を書こうと思います。','',1,'2019-02-07 08:00:00','2019-02-06 20:21:33','2019-02-06 20:48:13'),(66,1,8,'MySQL の返り値をモックにしてテストする','## はじめに\r\nGo で Web API を作り始めたのですが、早めにテストを導入しておこうと考えました。  \r\n現在は特に ORM のようなパッケージは使用せず、 MySQL から値を取得しています。  \r\n  \r\nそのため、テストを実行するのであれば、テスト用の DB を作成するか、モックを使用するか悩んでいましたが、  \r\n今回はモックを使用することにしました。  \r\n  \r\nググると、 MySQL の返却値をモックにしてくれるパッケージがあったので、それを使うことにしました。  \r\n[https://github.com/DATA-DOG/go-sqlmock](https://github.com/DATA-DOG/go-sqlmock)  \r\n  \r\nなんなら Web API のテストコードもそのまま使えそうでした。\r\n[https://github.com/DATA-DOG/go-sqlmock/tree/master/examples/blog](https://github.com/DATA-DOG/go-sqlmock/tree/master/examples/blog)\r\n\r\n## インストール\r\n\r\nv1 と v2 があるようですが、今は v1 が master のようなので、 v1 を使用します。\r\n\r\n```\r\n$ go get gopkg.in/DATA-DOG/go-sqlmock.v1\r\n```\r\n## API の方を作る\r\n\r\nこちらのサンプルをもとに作成しました。  \r\n今回は `http://localhost:8080/posts` で記事一覧を取得できるところまでできたとして、省略します。  \r\n[https://github.com/DATA-DOG/go-sqlmock/blob/master/examples/blog/blog.go](https://github.com/DATA-DOG/go-sqlmock/blob/master/examples/blog/blog.go)\r\n\r\n## テストを作成する\r\n\r\n[https://github.com/DATA-DOG/go-sqlmock/blob/master/examples/blog/blog_test.go](https://github.com/DATA-DOG/go-sqlmock/blob/master/examples/blog/blog_test.go)  \r\n\r\nまずはデータベースのモックを作成します。\r\n\r\n```\r\nfunc TestShouldGetPosts(t *testing.T) {\r\n    db, mock, err := sqlmock.New()\r\n    if err != nil {\r\n        t.Fatalf(\"an error \'%s\' was not expected when opening a stub database connection\", err)\r\n    }\r\n    defer db.Close()\r\n\r\n    // ...\r\n}\r\n```\r\nもともと作成した API の構造体を使用し、モックのデータベースをセットします。  \r\nそこで一旦、 API が機能するか確認します。\r\n\r\n```\r\nfunc TestShouldGetPosts(t *testing.T) {\r\n    // ...\r\n\r\n    // もともと作成した api 構造体\r\n    app := &api{db}\r\n    req, err := http.NewRequest(\"GET\", \"http://localhost/posts\", nil)\r\n    if err != nil {\r\n        t.Fatalf(\"an error \'%s\' was not expected while creating request\", err)\r\n    }\r\n    w := httptest.NewRecorder()\r\n\r\n    // ...\r\n}\r\n```\r\nここで 発行された SQL に対してモックを当て込みます。  \r\n行の構造体？を宣言し、必要な分のレコードを追加していきます。  \r\n  \r\nちなみに `NewRows` したけど `AddRows` しなければ何も値がなかった状態を作れます。（ `404 Not Found` ）  \r\n  \r\nそのあと、入れ替える SQL を指定します。  \r\nどうやら正規表現でも大丈夫なようです。\r\n\r\n```\r\nfunc TestShouldGetPosts(t *testing.T) {\r\n    // ...\r\n\r\n    rows := sqlmock.NewRows([]string{\"id\", \"title\", \"body\"}).\r\n    AddRow(1, \"post 1\", \"hello\").\r\n    AddRow(2, \"post 2\", \"world\")\r\n\r\n    mock.ExpectQuery(\"^SELECT (.+) FROM posts$\").WillReturnRows(rows)\r\n\r\n    // ...\r\n}\r\n```\r\nそれでは実際にリクエストします。  \r\nリクエストあとは、取得した結果（ `w` ）と期待値を比較します。  \r\n`assertJSON` メソッドはサンプル内で宣言しているメソッドです。\r\n\r\n```\r\nfunc TestShouldGetPosts(t *testing.T) {\r\n    // ...\r\n\r\n    app.posts(w, req)\r\n\r\n    if w.Code != 200 {\r\n        t.Fatalf(\"expected status code to be 200, but got: %d\", w.Code)\r\n    }\r\n\r\n    data := struct {\r\n        Posts []*post\r\n    }{Posts: []*post{\r\n        {ID: 1, Title: \"post 1\", Body: \"hello\"},\r\n        {ID: 2, Title: \"post 2\", Body: \"world\"},\r\n    }}\r\n    app.assertJSON(w.Body.Bytes(), data, t)\r\n\r\n    // ...\r\n}\r\n```\r\n最後にこのテストを入れておきます。  \r\nおそらく決まり文句的な感じかと思いますが、キューに入った全ての処理がちゃんと実行されたか確認してくれるようです。  \r\n[https://godoc.org/github.com/DATA-DOG/go-sqlmock#Sqlmock](https://godoc.org/github.com/DATA-DOG/go-sqlmock#Sqlmock)\r\n\r\n```\r\nfunc TestShouldGetPosts(t *testing.T) {\r\n    // ...\r\n\r\n    if err := mock.ExpectationsWereMet(); err != nil {\r\n        t.Errorf(\"there were unfulfilled expectations: %s\", err)\r\n    }\r\n}\r\n```\r\n## さいごに\r\nモックのデータベースを入れる構造体さえ作ってしまえば、簡単に組み込める気がしました。  \r\n全てのコードを入れると長くなりそうだったので端折ってしまいました。  \r\nAPI のコードも見たい場合は、パッケージのリポジトリを参照してください。','',1,'2019-02-12 08:00:00','2019-02-10 16:34:04','2019-02-10 16:34:04'),(67,1,0,'Twitter でフォロワー X 人、という目標設定','## はじめに\r\n\r\n完全にポエムです。  \r\nTwitter のタイムラインとか見てると、「Twitter や Instagram でフォロワー数 XX 人達成する方法伝授します」的なツイートや記事を目にします。  \r\n普段ならスルーするのですが、たまたま **もし自分がそのような課題を与えられたらどうするか** と考え始めたのがきっかけです。  \r\n  \r\nもちろん、フォロワー増やしてどうするのといった結果の話は置いておいて、あくまで過程を考えています。  \r\nまた、「こうすればフォロワー増える」という結論を導く訳ではないこともご了承ください。\r\n\r\n## フォロワーを増やそうと思ったら\r\n\r\n### 手当たり次第フォローする\r\n\r\n足で稼ぐパワープレーですが、一番確実な方法な気がします。  \r\n仮に 1 % がフォローバックしてくれるのであれば、 100 万ユーザーをフォローすれば、 1 万がフォロワーになってくれそうです。  \r\n本当にフォロワーを増やすための方法ですが、例えば「 3 ヶ月以内にフォロワー 1,000 」とかだと、この方法が達成しやすそうです。  \r\n指標としては、「 **1 日 X 人フォローする**」でしょうか。  \r\n  \r\nとはいえ、相当地道な作業なのでフォローしてもらえるような、魅力的なアカウントにしたいところ。\r\n\r\n### 有益な情報発信をする（ツイートするのみ）\r\n\r\n自分のコンテンツを持たず、 ツイートのみで頑張ろうとします。  \r\n（自作の絵やブログなんかも後述する **コンテンツを持つ場合** に含めることにします。）  \r\n  \r\n有名人のような肩書きがあればフォローしてもらえそうですが、普通の人だとなかなかツイートだけでは注目されない気がします。  \r\n注目されるために過激なツイートになるのもわかる気がしますが、炎上覚悟なので難しそう。  \r\n  \r\n内容は考えたところでなかなか閃く物でもないので、やはり数で勝負。  \r\nということで、指標としては、「 **1 日 X ツイートする**」でしょうか。  \r\n\r\n### コンテンツを持っている\r\n\r\nサービス、ブログ、イラストなどを持っている場合です。  \r\n確かに私も、そういうツイートをしてくれるユーザーはフォローしているような気がします。  \r\n（私もブサイクながら本ブログを運用しています）\r\n  \r\nすでに人気のあるコンテンツならともかく、新しく自作するとなるとやはり注目されない期間を我慢する必要はありそうです。  \r\nコンテンツを魅力的にすることは、もはや「フォロワー数を増やす」という目標を超えてしまっているので、「コンテンツを魅力的にする」ことを目標にした方が良い気がします。\r\n\r\n### 人脈を増やす\r\n\r\nそもそもリアルで知ってもらえればフォローされやすい気がします。  \r\n勉強会やカンファレンスなどで発表すれば 1 対 多で知ってもらえるので、「足で稼ぐ」的な側面は残りますが、フォロワー数を増やす以外にも良い経験が得られそうです。  \r\n「勉強会で X 人に声をかける」とかが良さそうな気もしますが、こちらも他のことに焦点を当てた方が良い気がします。\r\n\r\n## さいごに\r\n\r\n色々綴ってしまいましたが、改めて考えてみると、「フォロワー数を増やす」というのはあくまで結果な気がします。  \r\n過程の指標としては、やはり別のことを考えた方が良さそうです。  \r\n私自身であれば、このブログをもっと充実させることが目標になるのかなと思います。  \r\n  \r\nもし現在の自分の目標にもやもやがあれば、「フォロワー数を増やす」ということから自分を見つめなおしても良いのかもしれません。  \r\n  \r\nとはいえ、冒頭でも記載したように、もし「 X ヶ月以内にフォロワー数 Y 」とかの題目を与えられることになったら（多分ないとは思いますが ）、パワープレーには走ってしまいそうですw','',1,'2019-02-14 07:00:00','2019-02-13 21:58:26','2019-02-14 07:48:58');
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `recommended_books`
--

DROP TABLE IF EXISTS `recommended_books`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `recommended_books` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `post_category_id` int(11) NOT NULL DEFAULT '0',
  `link` text NOT NULL,
  `image_url` text NOT NULL,
  `button_url` text NOT NULL,
  `active` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_recommended_books_on_post_category_id` (`post_category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `recommended_books`
--

/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-09-08 16:43:01
